--- common/wscript.ori	2021-10-23 18:30:46.072633000 +0200
+++ common/wscript	2021-10-23 18:33:06.449464000 +0200
@@ -28,6 +28,8 @@
         env_includes = ['../macosx', '../posix', '../macosx/coreaudio']
     if bld.env['IS_LINUX']:
         env_includes = ['../linux', '../posix', '../linux/alsa']
+    if bld.env['IS_DRAGONFLY']:
+        env_includes = ['../freebsd', '../posix', '../solaris/oss']
     if bld.env['IS_FREEBSD']:
         env_includes = ['../freebsd', '../posix', '../solaris/oss']
     if bld.env['IS_SUN']:
@@ -38,7 +40,7 @@
     process.name     = target
     process.target   = target
     process.source   = sources
-    if bld.env['IS_LINUX'] or bld.env['IS_MACOSX'] or bld.env['IS_FREEBSD']:
+    if bld.env['IS_LINUX'] or bld.env['IS_MACOSX'] or bld.env['IS_FREEBSD'] or bld.env['IS_DRAGONFLY']:
         process.env.append_value('CPPFLAGS', '-fvisibility=hidden')
     process.install_path = '${ADDON_DIR}/'
     process.use = [uselib.name]
@@ -94,6 +96,20 @@
         uselib.append('RT')
         uselib.append('DL')
 
+    if bld.env['IS_DRAGONFLY']:
+        common_libsources += [
+            'JackDebugClient.cpp',
+            'timestamps.c',
+            'promiscuous.c',
+            '../posix/JackPosixThread.cpp',
+            '../posix/JackPosixProcessSync.cpp',
+            '../posix/JackPosixMutex.cpp',
+            '../posix/JackPosixSemaphore.cpp',
+            '../posix/JackSocket.cpp',
+            '../posix/JackPosixTime.c',
+            ]
+        includes = ['../freebsd', '../posix'] + includes
+
     if bld.env['IS_FREEBSD']:
         common_libsources += [
             'JackDebugClient.cpp',
@@ -192,6 +208,12 @@
             '../posix/JackPosixServerLaunch.cpp',
             ]
 
+    if bld.env['IS_DRAGONFLY']:
+        clientlib.source += [
+            '../posix/JackSocketClientChannel.cpp',
+            '../posix/JackPosixServerLaunch.cpp',
+            ]
+
     if bld.env['IS_FREEBSD']:
         clientlib.source += [
             '../posix/JackSocketClientChannel.cpp',
@@ -227,6 +249,9 @@
     if bld.env['IS_LINUX']:
         clientlib.env.append_value('CPPFLAGS', '-fvisibility=hidden')
 
+    if bld.env['IS_DRAGONFLY']:
+        clientlib.env.append_value('CPPFLAGS', '-fvisibility=hidden')
+
     if bld.env['IS_FREEBSD']:
         clientlib.env.append_value('CPPFLAGS', '-fvisibility=hidden')
 
@@ -306,6 +331,14 @@
             '../posix/JackNetUnixSocket.cpp',
             ]
 
+    if bld.env['IS_DRAGONFLY']:
+        serverlib.source += [
+            '../posix/JackSocketServerChannel.cpp',
+            '../posix/JackSocketNotifyChannel.cpp',
+            '../posix/JackSocketServerNotifyChannel.cpp',
+            '../posix/JackNetUnixSocket.cpp',
+            ]
+
     if bld.env['IS_FREEBSD']:
         serverlib.source += [
             '../posix/JackSocketServerChannel.cpp',
@@ -393,6 +426,10 @@
             netlib.source += ['../posix/JackNetUnixSocket.cpp','../posix/JackPosixThread.cpp', '../posix/JackPosixMutex.cpp', '../linux/JackLinuxTime.c']
             netlib.env.append_value('CPPFLAGS', '-fvisibility=hidden')
 
+        if bld.env['IS_DRAGONFLY']:
+            netlib.source += ['../posix/JackNetUnixSocket.cpp','../posix/JackPosixThread.cpp', '../posix/JackPosixMutex.cpp', '../linux/JackLinuxTime.c']
+            netlib.env.append_value('CPPFLAGS', '-fvisibility=hidden')
+
         if bld.env['IS_FREEBSD']:
             netlib.source += ['../posix/JackNetUnixSocket.cpp','../posix/JackPosixThread.cpp', '../posix/JackPosixMutex.cpp', '../linux/JackLinuxTime.c']
             netlib.env.append_value('CPPFLAGS', '-fvisibility=hidden')
@@ -459,7 +496,7 @@
          process = create_jack_process_obj(bld, 'audioadapter', audio_adapter_sources, serverlib)
          process.use += ['ALSA', 'SAMPLERATE']
 
-    if bld.env['BUILD_ADAPTER'] and (bld.env['IS_SUN'] or bld.env['IS_FREEBSD']):
+    if bld.env['BUILD_ADAPTER'] and (bld.env['IS_SUN'] or bld.env['IS_FREEBSD'] or bld.env['IS_DRAGONFLY']):
          audio_adapter_sources += ['../solaris/oss/JackOSSAdapter.cpp', 'memops.c']
          process = create_jack_process_obj(bld, 'audioadapter', audio_adapter_sources, serverlib)
          process.use += 'SAMPLERATE'
