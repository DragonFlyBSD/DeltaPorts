--- chrome/browser/BUILD.gn.intermediate	2017-01-26 11:39:31.000000000 +0200
+++ chrome/browser/BUILD.gn
@@ -1468,6 +1468,10 @@ split_static_library("browser") {
     defines += [ "USE_CRAS" ]
   }
 
+  if (is_bsd && !use_dbus) {
+    defines = [ "KWALLET_DBUS_DUMMY" ]
+  }
+
   if (toolkit_views) {
     deps += [ "//ui/views" ]
   }
@@ -3478,7 +3482,7 @@ split_static_library("browser") {
       "themes/theme_service_aurax11.h",
       "web_applications/web_app_linux.cc",
     ]
-    if (!use_ozone) {
+    if (!use_ozone && use_glib) {
       sources += [
         "password_manager/native_backend_libsecret.cc",
         "password_manager/native_backend_libsecret.h",
--- components/os_crypt/BUILD.gn.orig	2016-12-09 07:04:18.000000000 +0200
+++ components/os_crypt/BUILD.gn
@@ -68,7 +68,7 @@ static_library("os_crypt") {
     libs = [ "crypt32.lib" ]
   }
 
-  if (is_desktop_linux) {
+  if (is_desktop_linux || is_bsd) {
     sources -= [ "os_crypt_posix.cc" ]
     sources += [
       "key_storage_linux.cc",
--- chrome/browser/password_manager/password_store_factory.cc.orig	2016-12-09 07:04:15.000000000 +0200
+++ chrome/browser/password_manager/password_store_factory.cc
@@ -50,7 +50,9 @@
 #if defined(USE_LIBSECRET)
 #include "chrome/browser/password_manager/native_backend_libsecret.h"
 #endif
+#ifndef KWALLET_DBUS_DUMMY
 #include "chrome/browser/password_manager/native_backend_kwallet_x.h"
+#endif
 #include "chrome/browser/password_manager/password_store_x.h"
 #endif
 
@@ -198,6 +200,7 @@ PasswordStoreFactory::BuildServiceInstan
   std::unique_ptr<PasswordStoreX::NativeBackend> backend;
   if (selected_backend == os_crypt::SelectedLinuxBackend::KWALLET ||
       selected_backend == os_crypt::SelectedLinuxBackend::KWALLET5) {
+#ifndef KWALLET_DBUS_DUMMY
     VLOG(1) << "Trying KWallet for password storage.";
     base::nix::DesktopEnvironment used_desktop_env =
         selected_backend == os_crypt::SelectedLinuxBackend::KWALLET
@@ -210,6 +213,7 @@ PasswordStoreFactory::BuildServiceInstan
     } else {
       backend.reset();
     }
+#endif
   } else if (selected_backend == os_crypt::SelectedLinuxBackend::GNOME_ANY ||
              selected_backend ==
                  os_crypt::SelectedLinuxBackend::GNOME_KEYRING ||
