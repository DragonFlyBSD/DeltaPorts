diff --git BUILD.gn BUILD.gn
index 94297185eddd..4e42f90ba762 100644
--- BUILD.gn
+++ BUILD.gn
@@ -363,16 +363,11 @@ group("gn_all") {
     ]
   }
 
-  if (is_linux) {
-    # The following are definitely linux-only.
+  if (is_linux || is_bsd) {
+    # The following are definitely linux/bsd-only.
     deps += [
       "//chrome:manpage",
       "//chrome:xdg_mime",
-      "//net:disk_cache_memory_test",
-      "//net:quic_client",
-      "//net:quic_server",
-      "//sandbox/linux:chrome_sandbox",
-      "//sandbox/linux:sandbox_linux_unittests",
     ]
 
     if (use_dbus) {
@@ -381,6 +376,17 @@ group("gn_all") {
         "//dbus:dbus_unittests",
       ]
     }
+  }
+
+  if (is_linux) {
+    # The following are definitely linux-only.
+    deps += [
+      "//net:disk_cache_memory_test",
+      "//net:quic_client",
+      "//net:quic_server",
+      "//sandbox/linux:chrome_sandbox",
+      "//sandbox/linux:sandbox_linux_unittests",
+    ]
 
     if (is_chrome_branded && is_official_build) {
       # TODO(dpranke): add the linux_dump_symbols flag?
@@ -388,7 +394,7 @@ group("gn_all") {
     }
   }
 
-  if (is_ios || is_win || (is_linux && !is_chromeos)) {
+  if (is_ios || is_win || (is_linux && !is_chromeos) || is_bsd) {
     deps += [
       "//base:base_i18n_perftests",
       "//base:base_perftests",
@@ -396,7 +402,7 @@ group("gn_all") {
     ]
   }
 
-  if ((is_win || is_mac || is_linux) &&
+  if ((is_win || is_mac || is_linux || is_bsd) &&
       (target_cpu == "x86" || target_cpu == "x64")) {
     deps += [ "//third_party/swiftshader" ]
   }
@@ -483,6 +489,10 @@ group("gn_all") {
       "//breakpad:microdump_stackwalk($host_toolchain)",
       "//breakpad:minidump_dump($host_toolchain)",
       "//breakpad:minidump_stackwalk($host_toolchain)",
+    ]
+  }
+  if (is_android || (is_linux && !is_chromeos) || is_bsd) {
+    deps += [
       "//components/network_hints/browser",
       "//content/public/app:browser",
       "//content/public/app:child",
@@ -557,7 +567,7 @@ group("gn_all") {
       deps +=
           [ "//chrome/installer/mini_installer:next_version_mini_installer" ]
     }
-  } else if (!is_android && !is_ios && !is_fuchsia) {
+  } else if (!is_android && !is_ios && !is_fuchsia && !is_bsd) {
     deps += [ "//breakpad:symupload($host_toolchain)" ]
   }
 
@@ -580,15 +590,15 @@ group("gn_all") {
     ]
   }
 
-  if (!is_android && !is_ios && !is_fuchsia) {
+  if (!is_android && !is_ios && !is_fuchsia && !is_bsd) {
     deps += [ "//content/browser/bluetooth/tools:bluetooth_metrics_hash" ]
   }
 
-  if (!is_android && !is_ios && !is_chromeos && !is_fuchsia) {
+  if (!is_android && !is_ios && !is_chromeos && !is_fuchsia && !is_bsd) {
     deps += [ "//components/proximity_auth:proximity_auth_unittests" ]
   }
 
-  if (is_win || is_linux) {
+  if (is_win || is_linux || is_bsd) {
     deps += [
       "//mash:all",
       "//media/mojo/services:media_service_unittests",
@@ -606,7 +616,7 @@ group("gn_all") {
     }
   }
 
-  if (is_linux && !is_chromeos && !is_chromecast) {
+  if ((is_linux && !is_chromeos && !is_chromecast) || is_bsd) {
     # TODO(GYP): Figure out if any of these should be in gn_all
     # and figure out how cross-platform they are
     deps += [
@@ -647,12 +657,16 @@ group("gn_all") {
       if (!is_android) {
         deps += [ "//chrome/test:load_library_perf_tests" ]
       }
+      if (!is_bsd) {
+        deps += [
+          "//native_client/src/trusted/platform_qualify:vcpuid",
+        ]
+      }
       deps += [
-        "//native_client/src/trusted/platform_qualify:vcpuid",
         "//third_party/libjpeg_turbo:simd_asm",
       ]
     }
-    if (is_linux && current_toolchain == host_toolchain) {
+    if ((is_linux || is_bsd) && current_toolchain == host_toolchain) {
       deps += [ "//v8:v8_shell" ]
     }
   }
@@ -879,7 +893,7 @@ if (!is_ios && !is_fuchsia) {
       data_deps += [ "//content/shell:content_shell_crash_service" ]
     }
 
-    if (!is_win && !is_android) {
+    if (!is_win && !is_android && !is_bsd) {
       data_deps += [ "//breakpad:minidump_stackwalk($host_toolchain)" ]
     }
 
@@ -941,7 +955,7 @@ group("chromium_swarm_tests") {
 group("chromium_builder_perf") {
   testonly = true
 
-  if (!is_ios && !is_android && !is_chromecast && !is_fuchsia) {
+  if (!is_ios && !is_android && !is_chromecast && !is_fuchsia && !is_bsd) {
     data_deps = [
       "//cc:cc_perftests",
       "//chrome/test:load_library_perf_tests",
diff --git apps/ui/views/app_window_frame_view.cc apps/ui/views/app_window_frame_view.cc
index 549dd2e3010c..e777903e936e 100644
--- apps/ui/views/app_window_frame_view.cc
+++ apps/ui/views/app_window_frame_view.cc
@@ -132,7 +132,7 @@ gfx::Rect AppWindowFrameView::GetBoundsForClientView() const {
 gfx::Rect AppWindowFrameView::GetWindowBoundsForClientBounds(
     const gfx::Rect& client_bounds) const {
   gfx::Rect window_bounds = client_bounds;
-#if defined(OS_LINUX) && !defined(OS_CHROMEOS)
+#if (defined(OS_LINUX) && !defined(OS_CHROMEOS)) || defined(OS_BSD)
   // Get the difference between the widget's client area bounds and window
   // bounds, and grow |window_bounds| by that amount.
   gfx::Insets native_frame_insets =
diff --git base/BUILD.gn base/BUILD.gn
index 19fe0bc0f6ce..35984ea9fa34 100644
--- base/BUILD.gn
+++ base/BUILD.gn
@@ -657,37 +657,38 @@ component("base") {
     "process/process_handle.cc",
     "process/process_handle.h",
 
-    #"process/process_handle_freebsd.cc",  # Unused in Chromium build.
+    "process/process_handle_freebsd.cc",
     "process/process_handle_linux.cc",
     "process/process_handle_mac.cc",
 
-    #"process/process_handle_openbsd.cc",  # Unused in Chromium build.
+    "process/process_handle_openbsd.cc",
     "process/process_handle_posix.cc",
     "process/process_handle_win.cc",
     "process/process_info.h",
+    "process/process_info_bsd.cc",
     "process/process_info_linux.cc",
     "process/process_info_mac.cc",
     "process/process_info_win.cc",
     "process/process_iterator.cc",
     "process/process_iterator.h",
 
-    #"process/process_iterator_freebsd.cc",  # Unused in Chromium build.
+    "process/process_iterator_freebsd.cc",
     "process/process_iterator_linux.cc",
     "process/process_iterator_mac.cc",
 
-    #"process/process_iterator_openbsd.cc",  # Unused in Chromium build.
+    "process/process_iterator_openbsd.cc",
     "process/process_iterator_win.cc",
     "process/process_linux.cc",
     "process/process_mac.cc",
     "process/process_metrics.cc",
     "process/process_metrics.h",
 
-    #"process/process_metrics_freebsd.cc",  # Unused in Chromium build.
+    "process/process_metrics_freebsd.cc",
     "process/process_metrics_ios.cc",
     "process/process_metrics_linux.cc",
     "process/process_metrics_mac.cc",
 
-    #"process/process_metrics_openbsd.cc",  # Unused in Chromium build.
+    "process/process_metrics_openbsd.cc",
     "process/process_metrics_posix.cc",
     "process/process_metrics_win.cc",
     "process/process_posix.cc",
@@ -801,12 +802,12 @@ component("base") {
     "syslog_logging.cc",
     "syslog_logging.h",
 
-    #"sys_info_freebsd.cc",  # Unused in Chromium build.
+    "sys_info_freebsd.cc",
     "sys_info_ios.mm",
     "sys_info_linux.cc",
     "sys_info_mac.mm",
 
-    #"sys_info_openbsd.cc",  # Unused in Chromium build.
+    "sys_info_openbsd.cc",
     "sys_info_posix.cc",
     "sys_info_win.cc",
     "system_monitor/system_monitor.cc",
@@ -877,6 +878,7 @@ component("base") {
     "threading/non_thread_safe_impl.h",
     "threading/platform_thread.h",
     "threading/platform_thread_android.cc",
+    "threading/platform_thread_dragonfly.cc",
     "threading/platform_thread_internal_posix.cc",
     "threading/platform_thread_internal_posix.h",
     "threading/platform_thread_linux.cc",
@@ -1093,6 +1095,33 @@ component("base") {
     "win/wrapped_window_proc.h",
   ]
 
+  if (!is_bsd) {
+    sources -= [
+      "process/process_info_bsd.cc",
+    ]
+  }
+  if (current_os != "dragonfly") {
+    sources -= [
+      "threading/platform_thread_dragonfly.cc",
+    ]
+  }
+  if (current_os != "freebsd" && current_os != "dragonfly") {
+    sources -= [
+      "process/process_handle_freebsd.cc",
+      "process/process_iterator_freebsd.cc",
+      "process/process_metrics_freebsd.cc",
+      "sys_info_freebsd.cc",
+    ]
+  }
+  if (current_os != "openbsd") {
+    sources -= [
+      "process/process_handle_openbsd.cc",
+      "process/process_iterator_openbsd.cc",
+      "process/process_metrics_openbsd.cc",
+      "sys_info_openbsd.cc",
+    ]
+  }
+
   if (!is_nacl) {
     sources += [
       "base_paths.cc",
@@ -1106,7 +1135,7 @@ component("base") {
       "base_paths_win.h",
     ]
 
-    if (is_linux) {
+    if (is_linux || is_bsd) {
       sources += [ "base_paths_posix.cc" ]
     }
   }
@@ -1168,7 +1197,7 @@ component("base") {
         "allocator/allocator_shim_override_glibc_weak_symbols.h",
       ]
       deps += [ "//base/allocator:tcmalloc" ]
-    } else if (is_linux && use_allocator == "none") {
+    } else if ((is_linux || is_bsd) && use_allocator == "none") {
       sources += [ "allocator/allocator_shim_default_dispatch_to_glibc.cc" ]
     } else if (is_android && use_allocator == "none") {
       sources += [
@@ -1511,16 +1540,42 @@ component("base") {
     }
   } else {
     # Non-Mac/ios.
+    if (current_os != "dragonfly" && current_os != "freebsd") {
+      sources -= [
+        "files/file_path_watcher_kqueue.cc",
+        "files/file_path_watcher_kqueue.h",
+      ]
+    }
     sources -= [
       "files/file_path_watcher_fsevents.cc",
       "files/file_path_watcher_fsevents.h",
-      "files/file_path_watcher_kqueue.cc",
-      "files/file_path_watcher_kqueue.h",
     ]
   }
+  if (is_bsd) {
+    sources -= [
+      "files/file_path_watcher_linux.cc",
+      "files/file_util_linux.cc",
+      "process/process_handle_linux.cc",
+      "process/process_info_linux.cc",
+      "process/process_iterator_linux.cc",
+      "process/process_linux.cc",
+      "process/process_metrics_linux.cc",
+      "threading/platform_thread_linux.cc",
+      "sys_info_linux.cc",
+      "process/internal_linux.cc",
+#      "debug/proc_maps_linux.cc",
+    ]
+  }
+  if (current_os == "dragonfly" || current_os == "freebsd") {
+      set_sources_assignment_filter([])
+      sources += [
+        "files/file_path_watcher_mac.cc",
+      ]
+      set_sources_assignment_filter(sources_assignment_filter)
+  }
 
   # Linux.
-  if (is_linux) {
+  if (is_linux || is_bsd) {
     if (is_asan || is_lsan || is_msan || is_tsan) {
       # For llvm-sanitizer.
       data += [ "//third_party/llvm-build/Release+Asserts/lib/libstdc++.so.6" ]
@@ -2362,7 +2417,7 @@ test("base_unittests") {
     }
   }
 
-  if (is_linux) {
+  if (is_linux || is_bsd) {
     if (is_desktop_linux) {
       sources += [ "nix/xdg_util_unittest.cc" ]
     }
diff --git base/allocator/allocator_shim_default_dispatch_to_glibc.cc base/allocator/allocator_shim_default_dispatch_to_glibc.cc
index 8574da3eb3d0..725fe3c0d56f 100644
--- base/allocator/allocator_shim_default_dispatch_to_glibc.cc
+++ base/allocator/allocator_shim_default_dispatch_to_glibc.cc
@@ -4,18 +4,33 @@
 
 #include "base/allocator/allocator_shim.h"
 
+#if defined(OS_BSD)
+#include <stdlib.h>
+#else
 #include <malloc.h>
+#endif
+#if defined(OS_FREEBSD)
+#include <malloc_np.h>
+#endif
 
 // This translation unit defines a default dispatch for the allocator shim which
 // routes allocations to libc functions.
 // The code here is strongly inspired from tcmalloc's libc_override_glibc.h.
 
 extern "C" {
+#if defined(OS_BSD)
+void* __malloc(size_t size);
+void* __calloc(size_t n, size_t size);
+void* __realloc(void* address, size_t size);
+int __posix_memalign(void **ptr, size_t alignment, size_t size);
+void __free(void* ptr);
+#else
 void* __libc_malloc(size_t size);
 void* __libc_calloc(size_t n, size_t size);
 void* __libc_realloc(void* address, size_t size);
 void* __libc_memalign(size_t alignment, size_t size);
 void __libc_free(void* ptr);
+#endif
 }  // extern "C"
 
 namespace {
@@ -23,34 +38,59 @@ namespace {
 using base::allocator::AllocatorDispatch;
 
 void* GlibcMalloc(const AllocatorDispatch*, size_t size, void* context) {
+#if defined(OS_BSD)
+  return __malloc(size);
+#else
   return __libc_malloc(size);
+#endif
 }
 
 void* GlibcCalloc(const AllocatorDispatch*,
                   size_t n,
                   size_t size,
                   void* context) {
+#if defined(OS_BSD)
+  return __calloc(n, size);
+#else
   return __libc_calloc(n, size);
+#endif
 }
 
 void* GlibcRealloc(const AllocatorDispatch*,
                    void* address,
                    size_t size,
                    void* context) {
+#if defined(OS_BSD)
+  return __realloc(address, size);
+#else
   return __libc_realloc(address, size);
+#endif
 }
 
 void* GlibcMemalign(const AllocatorDispatch*,
                     size_t alignment,
                     size_t size,
                     void* context) {
+#if defined(OS_BSD)
+  void *ret;
+  if (__posix_memalign(&ret, alignment, size) != 0)
+    return nullptr;
+  else
+    return ret;
+#else
   return __libc_memalign(alignment, size);
+#endif
 }
 
 void GlibcFree(const AllocatorDispatch*, void* address, void* context) {
+#if defined(OS_BSD)
+  __free(address);
+#else
   __libc_free(address);
+#endif
 }
 
+#if !defined(OS_BSD) || defined(OS_FREEBSD)
 size_t GlibcGetSizeEstimate(const AllocatorDispatch*,
                             void* address,
                             void* context) {
@@ -58,6 +98,7 @@ size_t GlibcGetSizeEstimate(const AllocatorDispatch*,
   //     presence of interposing shims that divert allocations.
   return malloc_usable_size(address);
 }
+#endif
 
 }  // namespace
 
@@ -67,7 +108,9 @@ const AllocatorDispatch AllocatorDispatch::default_dispatch = {
     &GlibcMemalign,        /* alloc_aligned_function */
     &GlibcRealloc,         /* realloc_function */
     &GlibcFree,            /* free_function */
+#if !defined(OS_BSD) || defined(OS_FREEBSD)
     &GlibcGetSizeEstimate, /* get_size_estimate_function */
+#endif
     nullptr,               /* batch_malloc_function */
     nullptr,               /* batch_free_function */
     nullptr,               /* free_definite_size_function */
diff --git base/allocator/allocator_shim_override_libc_symbols.h base/allocator/allocator_shim_override_libc_symbols.h
index b77cbb1fe9dc..9554a5cc2e6a 100644
--- base/allocator/allocator_shim_override_libc_symbols.h
+++ base/allocator/allocator_shim_override_libc_symbols.h
@@ -10,7 +10,11 @@
 #endif
 #define BASE_ALLOCATOR_ALLOCATOR_SHIM_OVERRIDE_LIBC_SYMBOLS_H_
 
+#if defined(OS_FREEBSD) || defined(OS_DRAGONFLY)
+#include <stdlib.h>
+#else
 #include <malloc.h>
+#endif
 
 #include "base/allocator/allocator_shim_internals.h"
 
diff --git base/base_paths_posix.cc base/base_paths_posix.cc
index 00a15696cacd..a16ceb7ee215 100644
--- base/base_paths_posix.cc
+++ base/base_paths_posix.cc
@@ -24,7 +24,7 @@
 #include "base/process/process_metrics.h"
 #include "build/build_config.h"
 
-#if defined(OS_FREEBSD)
+#if defined(OS_FREEBSD) || defined(OS_DRAGONFLY)
 #include <sys/param.h>
 #include <sys/sysctl.h>
 #elif defined(OS_SOLARIS) || defined(OS_AIX)
@@ -45,7 +45,7 @@ bool PathProviderPosix(int key, FilePath* result) {
       }
       *result = bin_dir;
       return true;
-#elif defined(OS_FREEBSD)
+#elif defined(OS_FREEBSD) || defined(OS_DRAGONFLY)
       int name[] = { CTL_KERN, KERN_PROC, KERN_PROC_PATHNAME, -1 };
       char bin_dir[PATH_MAX + 1];
       size_t length = sizeof(bin_dir);
diff --git base/debug/debugger_posix.cc base/debug/debugger_posix.cc
index 648e66db47d9..cb7a50a4f387 100644
--- base/debug/debugger_posix.cc
+++ base/debug/debugger_posix.cc
@@ -34,7 +34,7 @@
 #include <sys/sysctl.h>
 #endif
 
-#if defined(OS_FREEBSD)
+#if defined(OS_FREEBSD) || defined(OS_DRAGONFLY)
 #include <sys/user.h>
 #endif
 
@@ -114,6 +114,8 @@ bool BeingDebugged() {
   is_set = true;
 #if defined(OS_FREEBSD)
   being_debugged = (info.ki_flag & P_TRACED) != 0;
+#elif defined(OS_DRAGONFLY)
+  being_debugged = (info.kp_flags & P_TRACED) != 0;
 #elif defined(OS_BSD)
   being_debugged = (info.p_flag & P_TRACED) != 0;
 #else
diff --git base/debug/proc_maps_linux.cc base/debug/proc_maps_linux.cc
index 0bb44b45ac3c..e6cd227fa6aa 100644
--- base/debug/proc_maps_linux.cc
+++ base/debug/proc_maps_linux.cc
@@ -12,7 +12,8 @@
 #include "base/strings/string_split.h"
 #include "build/build_config.h"
 
-#if defined(OS_LINUX) || defined(OS_ANDROID)
+#if defined(OS_LINUX) || defined(OS_ANDROID) || defined(OS_FREEBSD) ||	\
+    defined(OS_DRAGONFLY)
 #include <inttypes.h>
 #endif
 
@@ -28,6 +29,7 @@
 namespace base {
 namespace debug {
 
+#if defined(OS_LINUX)
 // Scans |proc_maps| starting from |pos| returning true if the gate VMA was
 // found, otherwise returns false.
 static bool ContainsGateVMA(std::string* proc_maps, size_t pos) {
@@ -43,15 +45,22 @@ static bool ContainsGateVMA(std::string* proc_maps, size_t pos) {
   return false;
 #endif
 }
+#endif
 
 bool ReadProcMaps(std::string* proc_maps) {
   // seq_file only writes out a page-sized amount on each call. Refer to header
   // file for details.
   const long kReadSize = sysconf(_SC_PAGESIZE);
 
+#if defined(OS_FREEBSD) || defined(OS_DRAGONFLY)
+  base::ScopedFD fd(HANDLE_EINTR(open("/proc/curproc/map", O_RDONLY)));
+  if (!fd.is_valid()) {
+    DPLOG(ERROR) << "Couldn't open /proc/curproc/map";
+#else
   base::ScopedFD fd(HANDLE_EINTR(open("/proc/self/maps", O_RDONLY)));
   if (!fd.is_valid()) {
     DPLOG(ERROR) << "Couldn't open /proc/self/maps";
+#endif
     return false;
   }
   proc_maps->clear();
@@ -76,6 +85,7 @@ bool ReadProcMaps(std::string* proc_maps) {
     if (bytes_read == 0)
       break;
 
+#if defined(OS_LINUX)
     // The gate VMA is handled as a special case after seq_file has finished
     // iterating through all entries in the virtual memory table.
     //
@@ -86,6 +96,7 @@ bool ReadProcMaps(std::string* proc_maps) {
     // Avoid this by searching for the gate VMA and breaking early.
     if (ContainsGateVMA(proc_maps, pos))
       break;
+#endif
   }
 
   return true;
@@ -113,12 +124,34 @@ bool ParseProcMaps(const std::string& input,
 
     MappedMemoryRegion region;
     const char* line = lines[i].c_str();
+#if defined(OS_FREEBSD) || defined(OS_DRAGONFLY)
+    char permissions[4] = {'\0'};  // Ensure NUL-terminated string.
+    char type[32] = {'\0'};  // Ensure NUL-terminated string.
+#else
     char permissions[5] = {'\0'};  // Ensure NUL-terminated string.
     uint8_t dev_major = 0;
     uint8_t dev_minor = 0;
     long inode = 0;
+#endif
     int path_index = 0;
 
+#if defined(OS_FREEBSD) || defined(OS_DRAGONFLY)
+    // Sample format:
+    //
+    // start end ? ? kva perms(rwx) refcount ? ? COW/NCOW NC/NNC type pathname
+    // 0x0000000008048000 0x0000000008056000 -1 0 0xffffff82f654fba0 r-x 1 0 0x2180 NCOW NNC vnode /lib/libc.so.8
+    //
+    // The final %n term captures the offset in the input string, which is used
+    // to determine the path name. It *does not* increment the return value.
+    // Refer to man 3 sscanf for details.
+    if (sscanf(line, "%lx %lx %*d %*d %*x %3c %*d %*d %*x %*s %*s %s %n",
+               &region.start, &region.end, permissions, type,
+               &path_index) < 4) {
+      DPLOG(WARNING) << "sscanf failed for line: " << line;
+      return false;
+    }
+    region.offset = 0;
+#else
     // Sample format from man 5 proc:
     //
     // address           perms offset  dev   inode   pathname
@@ -133,6 +166,7 @@ bool ParseProcMaps(const std::string& input,
       DPLOG(WARNING) << "sscanf failed for line: " << line;
       return false;
     }
+#endif
 
     region.permissions = 0;
 
@@ -151,6 +185,26 @@ bool ParseProcMaps(const std::string& input,
     else if (permissions[2] != '-')
       return false;
 
+#if defined(OS_FREEBSD) || defined(OS_DRAGONFLY)
+    if (strcmp(type, "vnode") != 0)
+      region.permissions |= MappedMemoryRegion::PRIVATE;
+
+    // Only for the first mapping (the executable), we can kind of rely on the
+    // file offset to be 0.
+    // Since /proc/curproc/map doesn't give us file offsets, we have to treat
+    // everything else like private anonymous memory.
+    if (regions.size() >= 1) {
+      static const char nopath[] = "";
+      region.permissions |= MappedMemoryRegion::PRIVATE;
+      // Pushing then assigning saves us a string copy.
+      regions.push_back(region);
+      regions.back().path.assign(nopath);
+    } else {
+      // Pushing then assigning saves us a string copy.
+      regions.push_back(region);
+      regions.back().path.assign(line + path_index);
+    }
+#else
     if (permissions[3] == 'p')
       region.permissions |= MappedMemoryRegion::PRIVATE;
     else if (permissions[3] != 's' && permissions[3] != 'S')  // Shared memory.
@@ -159,6 +213,7 @@ bool ParseProcMaps(const std::string& input,
     // Pushing then assigning saves us a string copy.
     regions.push_back(region);
     regions.back().path.assign(line + path_index);
+#endif
   }
 
   regions_out->swap(regions);
diff --git base/debug/stack_trace_posix.cc base/debug/stack_trace_posix.cc
index 5d6ff899b9a8..7e222d797241 100644
--- base/debug/stack_trace_posix.cc
+++ base/debug/stack_trace_posix.cc
@@ -34,7 +34,7 @@
 #include <AvailabilityMacros.h>
 #endif
 
-#if defined(OS_LINUX)
+#if defined(OS_LINUX) || defined(OS_FREEBSD) || defined(OS_DRAGONFLY)
 #include "base/debug/proc_maps_linux.h"
 #endif
 
@@ -300,13 +300,39 @@ void StackDumpSignalHandler(int signal, siginfo_t* info, void* void_context) {
 
   debug::StackTrace().Print();
 
-#if defined(OS_LINUX)
+#if defined(OS_LINUX) || defined(OS_DRAGONFLY)
 #if ARCH_CPU_X86_FAMILY
   ucontext_t* context = reinterpret_cast<ucontext_t*>(void_context);
   const struct {
     const char* label;
+#if defined(OS_DRAGONFLY)
+    uint64_t value;
+#else
     greg_t value;
+#endif
   } registers[] = {
+#if defined(OS_DRAGONFLY)
+    { "  r8: ", context->uc_mcontext.mc_r8 },
+    { "  r9: ", context->uc_mcontext.mc_r9 },
+    { " r10: ", context->uc_mcontext.mc_r10 },
+    { " r11: ", context->uc_mcontext.mc_r11 },
+    { " r12: ", context->uc_mcontext.mc_r12 },
+    { " r13: ", context->uc_mcontext.mc_r13 },
+    { " r14: ", context->uc_mcontext.mc_r14 },
+    { " r15: ", context->uc_mcontext.mc_r15 },
+    { "  di: ", context->uc_mcontext.mc_rdi },
+    { "  si: ", context->uc_mcontext.mc_rsi },
+    { "  bp: ", context->uc_mcontext.mc_rbp },
+    { "  bx: ", context->uc_mcontext.mc_rbx },
+    { "  dx: ", context->uc_mcontext.mc_rdx },
+    { "  ax: ", context->uc_mcontext.mc_rax },
+    { "  cx: ", context->uc_mcontext.mc_rcx },
+    { "  sp: ", context->uc_mcontext.mc_rsp },
+    { "  ip: ", context->uc_mcontext.mc_rip },
+    { " efl: ", context->uc_mcontext.mc_xflags },
+    { " erf: ", context->uc_mcontext.mc_err },
+    { " trp: ", context->uc_mcontext.mc_trapno },
+#else
 #if ARCH_CPU_32_BITS
     { "  gs: ", context->uc_mcontext.gregs[REG_GS] },
     { "  fs: ", context->uc_mcontext.gregs[REG_FS] },
@@ -352,6 +378,7 @@ void StackDumpSignalHandler(int signal, siginfo_t* info, void* void_context) {
     { " msk: ", context->uc_mcontext.gregs[REG_OLDMASK] },
     { " cr2: ", context->uc_mcontext.gregs[REG_CR2] },
 #endif  // ARCH_CPU_32_BITS
+#endif
   };
 
 #if ARCH_CPU_32_BITS
@@ -371,7 +398,7 @@ void StackDumpSignalHandler(int signal, siginfo_t* info, void* void_context) {
   }
   PrintToStderr("\n");
 #endif  // ARCH_CPU_X86_FAMILY
-#endif  // defined(OS_LINUX)
+#endif  // defined(OS_LINUX) || defined(OS_DRAGONFLY)
 
   PrintToStderr("[end of stack trace]\n");
 
diff --git base/debug/thread_heap_usage_tracker.cc base/debug/thread_heap_usage_tracker.cc
index 060fbe268b81..35e97fb245a5 100644
--- base/debug/thread_heap_usage_tracker.cc
+++ base/debug/thread_heap_usage_tracker.cc
@@ -18,6 +18,8 @@
 
 #if defined(OS_MACOSX) || defined(OS_IOS)
 #include <malloc/malloc.h>
+#elif defined(OS_DRAGONFLY)
+#include <stdlib.h>
 #else
 #include <malloc.h>
 #endif
diff --git base/files/file_path_watcher_mac.cc base/files/file_path_watcher_mac.cc
index 2520b9288ae9..b3afdd6310a9 100644
--- base/files/file_path_watcher_mac.cc
+++ base/files/file_path_watcher_mac.cc
@@ -10,7 +10,7 @@
 #include "base/memory/ptr_util.h"
 #include "build/build_config.h"
 
-#if !defined(OS_IOS)
+#if !defined(OS_IOS) && !defined(OS_DRAGONFLY) && !defined(OS_FREEBSD)
 #include "base/files/file_path_watcher_fsevents.h"
 #endif
 
@@ -31,9 +31,9 @@ class FilePathWatcherImpl : public FilePathWatcher::PlatformDelegate {
     if (recursive) {
       if (!FilePathWatcher::RecursiveWatchAvailable())
         return false;
-#if !defined(OS_IOS)
+#if !defined(OS_IOS) && !defined(OS_DRAGONFLY) && !defined(OS_FREEBSD)
       impl_ = MakeUnique<FilePathWatcherFSEvents>();
-#endif  // OS_IOS
+#endif  // OS_IOS && OS_DRAGONFLY && OS_FREEBSD
     } else {
       impl_ = MakeUnique<FilePathWatcherKQueue>();
     }
diff --git base/files/file_util_posix.cc base/files/file_util_posix.cc
index 7efac54e5303..afa6a3dd3b72 100644
--- base/files/file_util_posix.cc
+++ base/files/file_util_posix.cc
@@ -354,7 +354,7 @@ bool CopyDirectory(const FilePath& from_path,
 #endif  // !defined(OS_NACL_NONSFI)
 
 bool CreateLocalNonBlockingPipe(int fds[2]) {
-#if defined(OS_LINUX)
+#if defined(OS_LINUX) || defined(OS_BSD)
   return pipe2(fds, O_CLOEXEC | O_NONBLOCK) == 0;
 #else
   int raw_fds[2];
diff --git base/files/memory_mapped_file_posix.cc base/files/memory_mapped_file_posix.cc
index 55b754d83a01..659f5cbc516a 100644
--- base/files/memory_mapped_file_posix.cc
+++ base/files/memory_mapped_file_posix.cc
@@ -114,6 +114,8 @@ bool MemoryMappedFile::MapFileRegionToMemory(
 
 #if defined(OS_ANDROID) && __ANDROID_API__ < 21
       do_manual_extension = true;
+#elif defined(OS_DRAGONFLY)
+      do_manual_extension = true;
 #elif !defined(OS_MACOSX)
       if (posix_fallocate(file_.GetPlatformFile(), region.offset,
                           region.size) != 0) {
diff --git base/i18n/icu_util.cc base/i18n/icu_util.cc
index 124336b684ab..902c41ea0db8 100644
--- base/i18n/icu_util.cc
+++ base/i18n/icu_util.cc
@@ -20,7 +20,7 @@
 #include "build/build_config.h"
 #include "third_party/icu/source/common/unicode/putil.h"
 #include "third_party/icu/source/common/unicode/udata.h"
-#if defined(OS_LINUX) && !defined(OS_CHROMEOS)
+#if (defined(OS_LINUX) && !defined(OS_CHROMEOS)) || defined(OS_BSD)
 #include "third_party/icu/source/i18n/unicode/timezone.h"
 #endif
 
@@ -298,7 +298,7 @@ bool InitializeICU() {
 // TODO(jungshik): Some callers do not care about tz at all. If necessary,
 // add a boolean argument to this function to init'd the default tz only
 // when requested.
-#if defined(OS_LINUX) && !defined(OS_CHROMEOS)
+#if (defined(OS_LINUX) && !defined(OS_CHROMEOS)) || defined(OS_BSD)
   if (result)
     std::unique_ptr<icu::TimeZone> zone(icu::TimeZone::createDefault());
 #endif
diff --git base/message_loop/incoming_task_queue.cc base/message_loop/incoming_task_queue.cc
index 67796ffa377f..ba12bf78632e 100644
--- base/message_loop/incoming_task_queue.cc
+++ base/message_loop/incoming_task_queue.cc
@@ -73,7 +73,7 @@ bool IncomingTaskQueue::AddToIncomingQueue(
 
   PendingTask pending_task(from_here, std::move(task),
                            CalculateDelayedRuntime(delay), nestable);
-#if defined(OS_WIN)
+#if defined(OS_WIN) || defined(OS_DRAGONFLY)
   // We consider the task needs a high resolution timer if the delay is
   // more than 0 and less than 32ms. This caps the relative error to
   // less than 50% : a 33ms wait can wake at 48ms since the default
@@ -160,7 +160,7 @@ bool IncomingTaskQueue::PostPendingTask(PendingTask* pending_task) {
   {
     AutoLock hold(incoming_queue_lock_);
 
-#if defined(OS_WIN)
+#if defined(OS_WIN) || defined(OS_DRAGONFLY)
     if (pending_task->is_high_res)
       ++high_res_task_count_;
 #endif
diff --git base/message_loop/message_loop.cc base/message_loop/message_loop.cc
index d72602babf6e..446f29e5192e 100644
--- base/message_loop/message_loop.cc
+++ base/message_loop/message_loop.cc
@@ -296,7 +296,7 @@ std::unique_ptr<MessageLoop> MessageLoop::CreateUnbound(
 
 MessageLoop::MessageLoop(Type type, MessagePumpFactoryCallback pump_factory)
     : type_(type),
-#if defined(OS_WIN)
+#if defined(OS_WIN) || defined(OS_DRAGONFLY)
       pending_high_res_tasks_(0),
       in_high_res_mode_(false),
 #endif
@@ -392,7 +392,7 @@ void MessageLoop::RunTask(PendingTask* pending_task) {
   DCHECK(nestable_tasks_allowed_);
   current_pending_task_ = pending_task;
 
-#if defined(OS_WIN)
+#if defined(OS_WIN) || defined(OS_DRAGONFLY)
   if (pending_task->is_high_res) {
     pending_high_res_tasks_--;
     CHECK_GE(pending_high_res_tasks_, 0);
@@ -469,7 +469,7 @@ void MessageLoop::ReloadWorkQueue() {
   // load. That reduces the number of locks-per-task significantly when our
   // queues get large.
   if (work_queue_.empty()) {
-#if defined(OS_WIN)
+#if defined(OS_WIN) || defined(OS_DRAGONFLY)
     pending_high_res_tasks_ +=
         incoming_task_queue_->ReloadWorkQueue(&work_queue_);
 #else
@@ -555,7 +555,7 @@ bool MessageLoop::DoIdleWork() {
     pump_->Quit();
 
   // When we return we will do a kernel wait for more tasks.
-#if defined(OS_WIN)
+#if defined(OS_WIN) || defined(OS_DRAGONFLY)
   // On Windows we activate the high resolution timer so that the wait
   // _if_ triggered by the timer happens with good resolution. If we don't
   // do this the default resolution is 15ms which might not be acceptable
@@ -563,7 +563,11 @@ bool MessageLoop::DoIdleWork() {
   bool high_res = pending_high_res_tasks_ > 0;
   if (high_res != in_high_res_mode_) {
     in_high_res_mode_ = high_res;
+#if defined(OS_WIN)
     Time::ActivateHighResolutionTimer(in_high_res_mode_);
+#elif defined(OS_DRAGONFLY)
+    pump_->ActivateHighResolutionTimer(in_high_res_mode_);
+#endif
   }
 #endif
   return false;
diff --git base/message_loop/message_loop.h base/message_loop/message_loop.h
index fa25e78f6d38..37e02a911131 100644
--- base/message_loop/message_loop.h
+++ base/message_loop/message_loop.h
@@ -389,7 +389,7 @@ class BASE_EXPORT MessageLoop : public MessagePump::Delegate,
   // this queue is only accessed (push/pop) by our current thread.
   TaskQueue work_queue_;
 
-#if defined(OS_WIN)
+#if defined(OS_WIN) || defined(OS_DRAGONFLY)
   // How many high resolution tasks are in the pending task queue. This value
   // increases by N every time we call ReloadWorkQueue() and decreases by 1
   // every time we call RunTask() if the task needs a high resolution timer.
diff --git base/message_loop/message_pump.h base/message_loop/message_pump.h
index c53be8041096..dce288669a5a 100644
--- base/message_loop/message_pump.h
+++ base/message_loop/message_pump.h
@@ -124,6 +124,13 @@ class BASE_EXPORT MessagePump : public NonThreadSafe {
 
   // Sets the timer slack to the specified value.
   virtual void SetTimerSlack(TimerSlack timer_slack);
+
+#if defined(OS_DRAGONFLY)
+  bool high_res_mode_ = false;
+  void ActivateHighResolutionTimer(bool high_res) {
+    high_res_mode_ = high_res;
+  }
+#endif
 };
 
 }  // namespace base
diff --git base/message_loop/message_pump_glib.cc base/message_loop/message_pump_glib.cc
index fd23745f4e15..712dab3cf170 100644
--- base/message_loop/message_pump_glib.cc
+++ base/message_loop/message_pump_glib.cc
@@ -6,6 +6,7 @@
 
 #include <fcntl.h>
 #include <math.h>
+#include <poll.h>
 
 #include <glib.h>
 
@@ -278,6 +279,14 @@ void MessagePumpGlib::HandleDispatch() {
   state_->delegate->DoDelayedWork(&delayed_work_time_);
 }
 
+_Static_assert(sizeof(GPollFD) == sizeof(pollfd),
+    "GPollFD struct size is different from pollfd struct size");
+
+static gint ppoll_wrapper(GPollFD *ufds, guint nfsd, gint timeout_) {
+  struct timespec ts = {timeout_ / 1000, (timeout_ % 1000) * 1000 * 1000};
+  return ppoll((pollfd *)ufds, nfsd, &ts, NULL);
+}
+
 void MessagePumpGlib::Run(Delegate* delegate) {
 #ifndef NDEBUG
   CheckThread(this);
@@ -306,7 +315,14 @@ void MessagePumpGlib::Run(Delegate* delegate) {
     // Don't block if we think we have more work to do.
     bool block = !more_work_is_plausible;
 
+    GPollFunc poll_func = NULL;
+    if (high_res_mode_) {
+      poll_func = g_main_context_get_poll_func(context_);
+      g_main_context_set_poll_func(context_, ppoll_wrapper);
+    }
     more_work_is_plausible = g_main_context_iteration(context_, block);
+    if (poll_func != NULL)
+      g_main_context_set_poll_func(context_, poll_func);
     if (state_->should_quit)
       break;
 
diff --git base/message_loop/message_pump_libevent.cc base/message_loop/message_pump_libevent.cc
index 48cb98a3308f..a0430fe1fae6 100644
--- base/message_loop/message_pump_libevent.cc
+++ base/message_loop/message_pump_libevent.cc
@@ -245,15 +245,26 @@ void MessagePumpLibevent::Run(Delegate* delegate) {
     if (delayed_work_time_.is_null()) {
       event_base_loop(event_base_, EVLOOP_ONCE);
     } else {
-      TimeDelta delay = delayed_work_time_ - TimeTicks::Now();
+      TimeTicks ticks = TimeTicks::Now();
+      TimeDelta delay = delayed_work_time_ - ticks;
       if (delay > TimeDelta()) {
+        TimeTicks nullticks;
+        struct timespec nowts = (ticks - nullticks).ToTimeSpec();
+        struct timeval nowtv = {nowts.tv_sec, nowts.tv_nsec / 1000};
         struct timeval poll_tv;
         poll_tv.tv_sec = delay.InSeconds();
         poll_tv.tv_usec = delay.InMicroseconds() % Time::kMicrosecondsPerSecond;
         event_set(timer_event.get(), -1, 0, timer_callback, event_base_);
+        event_base_cachetv(event_base_, &nowtv);
         event_base_set(event_base_, timer_event.get());
         event_add(timer_event.get(), &poll_tv);
-        event_base_loop(event_base_, EVLOOP_ONCE);
+        if (high_res_mode_) {
+          // XXX When high-precision kqueue event is available, this should
+          //     instead be setting a flag for the libevent2 timer-event.
+          event_base_loop(event_base_, EVLOOP_ONCE | EVLOOP_KEEPTIME | EVLOOP_PRECISE);
+        } else {
+          event_base_loop(event_base_, EVLOOP_ONCE | EVLOOP_KEEPTIME);
+        }
         event_del(timer_event.get());
       } else {
         // It looks like delayed_work_time_ indicates a time in the past, so we
diff --git base/metrics/persistent_memory_allocator.cc base/metrics/persistent_memory_allocator.cc
index deb82ac1dbe2..84e43d3767f0 100644
--- base/metrics/persistent_memory_allocator.cc
+++ base/metrics/persistent_memory_allocator.cc
@@ -1045,9 +1045,10 @@ void FilePersistentMemoryAllocator::FlushPartial(size_t length, bool sync) {
   // Windows doesn't support a synchronous flush.
   BOOL success = ::FlushViewOfFile(data(), length);
   DPCHECK(success);
-#elif defined(OS_MACOSX)
+#elif defined(OS_MACOSX) || defined(OS_DRAGONFLY)
   // On OSX, "invalidate" removes all cached pages, forcing a re-read from
-  // disk. That's not applicable to "flush" so omit it.
+  // disk. That's not applicable to "flush" so omit it. DragonFly seems to
+  // behave similarly.
   int result =
       ::msync(const_cast<void*>(data()), length, sync ? MS_SYNC : MS_ASYNC);
   DCHECK_NE(EINVAL, result);
diff --git base/posix/unix_domain_socket_linux.cc base/posix/unix_domain_socket_linux.cc
index 6b445c6615be..4add116f9419 100644
--- base/posix/unix_domain_socket_linux.cc
+++ base/posix/unix_domain_socket_linux.cc
@@ -17,7 +17,7 @@
 #include "base/stl_util.h"
 #include "build/build_config.h"
 
-#if !defined(OS_NACL_NONSFI)
+#if !defined(OS_NACL_NONSFI) && !defined(OS_BSD)
 #include <sys/uio.h>
 #endif
 
@@ -37,8 +37,13 @@ bool CreateSocketPair(ScopedFD* one, ScopedFD* two) {
 
 // static
 bool UnixDomainSocket::EnableReceiveProcessId(int fd) {
+#if defined(OS_DRAGONFLY)
+  // Doesn't need explicit activation in DragonFly.
+  return true;
+#else
   const int enable = 1;
   return setsockopt(fd, SOL_SOCKET, SO_PASSCRED, &enable, sizeof(enable)) == 0;
+#endif	// !defined(OS_DRAGONFLY)
 }
 #endif  // !defined(OS_NACL_NONSFI)
 
@@ -112,7 +117,9 @@ ssize_t UnixDomainSocket::RecvMsgWithFlags(int fd,
 
   const size_t kControlBufferSize =
       CMSG_SPACE(sizeof(int) * kMaxFileDescriptors)
-#if !defined(OS_NACL_NONSFI)
+#if defined(OS_DRAGONFLY)
+      + CMSG_SPACE(sizeof(struct cmsgcred))
+#elif !defined(OS_NACL_NONSFI)
       // The PNaCl toolchain for Non-SFI binary build does not support ucred.
       + CMSG_SPACE(sizeof(struct ucred))
 #endif
@@ -140,7 +147,13 @@ ssize_t UnixDomainSocket::RecvMsgWithFlags(int fd,
         wire_fds = reinterpret_cast<int*>(CMSG_DATA(cmsg));
         wire_fds_len = payload_len / sizeof(int);
       }
-#if !defined(OS_NACL_NONSFI)
+#if defined(OS_DRAGONFLY)
+      if (cmsg->cmsg_level == SOL_SOCKET && cmsg->cmsg_type == SCM_CREDS) {
+        DCHECK_EQ(payload_len, sizeof(struct cmsgcred));
+        DCHECK_EQ(pid, -1);
+        pid = reinterpret_cast<struct cmsgcred*>(CMSG_DATA(cmsg))->cmcred_pid;
+      }
+#elif !defined(OS_NACL_NONSFI)
       // The PNaCl toolchain for Non-SFI binary build does not support
       // SCM_CREDENTIALS.
       if (cmsg->cmsg_level == SOL_SOCKET &&
diff --git base/process/launch_posix.cc base/process/launch_posix.cc
index b841dee3276e..1e123093da9a 100644
--- base/process/launch_posix.cc
+++ base/process/launch_posix.cc
@@ -52,7 +52,7 @@
 #include <sys/ioctl.h>
 #endif
 
-#if defined(OS_FREEBSD)
+#if defined(OS_FREEBSD) || defined(OS_DRAGONFLY)
 #include <sys/event.h>
 #include <sys/ucontext.h>
 #endif
@@ -62,6 +62,9 @@
 #include <sys/event.h>
 
 #include "base/feature_list.h"
+#elif defined(OS_FREEBSD) || defined(OS_DRAGONFLY)
+extern char** environ;
+#pragma weak environ
 #else
 extern char** environ;
 #endif
@@ -217,6 +220,8 @@ static const char kFDDir[] = "/proc/self/fd";
 static const char kFDDir[] = "/dev/fd";
 #elif defined(OS_SOLARIS)
 static const char kFDDir[] = "/dev/fd";
+#elif defined(OS_DRAGONFLY)
+static const char kFDDir[] = "/dev/fd";
 #elif defined(OS_FREEBSD)
 static const char kFDDir[] = "/dev/fd";
 #elif defined(OS_OPENBSD)
diff --git base/process/memory_linux.cc base/process/memory_linux.cc
index b6a513b8a0cf..b2a3186219dd 100644
--- base/process/memory_linux.cc
+++ base/process/memory_linux.cc
@@ -162,6 +162,7 @@ void EnableTerminationOnOutOfMemory() {
 // the setuid sandbox (in process_util_linux.c, in the sandbox source)
 // also has its own C version.
 bool AdjustOOMScore(ProcessId process, int score) {
+#if !defined(OS_BSD)
   if (score < 0 || score > kMaxOomScore)
     return false;
 
@@ -191,6 +192,7 @@ bool AdjustOOMScore(ProcessId process, int score) {
     int score_len = static_cast<int>(score_str.length());
     return (score_len == WriteFile(oom_file, score_str.c_str(), score_len));
   }
+#endif
 
   return false;
 }
diff --git base/process/process_handle_freebsd.cc base/process/process_handle_freebsd.cc
index 192d72bcc56a..7abe1a982090 100644
--- base/process/process_handle_freebsd.cc
+++ base/process/process_handle_freebsd.cc
@@ -16,13 +16,20 @@ namespace base {
 
 ProcessId GetParentProcessId(ProcessHandle process) {
   struct kinfo_proc info;
-  size_t length;
+  size_t length = sizeof(struct kinfo_proc);
   int mib[] = { CTL_KERN, KERN_PROC, KERN_PROC_PID, process };
 
   if (sysctl(mib, arraysize(mib), &info, &length, NULL, 0) < 0)
     return -1;
 
+  if (length < sizeof(struct kinfo_proc))
+    return -1;
+
+#if defined(OS_DRAGONFLY)
+  return info.kp_ppid;
+#else
   return info.ki_ppid;
+#endif
 }
 
 FilePath GetProcessExecutablePath(ProcessHandle process) {
diff --git base/process/process_info_bsd.cc base/process/process_info_bsd.cc
new file mode 100644
index 000000000000..91bfcaac1365
--- /dev/null
+++ base/process/process_info_bsd.cc
@@ -0,0 +1,59 @@
+// Copyright 2013 The Chromium Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#include "base/process/process_info.h"
+
+#include <stdint.h>
+
+#include "base/logging.h"
+#include "base/process/internal_linux.h"
+#include "base/process/process_handle.h"
+#include "base/time/time.h"
+
+#include <sys/types.h>
+#include <sys/sysctl.h>
+#if defined(OS_FREEBSD) || defined(OS_DRAGONFLY)
+#include <sys/user.h>
+#endif
+
+namespace base {
+
+static Time
+GetBootTime(void)
+{
+  int mib[] = { CTL_KERN, KERN_BOOTTIME };
+  struct timespec ts;
+  size_t len = sizeof(struct timespec);
+  int error;
+
+  error = sysctl(mib, arraysize(mib), &ts, &len, NULL, 0);
+  if (error != 0)
+    return Time();
+
+  return Time::FromTimeSpec(ts);
+}
+
+/* TODO(ivadasz): Implement at least for OpenBSD as well. */
+#if defined(OS_FREEBSD) || defined(OS_DRAGONFLY)
+// static
+const Time CurrentProcessInfo::CreationTime() {
+  int mib[] = { CTL_KERN, KERN_PROC, KERN_PROC_PID, 0 };
+  struct kinfo_proc proc;
+  size_t len = sizeof(struct kinfo_proc);
+  struct timespec ts;
+  if (sysctl(mib, arraysize(mib), &proc, &len, NULL, 0) < 0)
+    return Time();
+  Time boot_time = GetBootTime();
+  if (boot_time.is_null())
+    return Time();
+#if defined(OS_DRAGONFLY)
+  TIMEVAL_TO_TIMESPEC(&proc.kp_start, &ts);
+#else
+  TIMEVAL_TO_TIMESPEC(&proc.ki_start, &ts);
+#endif
+  return Time(boot_time + TimeDelta::FromTimeSpec(ts));
+}
+#endif
+
+}  // namespace base
diff --git base/process/process_iterator.h base/process/process_iterator.h
index 0d1f1a62445e..ead303e71d47 100644
--- base/process/process_iterator.h
+++ base/process/process_iterator.h
@@ -24,7 +24,7 @@
 #include <tlhelp32.h>
 #elif defined(OS_MACOSX) || defined(OS_OPENBSD)
 #include <sys/sysctl.h>
-#elif defined(OS_FREEBSD)
+#elif defined(OS_FREEBSD) || defined(OS_DRAGONFLY)
 #include <sys/user.h>
 #elif defined(OS_POSIX)
 #include <dirent.h>
diff --git base/process/process_iterator_freebsd.cc base/process/process_iterator_freebsd.cc
index 4df0d90edec1..e7c916d8460e 100644
--- base/process/process_iterator_freebsd.cc
+++ base/process/process_iterator_freebsd.cc
@@ -40,7 +40,7 @@ ProcessIterator::ProcessIterator(const ProcessFilter* filter)
       num_of_kinfo_proc += 16;
       kinfo_procs_.resize(num_of_kinfo_proc);
       len = num_of_kinfo_proc * sizeof(struct kinfo_proc);
-      if (sysctl(mib, arraysize(mib), &kinfo_procs_[0], &len, NULL, 0) <0) {
+      if (sysctl(mib, arraysize(mib), kinfo_procs_.data(), &len, NULL, 0) < 0) {
         // If we get a mem error, it just means we need a bigger buffer, so
         // loop around again.  Anything else is a real error and give up.
         if (errno != ENOMEM) {
@@ -72,19 +72,20 @@ bool ProcessIterator::CheckForNextProcess() {
   for (; index_of_kinfo_proc_ < kinfo_procs_.size(); ++index_of_kinfo_proc_) {
     size_t length;
     struct kinfo_proc kinfo = kinfo_procs_[index_of_kinfo_proc_];
-    int mib[] = { CTL_KERN, KERN_PROC_ARGS, kinfo.ki_pid };
+#if defined(OS_DRAGONFLY)
+    int mib[] = { CTL_KERN, KERN_PROC, KERN_PROC_ARGS, kinfo.kp_pid };
 
-    if ((kinfo.ki_pid > 0) && (kinfo.ki_stat == SZOMB))
+    if ((kinfo.kp_pid > 0) && (kinfo.kp_stat == SZOMB))
       continue;
+#else
+    int mib[] = { CTL_KERN, KERN_PROC, KERN_PROC_ARGS, kinfo.ki_pid };
 
-    length = 0;
-    if (sysctl(mib, arraysize(mib), NULL, &length, NULL, 0) < 0) {
-      LOG(ERROR) << "failed to figure out the buffer size for a command line";
+    if ((kinfo.ki_pid > 0) && (kinfo.ki_stat == SZOMB))
       continue;
-    }
-
-    data.resize(length);
+#endif
 
+    data.resize(ARG_MAX);
+    length = ARG_MAX;
     if (sysctl(mib, arraysize(mib), &data[0], &length, NULL, 0) < 0) {
       LOG(ERROR) << "failed to fetch a commandline";
       continue;
@@ -101,9 +102,15 @@ bool ProcessIterator::CheckForNextProcess() {
       continue;
     }
 
+#if defined(OS_DRAGONFLY)
+    entry_.pid_ = kinfo.kp_pid;
+    entry_.ppid_ = kinfo.kp_ppid;
+    entry_.gid_ = kinfo.kp_pgid;
+#else
     entry_.pid_ = kinfo.ki_pid;
     entry_.ppid_ = kinfo.ki_ppid;
     entry_.gid_ = kinfo.ki_pgid;
+#endif
 
     size_t last_slash = data.rfind('/', exec_name_end);
     if (last_slash == std::string::npos) {
diff --git base/process/process_metrics.h base/process/process_metrics.h
index b1f52cadbe2a..7651e1b64533 100644
--- base/process/process_metrics.h
+++ base/process/process_metrics.h
@@ -280,6 +280,10 @@ class BASE_EXPORT ProcessMetrics {
 #endif  // defined(OS_POSIX)
 #endif  // !defined(OS_IOS)
 
+#if defined(OS_FREEBSD) || defined(OS_DRAGONFLY)
+  int fscale_;
+#endif
+
   DISALLOW_COPY_AND_ASSIGN(ProcessMetrics);
 };
 
@@ -304,7 +308,8 @@ BASE_EXPORT void SetFdLimit(unsigned int max_descriptors);
 #endif  // defined(OS_POSIX)
 
 #if defined(OS_WIN) || defined(OS_MACOSX) || defined(OS_LINUX) || \
-    defined(OS_ANDROID) || defined(OS_AIX) || defined(OS_FUCHSIA)
+    defined(OS_ANDROID) || defined(OS_AIX) || defined(OS_FUCHSIA) || \
+    defined(OS_BSD)
 // Data about system-wide memory consumption. Values are in KB. Available on
 // Windows, Mac, Linux, Android and Chrome OS.
 //
@@ -393,20 +398,27 @@ struct BASE_EXPORT SystemMemoryInfoKB {
 BASE_EXPORT bool GetSystemMemoryInfo(SystemMemoryInfoKB* meminfo);
 
 #endif  // defined(OS_WIN) || defined(OS_MACOSX) || defined(OS_LINUX) ||
-        // defined(OS_ANDROID)
+        // defined(OS_ANDROID) || defined(OS_BSD)
 
 #if defined(OS_LINUX) || defined(OS_ANDROID) || defined(OS_AIX)
 // Parse the data found in /proc/<pid>/stat and return the sum of the
 // CPU-related ticks.  Returns -1 on parse error.
 // Exposed for testing.
 BASE_EXPORT int ParseProcStatCPU(StringPiece input);
+#endif
 
+#if 0
+#if defined(OS_LINUX) || defined(OS_ANDROID) || defined(OS_AIX) ||
+    defined(OS_FREEBSD) || defined(OS_DRAGONFLY)
 // Get the number of threads of |process| as available in /proc/<pid>/stat.
 // This should be used with care as no synchronization with running threads is
 // done. This is mostly useful to guarantee being single-threaded.
 // Returns 0 on failure.
 BASE_EXPORT int GetNumberOfThreads(ProcessHandle process);
+#endif
+#endif
 
+#if defined(OS_LINUX) || defined(OS_ANDROID) || defined(OS_AIX)
 // /proc/self/exe refers to the current executable.
 BASE_EXPORT extern const char kProcSelfExe[];
 
diff --git base/process/process_metrics_freebsd.cc base/process/process_metrics_freebsd.cc
index 4f5adf790f68..9cf8332fd6cd 100644
--- base/process/process_metrics_freebsd.cc
+++ base/process/process_metrics_freebsd.cc
@@ -19,7 +19,19 @@ ProcessMetrics::ProcessMetrics(ProcessHandle process)
     : process_(process),
       processor_count_(SysInfo::NumberOfProcessors()),
       last_system_time_(0),
-      last_cpu_(0) {}
+      last_cpu_(0) {
+#if defined(OS_DRAGONFLY)
+  size_t len = sizeof(int);
+  int val;
+
+  if (sysctlbyname("kern.fscale", &val, &len, NULL, 0) == 0) {
+    fscale_ = val;
+    return;
+  }
+#else
+  fscale_ = FSCALE;
+#endif
+}
 
 // static
 std::unique_ptr<ProcessMetrics> ProcessMetrics::CreateProcessMetrics(
@@ -32,10 +44,14 @@ size_t ProcessMetrics::GetPagefileUsage() const {
   int mib[] = { CTL_KERN, KERN_PROC, KERN_PROC_PID, process_ };
   size_t length = sizeof(info);
 
-  if (sysctl(mib, arraysize(mib), &info, &length, NULL, 0) < 0)
+  if (sysctl(mib, arraysize(mib), &info, &length, NULL, 0) < 0 || length == 0)
     return 0;
 
+#if defined(OS_DRAGONFLY)
+  return info.kp_vm_map_size;
+#else
   return info.ki_size;
+#endif
 }
 
 size_t ProcessMetrics::GetPeakPagefileUsage() const {
@@ -47,10 +63,14 @@ size_t ProcessMetrics::GetWorkingSetSize() const {
   int mib[] = { CTL_KERN, KERN_PROC, KERN_PROC_PID, process_ };
   size_t length = sizeof(info);
 
-  if (sysctl(mib, arraysize(mib), &info, &length, NULL, 0) < 0)
+  if (sysctl(mib, arraysize(mib), &info, &length, NULL, 0) < 0 || length == 0)
     return 0;
 
+#if defined(OS_DRAGONFLY)
+  return info.kp_vm_rssize * getpagesize();
+#else
   return info.ki_rssize * getpagesize();
+#endif
 }
 
 size_t ProcessMetrics::GetPeakWorkingSetSize() const {
@@ -85,14 +105,51 @@ bool ProcessMetrics::GetWorkingSetKBytes(WorkingSetKBytes* ws_usage) const {
 }
 
 double ProcessMetrics::GetCPUUsage() {
+#if defined(__DragonFly__)
+  std::vector<kinfo_proc> kinfo_procs;
+  int mib[] = {
+    CTL_KERN, KERN_PROC, KERN_PROC_PID + KERN_PROC_FLAG_LWP, process_
+  };
+  size_t length = 0;
+  int sum, st;
+  unsigned int i;
+#else
   struct kinfo_proc info;
   int mib[] = { CTL_KERN, KERN_PROC, KERN_PROC_PID, process_ };
   size_t length = sizeof(info);
+#endif
+
+  if (fscale_ == 0)
+    return 0;
+
+#if defined(__DragonFly__)
+  if (sysctl(mib, arraysize(mib), NULL, &length, NULL, 0) < 0 || length == 0)
+    return 0;
 
-  if (sysctl(mib, arraysize(mib), &info, &length, NULL, 0) < 0)
+  kinfo_procs.resize(length / sizeof(struct kinfo_proc) + 1);
+  do {
+    length = kinfo_procs.size() * sizeof(struct kinfo_proc);
+    st = sysctl(mib, arraysize(mib), kinfo_procs.data(), &length, NULL, 0);
+    if (st < 0) {
+      if (errno == ENOMEM) {
+        kinfo_procs.resize(length / sizeof(struct kinfo_proc) + 4);
+      } else {
+        return 0;
+      }
+    }
+  } while (st != 0);
+
+  kinfo_procs.resize(length / sizeof(struct kinfo_proc));
+  sum = 0;
+  for (i = 0; i < kinfo_procs.size(); i++)
+    sum += kinfo_procs[i].kp_lwp.kl_pctcpu;
+  return ((double)sum / fscale_) * 100.0;
+#else
+  if (sysctl(mib, arraysize(mib), &info, &length, NULL, 0) < 0 || length == 0)
     return 0;
 
-  return (info.ki_pctcpu / FSCALE) * 100.0;
+  return ((double)info.ki_pctcpu / fscale_) * 100.0;
+#endif
 }
 
 bool ProcessMetrics::GetIOCounters(IoCounters* io_counters) const {
@@ -100,26 +157,65 @@ bool ProcessMetrics::GetIOCounters(IoCounters* io_counters) const {
 }
 
 size_t GetSystemCommitCharge() {
-  int mib[2], pagesize;
+  int pagesize;
+#if defined(OS_DRAGONFLY)
+  unsigned int mem_total, mem_free, mem_inactive;
+#else
   unsigned long mem_total, mem_free, mem_inactive;
+#endif
   size_t length = sizeof(mem_total);
 
-  if (sysctl(mib, arraysize(mib), &mem_total, &length, NULL, 0) < 0)
+  if (sysctlbyname("vm.stats.vm.v_page_count", &mem_total, &length, NULL, 0) != 0)
     return 0;
 
   length = sizeof(mem_free);
-  if (sysctlbyname("vm.stats.vm.v_free_count", &mem_free, &length, NULL, 0) < 0)
+  if (sysctlbyname("vm.stats.vm.v_free_count", &mem_free, &length, NULL, 0) != 0)
     return 0;
 
   length = sizeof(mem_inactive);
   if (sysctlbyname("vm.stats.vm.v_inactive_count", &mem_inactive, &length,
-      NULL, 0) < 0) {
+      NULL, 0) != 0) {
     return 0;
   }
 
   pagesize = getpagesize();
 
-  return mem_total - (mem_free*pagesize) - (mem_inactive*pagesize);
+  return (mem_total - mem_free - mem_inactive) * pagesize;
+}
+
+bool GetSystemMemoryInfo(SystemMemoryInfoKB *meminfo) {
+  unsigned int mem_total, mem_free, swap_total, swap_used;
+  size_t length;
+  int pagesizeKB;
+
+  pagesizeKB = getpagesize() / 1024;
+
+  length = sizeof(mem_total);
+  if (sysctlbyname("vm.stats.vm.v_page_count", &mem_total,
+      &length, NULL, 0) != 0 || length != sizeof(mem_total))
+    return false;
+
+  length = sizeof(mem_free);
+  if (sysctlbyname("vm.stats.vm.v_free_count", &mem_free, &length, NULL, 0)
+      != 0 || length != sizeof(mem_free))
+    return false;
+
+  length = sizeof(swap_total);
+  if (sysctlbyname("vm.swap_size", &swap_total, &length, NULL, 0)
+      != 0 || length != sizeof(swap_total))
+    return false;
+
+  length = sizeof(swap_used);
+  if (sysctlbyname("vm.swap_anon_use", &swap_used, &length, NULL, 0)
+      != 0 || length != sizeof(swap_used))
+    return false;
+
+  meminfo->total = mem_total * pagesizeKB;
+  meminfo->free = mem_free * pagesizeKB;
+  meminfo->swap_total = swap_total * pagesizeKB;
+  meminfo->swap_free = (swap_total - swap_used) * pagesizeKB;
+
+  return true;
 }
 
 }  // namespace base
diff --git base/process/process_metrics_posix.cc base/process/process_metrics_posix.cc
index a4445e8bc2e8..7858045286b6 100644
--- base/process/process_metrics_posix.cc
+++ base/process/process_metrics_posix.cc
@@ -31,7 +31,8 @@ static const rlim_t kSystemDefaultMaxFds = 8192;
 static const rlim_t kSystemDefaultMaxFds = 256;
 #elif defined(OS_SOLARIS)
 static const rlim_t kSystemDefaultMaxFds = 8192;
-#elif defined(OS_FREEBSD)
+#elif defined(OS_FREEBSD) || defined(OS_DRAGONFLY)
+/* Not sure if this is true on DragonFly. */
 static const rlim_t kSystemDefaultMaxFds = 8192;
 #elif defined(OS_FUCHSIA)
 static const rlim_t kSystemDefaultMaxFds = 8192;
diff --git base/process/process_posix.cc base/process/process_posix.cc
index 282923bd002e..3896eac4b07f 100644
--- base/process/process_posix.cc
+++ base/process/process_posix.cc
@@ -22,6 +22,13 @@
 #include <sys/event.h>
 #endif
 
+#if defined(OS_BSD)
+#include <signal.h>
+#include <sys/types.h>
+#include <sys/event.h>
+#include <sys/time.h>
+#endif
+
 namespace {
 
 #if !defined(OS_NACL_NONSFI)
@@ -63,9 +70,12 @@ bool WaitpidWithTimeout(base::ProcessHandle handle,
   int64_t double_sleep_time = 0;
 
   // If the process hasn't exited yet, then sleep and try again.
-  base::TimeTicks wakeup_time = base::TimeTicks::Now() + wait;
+  base::TimeTicks now, wakeup_time;
+  if (ret_pid == 0) {
+    now = base::TimeTicks::Now();
+    wakeup_time = now + wait;
+  }
   while (ret_pid == 0) {
-    base::TimeTicks now = base::TimeTicks::Now();
     if (now > wakeup_time)
       break;
     // Guaranteed to be non-negative!
@@ -83,12 +93,14 @@ bool WaitpidWithTimeout(base::ProcessHandle handle,
         (double_sleep_time++ % 4 == 0)) {
       max_sleep_time_usecs *= 2;
     }
+    if (ret_pid == 0)
+      now = base::TimeTicks::Now();
   }
 
   return ret_pid > 0;
 }
 
-#if defined(OS_MACOSX)
+#if defined(OS_MACOSX) || defined(OS_BSD)
 // Using kqueue on Mac so that we can wait on non-child processes.
 // We can't use kqueues on child processes because we need to reap
 // our own children using wait.
@@ -177,7 +189,7 @@ static bool WaitForSingleNonChildProcess(base::ProcessHandle handle,
 
   return true;
 }
-#endif  // OS_MACOSX
+#endif  // OS_MACOSX || OS_BSD
 
 bool WaitForExitWithTimeoutImpl(base::ProcessHandle handle,
                                 int* exit_code,
@@ -186,13 +198,16 @@ bool WaitForExitWithTimeoutImpl(base::ProcessHandle handle,
   base::ProcessHandle our_pid = base::GetCurrentProcessHandle();
 
   if (parent_pid != our_pid) {
-#if defined(OS_MACOSX)
+#if defined(OS_MACOSX) || defined(OS_BSD)
     // On Mac we can wait on non child processes.
-    return WaitForSingleNonChildProcess(handle, timeout);
+    if (parent_pid != -1) {
+      *exit_code = 0;
+      return WaitForSingleNonChildProcess(handle, timeout);
+    }
 #else
     // Currently on Linux we can't handle non child processes.
     NOTIMPLEMENTED();
-#endif  // OS_MACOSX
+#endif  // OS_MACOSX || OS_BSD
   }
 
   int status;
diff --git base/sync_socket_posix.cc base/sync_socket_posix.cc
index a67592837d56..c69acb15bef6 100644
--- base/sync_socket_posix.cc
+++ base/sync_socket_posix.cc
@@ -151,6 +151,7 @@ size_t SyncSocket::ReceiveWithTimeout(void* buffer,
   // Track the start time so we can reduce the timeout as data is read.
   TimeTicks start_time = TimeTicks::Now();
   const TimeTicks finish_time = start_time + timeout;
+  TimeDelta this_timeout = timeout;
 
   struct pollfd pollfd;
   pollfd.fd = handle_;
@@ -159,15 +160,17 @@ size_t SyncSocket::ReceiveWithTimeout(void* buffer,
 
   size_t bytes_read_total = 0;
   while (bytes_read_total < length) {
-    const TimeDelta this_timeout = finish_time - TimeTicks::Now();
     const int timeout_ms =
         static_cast<int>(this_timeout.InMillisecondsRoundedUp());
     if (timeout_ms <= 0)
       break;
     const int poll_result = poll(&pollfd, 1, timeout_ms);
     // Handle EINTR manually since we need to update the timeout value.
-    if (poll_result == -1 && errno == EINTR)
+    if (poll_result == -1 && errno == EINTR) {
+      if (bytes_read_total < length)
+        this_timeout = finish_time - base::TimeTicks::Now();
       continue;
+    }
     // Return if other type of error or a timeout.
     if (poll_result <= 0)
       return bytes_read_total;
@@ -190,6 +193,9 @@ size_t SyncSocket::ReceiveWithTimeout(void* buffer,
     bytes_read_total += bytes_received;
     if (bytes_received != bytes_to_read)
       return bytes_read_total;
+
+    if (bytes_read_total < length)
+      this_timeout = finish_time - base::TimeTicks::Now();
   }
 
   return bytes_read_total;
diff --git base/sys_info_freebsd.cc base/sys_info_freebsd.cc
index 0b2008d55266..1097774bf78f 100644
--- base/sys_info_freebsd.cc
+++ base/sys_info_freebsd.cc
@@ -12,12 +12,34 @@
 
 namespace base {
 
+int64_t SysInfo::AmountOfAvailablePhysicalMemory() {
+  int page_size, r = 0;
+  unsigned pgfree, pginact, pgcache;
+  size_t size = sizeof(page_size);
+  size_t szpg = sizeof(pgfree);
+  if(r == 0)
+    r = sysctlbyname("vm.stats.vm.v_page_size", &page_size, &size, NULL, 0);
+  if(r == 0)
+    r = sysctlbyname("vm.stats.vm.v_free_count", &pgfree, &szpg, NULL, 0);
+  if(r == 0)
+    r = sysctlbyname("vm.stats.vm.v_inactive_count", &pginact, &szpg, NULL, 0);
+  if(r == 0)
+    r = sysctlbyname("vm.stats.vm.v_cache_count", &pgcache, &szpg, NULL, 0);
+  if (r == -1) {
+    NOTREACHED();
+    return 0;
+  }
+  return static_cast<int64_t>((pgfree + pginact + pgcache) * page_size);
+}
+
 int64_t SysInfo::AmountOfPhysicalMemory() {
-  int pages, page_size;
+  int pages, page_size, r = 0;
   size_t size = sizeof(pages);
-  sysctlbyname("vm.stats.vm.v_page_count", &pages, &size, NULL, 0);
-  sysctlbyname("vm.stats.vm.v_page_size", &page_size, &size, NULL, 0);
-  if (pages == -1 || page_size == -1) {
+  if (r == 0)
+    r = sysctlbyname("vm.stats.vm.v_page_count", &pages, &size, NULL, 0);
+  if (r == 0)
+    r = sysctlbyname("vm.stats.vm.v_page_size", &page_size, &size, NULL, 0);
+  if (r == -1) {
     NOTREACHED();
     return 0;
   }
@@ -25,14 +47,13 @@ int64_t SysInfo::AmountOfPhysicalMemory() {
 }
 
 // static
-uint64_t SysInfo::MaxSharedMemorySize() {
-  size_t limit;
-  size_t size = sizeof(limit);
-  if (sysctlbyname("kern.ipc.shmmax", &limit, &size, NULL, 0) < 0) {
-    NOTREACHED();
-    return 0;
-  }
-  return static_cast<uint64_t>(limit);
+std::string SysInfo::CPUModelName() {
+  int mib[] = { CTL_HW, HW_MODEL };
+  char name[256];
+  size_t size = arraysize(name);
+  if (sysctl(mib, arraysize(mib), &name, &size, NULL, 0) == 0)
+    return name;
+  return std::string();
 }
 
 }  // namespace base
diff --git base/test/BUILD.gn base/test/BUILD.gn
index 5fd684a003f8..fb8391c7046e 100644
--- base/test/BUILD.gn
+++ base/test/BUILD.gn
@@ -185,6 +185,12 @@ static_library("test_support") {
     ]
   }
 
+  if (is_bsd) {
+    sources -= [
+      "test_file_util_linux.cc",
+    ]
+  }
+
   if (is_ios) {
     set_sources_assignment_filter([])
     sources += [ "test_file_util_mac.cc" ]
@@ -314,7 +320,7 @@ static_library("run_all_base_unittests") {
   ]
 }
 
-if (is_linux) {
+if (is_linux || is_bsd) {
   shared_library("malloc_wrapper") {
     testonly = true
     sources = [
diff --git base/test/launcher/test_launcher.cc base/test/launcher/test_launcher.cc
index 90a5c6cc6cd8..57d67fdfa5ae 100644
--- base/test/launcher/test_launcher.cc
+++ base/test/launcher/test_launcher.cc
@@ -61,6 +61,11 @@
 #include "base/win/windows_version.h"
 #endif
 
+#if defined(OS_BSD)
+#include <sys/types.h>
+#include <signal.h>
+#endif
+
 namespace base {
 
 // See https://groups.google.com/a/chromium.org/d/msg/chromium-dev/nkdTP7sstSc/uT3FaE_sgkAJ .
diff --git base/test/test_file_util_posix.cc base/test/test_file_util_posix.cc
index b81728318ce6..6c72d1996227 100644
--- base/test/test_file_util_posix.cc
+++ base/test/test_file_util_posix.cc
@@ -79,7 +79,7 @@ bool DieFileDie(const FilePath& file, bool recurse) {
   return DeleteFile(file, recurse);
 }
 
-#if !defined(OS_LINUX) && !defined(OS_MACOSX)
+#if !defined(OS_LINUX) && !defined(OS_MACOSX) && !defined(OS_BSD)
 bool EvictFileFromSystemCache(const FilePath& file) {
   // There doesn't seem to be a POSIX way to cool the disk cache.
   NOTIMPLEMENTED();
diff --git base/third_party/libevent/BUILD.gn base/third_party/libevent/BUILD.gn
index e934454a10f9..6739721527b0 100644
--- base/third_party/libevent/BUILD.gn
+++ base/third_party/libevent/BUILD.gn
@@ -57,6 +57,13 @@ static_library("libevent") {
       "epoll.c",
     ]
     include_dirs = [ "android" ]
+  } else if (current_os == "freebsd" || current_os == "dragonfly") {
+    sources += [
+      "kqueue.c",
+      "freebsd/config.h",
+      "freebsd/event-config.h",
+    ]
+    include_dirs = [ "freebsd" ]
   } else if (is_nacl_nonsfi) {
     sources -= [
       "evdns.c",
diff --git base/third_party/libevent/event-config.h base/third_party/libevent/event-config.h
index bbd23f1d81b0..d7f304897934 100644
--- base/third_party/libevent/event-config.h
+++ base/third_party/libevent/event-config.h
@@ -15,6 +15,8 @@
 #include "base/third_party/libevent/linux/event-config.h"
 #elif defined(__FreeBSD__)
 #include "base/third_party/libevent/freebsd/event-config.h"
+#elif defined(__DragonFly__)
+#include "base/third_party/libevent/freebsd/event-config.h"
 #elif defined(__sun)
 #include "base/third_party/libevent/solaris/event-config.h"
 #elif defined(_AIX)
diff --git base/third_party/libevent/event-internal.h base/third_party/libevent/event-internal.h
index b7f00402be53..64e07ba2f0d6 100644
--- base/third_party/libevent/event-internal.h
+++ base/third_party/libevent/event-internal.h
@@ -68,6 +68,8 @@ struct event_base {
 	struct min_heap timeheap;
 
 	struct timeval tv_cache;
+
+	int is_precise;
 };
 
 /* Internal use only: Functions that might be missing from <sys/queue.h> */
diff --git base/third_party/libevent/event.c base/third_party/libevent/event.c
index 4aa326e0e46d..aa1ffdb13185 100644
--- base/third_party/libevent/event.c
+++ base/third_party/libevent/event.c
@@ -144,6 +144,16 @@ gettime(struct event_base *base, struct timeval *tp)
 	return (evutil_gettimeofday(tp, NULL));
 }
 
+/* Update cache to save syscalls in gettime. */
+void
+event_base_cachetv(struct event_base *base, struct timeval *tp)
+{
+	if (tp == NULL)
+		base->tv_cache.tv_sec = 0;
+	else
+		base->tv_cache = *tp;
+}
+
 struct event_base *
 event_init(void)
 {
@@ -164,7 +174,10 @@ event_base_new(void)
 	if ((base = calloc(1, sizeof(struct event_base))) == NULL)
 		event_err(1, "%s: calloc", __func__);
 
-	gettime(base, &base->event_tv);
+	if (!use_monotonic)
+		gettime(base, &base->event_tv);
+
+	base->is_precise = 0;
 	
 	min_heap_ctor(&base->timeheap);
 	TAILQ_INIT(&base->eventqueue);
@@ -467,7 +480,8 @@ event_base_loop(struct event_base *base, int flags)
 	int res, done;
 
 	/* clear time cache */
-	base->tv_cache.tv_sec = 0;
+	if (!(flags & EVLOOP_KEEPTIME))
+		base->tv_cache.tv_sec = 0;
 
 	if (base->sig.ev_signal_added)
 		evsignal_base = base;
@@ -504,16 +518,20 @@ event_base_loop(struct event_base *base, int flags)
 		}
 
 		/* update last old time */
-		gettime(base, &base->event_tv);
+		if (!use_monotonic)
+			gettime(base, &base->event_tv);
 
 		/* clear time cache */
 		base->tv_cache.tv_sec = 0;
 
+		if (flags & EVLOOP_PRECISE)
+			base->is_precise = 1;
 		res = evsel->dispatch(base, evbase, tv_p);
+		if (flags & EVLOOP_PRECISE)
+			base->is_precise = 0;
 
 		if (res == -1)
 			return (-1);
-		gettime(base, &base->tv_cache);
 
 		timeout_process(base);
 
@@ -834,6 +852,8 @@ timeout_next(struct event_base *base, struct timeval **tv_p)
 		return (0);
 	}
 
+	if (base->tv_cache.tv_sec == 0)
+		gettime(base, &base->tv_cache);
 	if (gettime(base, &now) == -1)
 		return (-1);
 
@@ -901,6 +921,8 @@ timeout_process(struct event_base *base)
 	if (min_heap_empty(&base->timeheap))
 		return;
 
+	if (base->tv_cache.tv_sec == 0)
+		gettime(base, &base->tv_cache);
 	gettime(base, &now);
 
 	while ((ev = min_heap_top(&base->timeheap))) {
diff --git base/third_party/libevent/event.h base/third_party/libevent/event.h
index f0887b961635..2c8d68f82352 100644
--- base/third_party/libevent/event.h
+++ base/third_party/libevent/event.h
@@ -262,6 +262,11 @@ TAILQ_HEAD (evkeyvalq, evkeyval);
 #endif /* _EVENT_DEFINED_TQENTRY */
 
 /**
+  Inject cached time value.
+ */
+void event_base_cachetv(struct event_base *base, struct timeval *tp);
+
+/**
   Initialize the event API.
 
   Use event_base_new() to initialize a new event base, but does not set
@@ -364,6 +369,8 @@ int event_base_set(struct event_base *, struct event *);
 /*@{*/
 #define EVLOOP_ONCE	0x01	/**< Block at most once. */
 #define EVLOOP_NONBLOCK	0x02	/**< Do not block. */
+#define EVLOOP_KEEPTIME	0x04	/**< Use cached timeval value. */
+#define EVLOOP_PRECISE	0x08	/**< Try to implement more precise timeouts. */
 /*@}*/
 
 /**
diff --git base/third_party/libevent/kqueue.c base/third_party/libevent/kqueue.c
index 3c2ffd5524cc..c1babc5e8265 100644
--- base/third_party/libevent/kqueue.c
+++ base/third_party/libevent/kqueue.c
@@ -40,6 +40,7 @@
 #endif
 #include <sys/queue.h>
 #include <sys/event.h>
+#include <poll.h>
 #include <signal.h>
 #include <stdio.h>
 #include <stdlib.h>
@@ -54,7 +55,7 @@
 /* Some platforms apparently define the udata field of struct kevent as
  * intptr_t, whereas others define it as void*.  There doesn't seem to be an
  * easy way to tell them apart via autoconf, so we need to use OS macros. */
-#if defined(HAVE_INTTYPES_H) && !defined(__OpenBSD__) && !defined(__FreeBSD__) && !defined(__darwin__) && !defined(__APPLE__)
+#if defined(HAVE_INTTYPES_H) && !defined(__OpenBSD__) && !defined(__FreeBSD__) && !defined(__DragonFly__) && !defined(__darwin__) && !defined(__APPLE__)
 #define PTR_TO_UDATA(x)	((intptr_t)(x))
 #else
 #define PTR_TO_UDATA(x)	(x)
@@ -209,9 +210,23 @@ kq_dispatch(struct event_base *base, void *arg, struct timeval *tv)
 		ts_p = &ts;
 	}
 
-	res = kevent(kqop->kq, changes, kqop->nchanges,
-	    events, kqop->nevents, ts_p);
-	kqop->nchanges = 0;
+	if (base->is_precise && ts_p != NULL) {
+		struct timespec ts = {0, 0};
+		struct pollfd fds = {kqop->kq, POLLIN, 0};
+		res = kevent(kqop->kq, changes, kqop->nchanges, NULL, 0, &ts);
+		kqop->nchanges = 0;
+		if (res == 0) {
+			res = ppoll(&fds, 1, ts_p, NULL);
+			if (res >= 0) {
+				res = kevent(kqop->kq, NULL, 0,
+				    events, kqop->nevents, &ts);
+			}
+		}
+	} else {
+		res = kevent(kqop->kq, changes, kqop->nchanges,
+		    events, kqop->nevents, ts_p);
+		kqop->nchanges = 0;
+	}
 	if (res == -1) {
 		if (errno != EINTR) {
                         event_warn("kevent");
diff --git base/third_party/symbolize/symbolize.cc base/third_party/symbolize/symbolize.cc
index b41a17b8b61d..0d014023537b 100644
--- base/third_party/symbolize/symbolize.cc
+++ base/third_party/symbolize/symbolize.cc
@@ -535,9 +535,15 @@ OpenObjectFileContainingPcAndGetStartAddress(uint64_t pc,
                                              int out_file_name_size) {
   int object_fd;
 
+#if defined(OS_FREEBSD) || defined(OS_DRAGONFLY)
+  // Open /proc/curproc/map.
+  int maps_fd;
+  NO_INTR(maps_fd = open("/proc/curproc/map", O_RDONLY));
+#else
   // Open /proc/self/maps.
   int maps_fd;
   NO_INTR(maps_fd = open("/proc/self/maps", O_RDONLY));
+#endif
   FileDescriptor wrapped_maps_fd(maps_fd);
   if (wrapped_maps_fd.get() < 0) {
     return -1;
@@ -564,11 +570,25 @@ OpenObjectFileContainingPcAndGetStartAddress(uint64_t pc,
     // (r-xp) and file name (/bin/cat).
 
     // Read start address.
+#if defined(OS_FREEBSD) || defined(OS_DRAGONFLY)
+    cursor += 2;  // Skip "0x".
+#endif
     cursor = GetHex(cursor, eol, &start_address);
+#if defined(OS_FREEBSD) || defined(OS_DRAGONFLY)
+    if (cursor == eol || *cursor != ' ') {
+      return -1;  // Malformed line.
+    }
+    ++cursor;  // Skip ' '.
+#else
     if (cursor == eol || *cursor != '-') {
       return -1;  // Malformed line.
     }
     ++cursor;  // Skip '-'.
+#endif
+
+#if defined(OS_FREEBSD) || defined(OS_DRAGONFLY)
+    cursor += 2;  // Skip "0x".
+#endif
 
     // Read end address.
     uint64_t end_address;
@@ -583,15 +603,29 @@ OpenObjectFileContainingPcAndGetStartAddress(uint64_t pc,
       continue;  // We skip this map.  PC isn't in this map.
     }
 
+#if defined(OS_FREEBSD) || defined(OS_DRAGONFLY)
+    // Skip until we reach flags.  Skip until we encounter an 'r', '-' or eol.
+    while (cursor < eol && *cursor != '-' && *cursor != 'r') {
+      ++cursor;
+    }
+#endif
+
     // Read flags.  Skip flags until we encounter a space or eol.
     const char * const flags_start = cursor;
     while (cursor < eol && *cursor != ' ') {
       ++cursor;
     }
+#if defined(OS_FREEBSD) || defined(OS_DRAGONFLY)
+    // We expect at least three letters for flags (ex. "r-x").
+    if (cursor == eol || cursor < flags_start + 3) {
+      return -1;  // Malformed line.
+    }
+#else
     // We expect at least four letters for flags (ex. "r-xp").
     if (cursor == eol || cursor < flags_start + 4) {
       return -1;  // Malformed line.
     }
+#endif
 
     // Check flags.  We are only interested in "r-x" maps.
     if (memcmp(flags_start, "r-x", 3) != 0) {  // Not a "r-x" map.
@@ -599,6 +633,14 @@ OpenObjectFileContainingPcAndGetStartAddress(uint64_t pc,
     }
     ++cursor;  // Skip ' '.
 
+#if defined(OS_FREEBSD) || defined(OS_DRAGONFLY)
+    // Only for the first mapping, we can rely on the file offset to be 0.
+    // Since /proc/curproc/map doesn't give us file offsets, we have to abort
+    // if num_maps != 1.
+    if (num_maps != 1)
+      return -1;
+    base_address = 0;
+#else
     // Read file offset.
     uint64_t file_offset;
     cursor = GetHex(cursor, eol, &file_offset);
@@ -619,7 +661,16 @@ OpenObjectFileContainingPcAndGetStartAddress(uint64_t pc,
     //   shadow memory of the tool), so the module can't be the
     //   first entry.
     base_address = ((num_maps == 1) ? 0U : start_address) - file_offset;
+#endif
 
+#if defined(OS_FREEBSD) || defined(OS_DRAGONFLY)
+    /* Skip until file name. */
+    while (cursor < eol) {
+      if (*cursor == '/')
+        break;
+      cursor++;
+    }
+#else
     // Skip to file name.  "cursor" now points to dev.  We need to
     // skip at least two spaces for dev and inode.
     int num_spaces = 0;
@@ -636,6 +687,7 @@ OpenObjectFileContainingPcAndGetStartAddress(uint64_t pc,
     if (cursor == eol) {
       return -1;  // Malformed line.
     }
+#endif
 
     // Finally, "cursor" now points to file name of our interest.
     NO_INTR(object_fd = open(cursor, O_RDONLY));
diff --git base/threading/platform_thread.h base/threading/platform_thread.h
index 8c0d8e4432a5..c6d5a1622884 100644
--- base/threading/platform_thread.h
+++ base/threading/platform_thread.h
@@ -32,6 +32,8 @@ namespace base {
 typedef DWORD PlatformThreadId;
 #elif defined(OS_MACOSX)
 typedef mach_port_t PlatformThreadId;
+#elif defined(OS_DRAGONFLY)
+typedef lwpid_t PlatformThreadId;
 #elif defined(OS_POSIX)
 typedef pid_t PlatformThreadId;
 #endif
@@ -211,7 +213,7 @@ class BASE_EXPORT PlatformThread {
 
   static ThreadPriority GetCurrentThreadPriority();
 
-#if defined(OS_LINUX)
+#if defined(OS_LINUX) || defined(OS_DRAGONFLY)
   // Toggles a specific thread's priority at runtime. This can be used to
   // change the priority of a thread in a different process and will fail
   // if the calling process does not have proper permissions. The
diff --git base/threading/platform_thread_dragonfly.cc base/threading/platform_thread_dragonfly.cc
new file mode 100644
index 000000000000..305dcfa7e8a9
--- /dev/null
+++ base/threading/platform_thread_dragonfly.cc
@@ -0,0 +1,112 @@
+// Copyright (c) 2012 The Chromium Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#include "base/threading/platform_thread.h"
+
+#include <errno.h>
+#include <sched.h>
+#include <stddef.h>
+
+#include "base/files/file_util.h"
+#include "base/lazy_instance.h"
+#include "base/logging.h"
+#include "base/strings/string_number_conversions.h"
+#include "base/threading/platform_thread_internal_posix.h"
+#include "base/threading/thread_id_name_manager.h"
+#include "base/tracked_objects.h"
+#include "build/build_config.h"
+
+#include <pthread.h>
+#include <pthread_np.h>
+#include <sys/types.h>
+#include <sys/param.h>
+#include <sys/rtprio.h>
+#include <unistd.h>
+
+namespace base {
+
+namespace internal {
+
+struct ThreadPriorityToRtprio {
+  ThreadPriority priority;
+  struct rtprio rt;
+};
+
+// The only per-thread prioritization which seems to work properly for normal
+// users is, to set the RTP_PRIO_IDLE scheduling type in the lwp_rtprio(2)
+// syscall.
+
+/* I didn't find any difference between prio values for RTP_PRIO_NORMAL. */
+const struct ThreadPriorityToRtprio kThreadPriorityToRtprioMap[4] = {
+    {ThreadPriority::BACKGROUND, {RTP_PRIO_IDLE,0}},
+    {ThreadPriority::NORMAL, {RTP_PRIO_NORMAL,0}},
+    {ThreadPriority::DISPLAY, {RTP_PRIO_NORMAL,10}},
+    {ThreadPriority::REALTIME_AUDIO, {RTP_PRIO_NORMAL,RTP_PRIO_MAX}},
+};
+
+static
+bool SetGivenThreadPriority(PlatformThreadId thread_id,
+                            ThreadPriority priority) {
+  struct rtprio prio;
+  unsigned int i;
+  for (i = 0; i < nitems(kThreadPriorityToRtprioMap); i++) {
+    if (priority == kThreadPriorityToRtprioMap[i].priority) {
+      prio = kThreadPriorityToRtprioMap[i].rt;
+      return lwp_rtprio(RTP_SET, 0, thread_id, &prio) == 0;
+    }
+  }
+  return false;
+}
+
+bool SetCurrentThreadPriorityForPlatform(ThreadPriority priority) {
+  return SetGivenThreadPriority(PlatformThread::CurrentId(), priority);
+}
+
+bool GetCurrentThreadPriorityForPlatform(ThreadPriority* priority) {
+  struct rtprio prio;
+  if (lwp_rtprio(RTP_LOOKUP, 0, PlatformThread::CurrentId(), &prio) == 0) {
+    if (prio.type == RTP_PRIO_IDLE)
+      *priority = ThreadPriority::BACKGROUND;
+    else if (prio.prio == 0)
+      *priority = ThreadPriority::NORMAL;
+    else if (prio.prio == 10)
+      *priority = ThreadPriority::DISPLAY;
+    else if (prio.prio == RTP_PRIO_MAX)
+      *priority = ThreadPriority::REALTIME_AUDIO;
+    return true;
+  }
+  return false;
+}
+
+}  // namespace internal
+
+// static
+void PlatformThread::SetName(const std::string& name) {
+  ThreadIdNameManager::GetInstance()->SetName(CurrentId(), name);
+  tracked_objects::ThreadData::InitializeThreadContext(name);
+
+  pthread_set_name_np(pthread_self(), name.c_str());
+}
+
+// static
+void PlatformThread::SetThreadPriority(PlatformThreadId thread_id,
+                                       ThreadPriority priority) {
+  internal::SetGivenThreadPriority(thread_id, priority);
+}
+
+void InitThreading() {}
+
+void TerminateOnThread() {}
+
+size_t GetDefaultThreadStackSize(const pthread_attr_t& attributes) {
+#if !defined(THREAD_SANITIZER)
+  return 0;
+#else
+  // ThreadSanitizer bloats the stack heavily. Evidence has been that the
+  // default stack size isn't enough for some browser tests.
+  return 2 * (1 << 23);  // 2 times 8192K (the default stack size on Linux).
+#endif
+}
+
+}  // namespace base
diff --git base/threading/platform_thread_internal_posix.cc base/threading/platform_thread_internal_posix.cc
index 378a24d0d1d8..9e21922c3a5e 100644
--- base/threading/platform_thread_internal_posix.cc
+++ base/threading/platform_thread_internal_posix.cc
@@ -11,6 +11,7 @@ namespace base {
 
 namespace internal {
 
+#if !defined(OS_DRAGONFLY)
 int ThreadPriorityToNiceValue(ThreadPriority priority) {
   for (const auto& pair : kThreadPriorityToNiceValueMap) {
     if (pair.priority == priority)
@@ -33,6 +34,7 @@ ThreadPriority NiceValueToThreadPriority(int nice_value) {
   // priorities. The lowest priority is suitable in this case.
   return ThreadPriority::BACKGROUND;
 }
+#endif
 
 }  // namespace internal
 
diff --git base/threading/platform_thread_internal_posix.h base/threading/platform_thread_internal_posix.h
index 5f4a215968b6..afde905e1b98 100644
--- base/threading/platform_thread_internal_posix.h
+++ base/threading/platform_thread_internal_posix.h
@@ -7,11 +7,15 @@
 
 #include "base/base_export.h"
 #include "base/threading/platform_thread.h"
+#if defined(OS_DRAGONFLY)
+#include <sys/rtprio.h>
+#endif
 
 namespace base {
 
 namespace internal {
 
+#if !defined(OS_DRAGONFLY)
 struct ThreadPriorityToNiceValuePair {
   ThreadPriority priority;
   int nice_value;
@@ -29,6 +33,7 @@ int ThreadPriorityToNiceValue(ThreadPriority priority);
 // Returns the ThreadPrioirty matching |nice_value| based on the platform-
 // specific implementation of kThreadPriorityToNiceValueMap.
 BASE_EXPORT ThreadPriority NiceValueToThreadPriority(int nice_value);
+#endif
 
 // Allows platform specific tweaks to the generic POSIX solution for
 // SetCurrentThreadPriority. Returns true if the platform-specific
diff --git base/threading/platform_thread_posix.cc base/threading/platform_thread_posix.cc
index e049a549d23c..36ad7eba313f 100644
--- base/threading/platform_thread_posix.cc
+++ base/threading/platform_thread_posix.cc
@@ -14,6 +14,10 @@
 #include <sys/types.h>
 #include <unistd.h>
 
+#if defined(OS_DRAGONFLY)
+#include <pthread_np.h>
+#endif
+
 #include <memory>
 
 #include "base/debug/activity_tracker.h"
@@ -56,7 +60,7 @@ void* ThreadFunc(void* params) {
     if (!thread_params->joinable)
       base::ThreadRestrictions::SetSingletonAllowed(false);
 
-#if !defined(OS_NACL)
+#if !defined(OS_NACL) && !defined(OS_BSD)
     // Threads on linux/android may inherit their priority from the thread
     // where they were created. This explicitly sets the priority of all new
     // threads.
@@ -137,6 +141,8 @@ PlatformThreadId PlatformThread::CurrentId() {
   return syscall(__NR_gettid);
 #elif defined(OS_ANDROID)
   return gettid();
+#elif defined(OS_FREEBSD) || defined(OS_DRAGONFLY)
+  return pthread_getthreadid_np();
 #elif defined(OS_SOLARIS) || defined(OS_QNX) || defined(OS_FUCHSIA)
   return pthread_self();
 #elif defined(OS_NACL) && defined(__GLIBC__)
@@ -235,6 +241,9 @@ void PlatformThread::Detach(PlatformThreadHandle thread_handle) {
 bool PlatformThread::CanIncreaseCurrentThreadPriority() {
 #if defined(OS_NACL)
   return false;
+#elif defined(OS_DRAGONFLY)
+  // The lwp_rtprio syscall in DragonFly doesn't have this kind of weirdness.
+  return true;
 #else
   // Only root can raise thread priority on POSIX environment. On Linux, users
   // who have CAP_SYS_NICE permission also can raise the thread priority, but
@@ -247,6 +256,8 @@ bool PlatformThread::CanIncreaseCurrentThreadPriority() {
 void PlatformThread::SetCurrentThreadPriority(ThreadPriority priority) {
 #if defined(OS_NACL)
   NOTIMPLEMENTED();
+#elif defined(OS_DRAGONFLY)
+  internal::SetCurrentThreadPriorityForPlatform(priority);
 #else
   if (internal::SetCurrentThreadPriorityForPlatform(priority))
     return;
@@ -270,6 +281,14 @@ ThreadPriority PlatformThread::GetCurrentThreadPriority() {
 #if defined(OS_NACL)
   NOTIMPLEMENTED();
   return ThreadPriority::NORMAL;
+#elif defined(OS_DRAGONFLY)
+  // Mirrors SetCurrentThreadPriority()'s implementation.
+  ThreadPriority platform_specific_priority;
+  if (internal::GetCurrentThreadPriorityForPlatform(
+          &platform_specific_priority)) {
+    return platform_specific_priority;
+  }
+  return ThreadPriority::NORMAL;
 #else
   // Mirrors SetCurrentThreadPriority()'s implementation.
   ThreadPriority platform_specific_priority;
diff --git base/threading/sequenced_worker_pool.cc base/threading/sequenced_worker_pool.cc
index 1215b2a327ff..ae5cef8dfe8f 100644
--- base/threading/sequenced_worker_pool.cc
+++ base/threading/sequenced_worker_pool.cc
@@ -1225,7 +1225,7 @@ SequencedWorkerPool::Inner::GetWorkStatus SequencedWorkerPool::Inner::GetWork(
   PendingTaskSet::iterator i = pending_tasks_.begin();
   // We assume that the loop below doesn't take too long and so we can just do
   // a single call to TimeTicks::Now().
-  const TimeTicks current_time = TimeTicks::Now();
+  TimeTicks current_time;
   while (i != pending_tasks_.end()) {
     if (!IsSequenceTokenRunnable(i->sequence_token_id)) {
       unrunnable_tasks++;
@@ -1256,7 +1256,8 @@ SequencedWorkerPool::Inner::GetWorkStatus SequencedWorkerPool::Inner::GetWork(
       pending_tasks_.erase(i++);
       continue;
     }
-
+    if (current_time.is_null())
+      current_time = TimeTicks::Now();
     if (i->time_to_run > current_time) {
       // The time to run has not come yet.
       *wait_time = i->time_to_run - current_time;
diff --git base/time/time.h base/time/time.h
index fddb3d4ae2d2..485cf8b78c86 100644
--- base/time/time.h
+++ base/time/time.h
@@ -512,7 +512,9 @@ class BASE_EXPORT Time : public time_internal::TimeBase<Time> {
   CFAbsoluteTime ToCFAbsoluteTime() const;
 #endif
 
-#if defined(OS_WIN)
+#if defined(OS_DRAGONFLY)
+  static const int kMinLowResolutionThresholdMs = 20;
+#elif defined(OS_WIN)
   static Time FromFileTime(FILETIME ft);
   FILETIME ToFileTime() const;
 
diff --git base/trace_event/malloc_dump_provider.cc base/trace_event/malloc_dump_provider.cc
index 14ba0a2e367c..b08703e6caed 100644
--- base/trace_event/malloc_dump_provider.cc
+++ base/trace_event/malloc_dump_provider.cc
@@ -21,6 +21,8 @@
 
 #if defined(OS_MACOSX)
 #include <malloc/malloc.h>
+#elif defined(OS_DRAGONFLY)
+#include <stdlib.h>
 #else
 #include <malloc.h>
 #endif
@@ -243,6 +245,8 @@ bool MallocDumpProvider::OnMemoryDump(const MemoryDumpArgs& args,
   allocated_objects_count = main_heap_info.block_count;
 #elif defined(OS_FUCHSIA)
 // TODO(fuchsia): Port, see https://crbug.com/706592.
+#elif defined(OS_BSD)
+// Not Implemented.
 #else
   struct mallinfo info = mallinfo();
   DCHECK_GE(info.arena + info.hblkhd, info.uordblks);
diff --git base/trace_event/process_memory_dump.cc base/trace_event/process_memory_dump.cc
index d81999c6c76e..461e478dd8d6 100644
--- base/trace_event/process_memory_dump.cc
+++ base/trace_event/process_memory_dump.cc
@@ -84,7 +84,7 @@ size_t ProcessMemoryDump::CountResidentBytes(void* start_address,
   const size_t kMaxChunkSize = 8 * 1024 * 1024;
   size_t max_vec_size =
       GetSystemPageCount(std::min(mapped_size, kMaxChunkSize), page_size);
-#if defined(OS_MACOSX) || defined(OS_IOS)
+#if defined(OS_MACOSX) || defined(OS_IOS) || defined(OS_BSD)
   std::unique_ptr<char[]> vec(new char[max_vec_size]);
 #elif defined(OS_WIN)
   std::unique_ptr<PSAPI_WORKING_SET_EX_INFORMATION[]> vec(
diff --git build/build_config.h build/build_config.h
index 090641907bdb..ad5acfbb8c22 100644
--- build/build_config.h
+++ build/build_config.h
@@ -57,6 +57,8 @@
 #define OS_NETBSD 1
 #elif defined(__OpenBSD__)
 #define OS_OPENBSD 1
+#elif defined(__DragonFly__)
+#define OS_DRAGONFLY 1
 #elif defined(__sun)
 #define OS_SOLARIS 1
 #elif defined(__QNXNTO__)
@@ -73,7 +75,8 @@
 
 // For access to standard BSD features, use OS_BSD instead of a
 // more specific macro.
-#if defined(OS_FREEBSD) || defined(OS_NETBSD) || defined(OS_OPENBSD)
+#if defined(OS_FREEBSD) || defined(OS_NETBSD) || defined(OS_OPENBSD) ||	\
+    defined(OS_DRAGONFLY)
 #define OS_BSD 1
 #endif
 
@@ -82,7 +85,7 @@
 #if defined(OS_AIX) || defined(OS_ANDROID) || defined(OS_FREEBSD) ||  \
     defined(OS_FUCHSIA) || defined(OS_LINUX) || defined(OS_MACOSX) || \
     defined(OS_NACL) || defined(OS_NETBSD) || defined(OS_OPENBSD) ||  \
-    defined(OS_QNX) || defined(OS_SOLARIS)
+    defined(OS_QNX) || defined(OS_SOLARIS) || defined(OS_DRAGONFLY)
 #define OS_POSIX 1
 #endif
 
diff --git build/config/BUILD.gn build/config/BUILD.gn
index aff0e3d9d360..30395f6f4e88 100644
--- build/config/BUILD.gn
+++ build/config/BUILD.gn
@@ -260,6 +260,12 @@ config("default_libs") {
       "dl",
       "rt",
     ]
+  } else if (is_bsd) {
+    libs = [
+      "dl",
+      "rt",
+      "execinfo",
+    ]
   }
 }
 
@@ -302,7 +308,7 @@ config("executable_config") {
       "//build/config/ios:ios_dynamic_flags",
       "//build/config/ios:ios_executable_flags",
     ]
-  } else if (is_linux || is_android || current_os == "aix") {
+  } else if (is_linux || is_android || current_os == "aix" || is_bsd) {
     configs += [ "//build/config/gcc:executable_ldconfig" ]
     if (is_android) {
       configs += [ "//build/config/android:executable_config" ]
diff --git build/config/BUILDCONFIG.gn build/config/BUILDCONFIG.gn
index fa4ec72c87c2..14fc479dfea1 100644
--- build/config/BUILDCONFIG.gn
+++ build/config/BUILDCONFIG.gn
@@ -123,6 +123,12 @@ if (current_os == "") {
 #   even if the value is overridden, which is wasteful. See first bullet.
 
 declare_args() {
+  # Whether we're one of the BSDs. This simplifies a few further checks.
+  is_bsd = current_os == "dragonfly" || current_os == "freebsd" ||
+           current_os == "openbsd" || current_os == "netbsd"
+}
+
+declare_args() {
   # Set to enable the official build level of optimization. This has nothing
   # to do with branding, but enables an additional level of optimization above
   # release (!is_debug). This might be better expressed as a tri-state
@@ -131,13 +137,13 @@ declare_args() {
   is_official_build = false
 
   # Whether we're a traditional desktop unix.
-  is_desktop_linux = current_os == "linux"
+  is_desktop_linux = current_os == "linux" || is_bsd
 
   # Set to true when compiling with the Clang compiler. Typically this is used
   # to configure warnings.
   is_clang =
       current_os == "mac" || current_os == "ios" || current_os == "chromeos" ||
-      current_os == "fuchsia" ||
+      current_os == "fuchsia" || current_os == "freebsd" ||
       (current_os == "linux" && current_cpu != "s390x" &&
        current_cpu != "s390" && current_cpu != "ppc64" && current_cpu != "ppc")
 
@@ -189,8 +195,8 @@ if (host_toolchain == "") {
   # TODO(dpranke): Add some sort of assert here that verifies that
   # no toolchain omitted host_toolchain from its toolchain_args().
 
-  if (host_os == "linux") {
-    if (target_os != "linux") {
+  if (host_os == "linux" || is_bsd) {
+    if (target_os != "linux" && !is_bsd && host_os != target_os) {
       # TODO(dpranke) - is_clang normally applies only to the target
       # build, and there is no way to indicate that you want to override
       # it for both the target build *and* the host build. Do we need to
@@ -228,7 +234,9 @@ if (target_os == "android") {
   } else {
     _default_toolchain = "//build/toolchain/android:android_$target_cpu"
   }
-} else if (target_os == "chromeos" || target_os == "linux") {
+} else if (target_os == "chromeos" || target_os == "linux" ||
+           target_os == "dragonfly" || target_os == "freebsd" ||
+           target_os == "openbsd") {
   # See comments in build/toolchain/cros/BUILD.gn about board compiles.
   if (is_clang) {
     _default_toolchain = "//build/toolchain/linux:clang_$target_cpu"
@@ -369,9 +377,10 @@ if (current_os == "win" || current_os == "winrt_81" ||
   is_nacl = false
   is_posix = true
   is_win = false
-} else if (current_os == "aix") {
+} else if (is_bsd || current_os == "aix") {
   is_android = false
   is_chromeos = false
+  is_fuchsia = false
   is_ios = false
   is_linux = false
   is_mac = false
@@ -449,7 +458,7 @@ if (!is_ios) {
 if (!is_mac && !is_ios) {
   sources_assignment_filter += [ "*.mm" ]
 }
-if (!is_linux) {
+if (!is_linux && !is_bsd) {
   sources_assignment_filter += [
     "*_linux.h",
     "*_linux.cc",
diff --git build/config/allocator.gni build/config/allocator.gni
index a08a1430e238..1a395b80641c 100644
--- build/config/allocator.gni
+++ build/config/allocator.gni
@@ -7,7 +7,7 @@ import("//build/config/sanitizers/sanitizers.gni")
 # Temporarily disable tcmalloc on arm64 linux to get rid of compilation errors.
 if (is_android || current_cpu == "mipsel" || is_mac || is_ios || is_asan ||
     is_lsan || is_tsan || is_msan || is_win || is_syzyasan || is_fuchsia ||
-    (is_linux && target_cpu == "arm64")) {
+    is_bsd || (is_linux && target_cpu == "arm64")) {
   _default_allocator = "none"
 } else {
   _default_allocator = "tcmalloc"
@@ -16,7 +16,7 @@ if (is_android || current_cpu == "mipsel" || is_mac || is_ios || is_asan ||
 # The debug CRT on Windows has some debug features that are incompatible with
 # the shim. NaCl in particular does seem to link some binaries statically
 # against the debug CRT with "is_nacl=false".
-if ((is_linux || is_android || is_mac ||
+if ((is_linux || is_android || is_mac || is_bsd ||
      (is_win && !is_component_build && !is_debug)) && !is_asan && !is_lsan &&
     !is_tsan && !is_msan) {
   _default_use_allocator_shim = true
@@ -42,11 +42,12 @@ if (is_nacl) {
 
 assert(use_allocator == "none" || use_allocator == "tcmalloc")
 
+assert(!is_bsd || use_allocator == "none", "Tcmalloc doesn't work on BSDs.")
 assert(!is_win || use_allocator == "none", "Tcmalloc doesn't work on Windows.")
 assert(!is_mac || use_allocator == "none", "Tcmalloc doesn't work on macOS.")
 
 assert(
-    !use_allocator_shim || is_linux || is_android || is_win || is_mac,
+    !use_allocator_shim || is_linux || is_android || is_win || is_mac || is_bsd,
     "use_allocator_shim is supported only on Linux, Android, Windows and macOS targets")
 
 if (is_win && use_allocator_shim) {
diff --git build/config/compiler/BUILD.gn build/config/compiler/BUILD.gn
index 6e3ddbdc7e1e..a62498cb4306 100644
--- build/config/compiler/BUILD.gn
+++ build/config/compiler/BUILD.gn
@@ -202,6 +202,8 @@ config("compiler") {
       } else {
         cflags += [ "-fstack-protector" ]
       }
+    } else if (current_os == "freebsd" || current_os == "dragonfly") {
+      cflags += [ "-isystem", "/usr/local/include" ]
     } else if (is_posix && !is_chromeos && !is_nacl) {
       # TODO(phajdan.jr): Use -fstack-protector-strong when our gcc supports it.
       # See also https://crbug.com/533294
@@ -316,7 +318,7 @@ config("compiler") {
 
   # Linux/Android common flags setup.
   # ---------------------------------
-  if (is_linux || is_android || is_fuchsia) {
+  if (is_linux || is_android || is_fuchsia || is_bsd) {
     if (use_pic) {
       cflags += [ "-fPIC" ]
       ldflags += [ "-fPIC" ]
@@ -374,7 +376,9 @@ config("compiler") {
       # On Android, this isn't needed.  gcc in the NDK knows to look next to
       # it with -fuse-ld=gold, and clang gets a --gcc-toolchain flag passed
       # above.
-      ldflags += [ "-B$gold_path" ]
+      if (current_os != "dragonfly") {
+        ldflags += [ "-B$gold_path" ]
+      }
 
       if (linux_use_bundled_binutils) {
         ldflags += [
@@ -444,7 +448,8 @@ config("compiler") {
 
   # C++11 compiler flags setup.
   # ---------------------------
-  if (is_linux || is_android || (is_nacl && is_clang) || current_os == "aix") {
+  if (is_linux || is_android || (is_nacl && is_clang) || current_os == "aix" ||
+      is_bsd) {
     # gnu++11 instead of c++11 is needed because some code uses typeof() (a
     # GNU extension).
     # TODO(thakis): Eventually switch this to c++11 instead,
@@ -493,7 +498,7 @@ config("compiler") {
       ldflags += [ "-flto" ]
 
       # Apply a lower LTO optimization level as the default is too slow.
-      if (is_linux) {
+      if (is_linux || current_os == "dragonfly") {
         if (use_lld) {
           ldflags += [ "-Wl,--lto-O1" ]
         } else {
@@ -516,7 +521,7 @@ config("compiler") {
     # Also, when targeting ARM, without this flag, LTO produces a .text section
     # that is larger than the maximum call displacement, preventing the linker
     # from relocating calls (http://llvm.org/PR22999).
-    if (is_linux) {
+    if (is_linux || is_bsd) {
       if (use_lld) {
         ldflags += [
           "-Wl,-mllvm,-function-sections",
diff --git build/config/compiler/compiler.gni build/config/compiler/compiler.gni
index 46b048f3ec31..28737b33983f 100644
--- build/config/compiler/compiler.gni
+++ build/config/compiler/compiler.gni
@@ -128,7 +128,7 @@ declare_args() {
                      current_cpu == "arm" || current_cpu == "mipsel")) ||
        (is_android && (current_cpu == "x86" || current_cpu == "x64" ||
                        current_cpu == "arm" || current_cpu == "arm64")) ||
-       is_fuchsia)
+       is_fuchsia || current_os == "dragonfly")
 }
 
 # If it wasn't manually set, set to an appropriate default.
diff --git build/config/crypto.gni build/config/crypto.gni
index 0196e873e506..b0609c4e3ec6 100644
--- build/config/crypto.gni
+++ build/config/crypto.gni
@@ -20,4 +20,4 @@ use_openssl_certs = is_android || is_nacl
 
 # True if NSS is used for certificate handling. It is possible to use OpenSSL
 # for the crypto library, but NSS for the platform certificate library.
-use_nss_certs = is_linux
+use_nss_certs = is_linux || is_bsd
diff --git build/config/features.gni build/config/features.gni
index d143dac4b89c..885b9b9c75eb 100644
--- build/config/features.gni
+++ build/config/features.gni
@@ -24,7 +24,7 @@ declare_args() {
   # Enables Native Client support.
   # Temporarily disable nacl on arm64 linux to get rid of compilation errors.
   # TODO(mcgrathr): When mipsel-nacl-clang is available, drop the exclusion.
-  enable_nacl = !is_ios && !is_android && !is_chromecast &&
+  enable_nacl = !is_ios && !is_android && !is_chromecast && !is_bsd &&
                 current_cpu != "mipsel" && !(is_linux && target_cpu == "arm64")
 
   # Non-SFI is not yet supported on mipsel
@@ -57,13 +57,13 @@ declare_args() {
   # libudev usage. This currently only affects the content layer.
   use_udev = is_linux && !is_chromecast
 
-  use_dbus = is_linux && !is_chromecast
+  use_dbus = (is_linux && !is_chromecast) || is_bsd
 
   # Option controlling the use of GConf (the classic GNOME configuration
   # system).
   use_gconf = is_linux && !is_chromeos && !is_chromecast
 
-  use_gio = is_linux && !is_chromeos && !is_chromecast
+  use_gio = (is_linux && !is_chromeos && !is_chromecast) || is_bsd
 }
 #
 # =============================================
diff --git build/config/linux/BUILD.gn build/config/linux/BUILD.gn
index aedff7e75974..bb768594fded 100644
--- build/config/linux/BUILD.gn
+++ build/config/linux/BUILD.gn
@@ -84,6 +84,14 @@ config("libresolv") {
   libs = [ "resolv" ]
 }
 
+if (current_os == "dragonfly") {
+  pkg_config("libusb") {
+    packages = [
+      "libusb-1.0",
+    ]
+  }
+}
+
 if (use_glib) {
   pkg_config("glib") {
     packages = [
@@ -95,6 +103,7 @@ if (use_glib) {
     defines = [
       "GLIB_VERSION_MAX_ALLOWED=GLIB_VERSION_2_32",
       "GLIB_VERSION_MIN_REQUIRED=GLIB_VERSION_2_26",
+      "GLIB_DISABLE_DEPRECATION_WARNINGS",
     ]
   }
 }
diff --git build/config/linux/gtk/BUILD.gn build/config/linux/gtk/BUILD.gn
index 95345c878a45..aa5b9dbaae99 100644
--- build/config/linux/gtk/BUILD.gn
+++ build/config/linux/gtk/BUILD.gn
@@ -5,7 +5,8 @@
 import("//build/config/linux/gtk/gtk.gni")
 import("//build/config/linux/pkg_config.gni")
 
-assert(is_linux, "This file should only be referenced on Linux")
+assert(is_linux || is_bsd,
+       "This file should only be referenced on Linux or BSD")
 
 # The target in this file will automatically reference GTK2 or GTK3 depending
 # on the state of the build flag. Some builds reference both 2 and 3, and some
diff --git build/config/linux/gtk3/BUILD.gn build/config/linux/gtk3/BUILD.gn
index 0cfd05f31934..6748b47d0330 100644
--- build/config/linux/gtk3/BUILD.gn
+++ build/config/linux/gtk3/BUILD.gn
@@ -4,7 +4,7 @@
 
 import("//build/config/linux/pkg_config.gni")
 
-assert(is_linux, "This file should only be referenced on Linux")
+assert(is_linux || is_bsd, "This file should only be referenced on Linux")
 
 # Depend on //build/config/linux/gtk3 to use GTKv3. Depend on
 # //build/config/linux/gtk to get GTK 2 or 3 depending on the build flags.
diff --git build/config/linux/pkg-config.py build/config/linux/pkg-config.py
index d63b2d65b91e..7dd5e22963d5 100755
--- build/config/linux/pkg-config.py
+++ build/config/linux/pkg-config.py
@@ -58,7 +58,7 @@ def SetConfigPath(options):
     sys.exit(1)
 
   libdir = sysroot + '/usr/' + options.system_libdir + '/pkgconfig'
-  libdir += ':' + sysroot + '/usr/share/pkgconfig'
+  libdir += ':' + sysroot + '/usr/libdata/pkgconfig'
   os.environ['PKG_CONFIG_LIBDIR'] = libdir
   return libdir
 
@@ -107,7 +107,7 @@ def main():
   # If this is run on non-Linux platforms, just return nothing and indicate
   # success. This allows us to "kind of emulate" a Linux build from other
   # platforms.
-  if "linux" not in sys.platform:
+  if ("linux" not in sys.platform) and ("dragonfly" not in sys.platform):
     print "[[],[],[],[],[]]"
     return 0
 
diff --git build/config/linux/pkg_config.gni build/config/linux/pkg_config.gni
index 23cec376f086..2393f9830b82 100644
--- build/config/linux/pkg_config.gni
+++ build/config/linux/pkg_config.gni
@@ -44,7 +44,7 @@ declare_args() {
   # chrome build scheme. This variable permits controlling this for GN builds
   # in similar fashion by setting the `system_libdir` variable in the build's
   # args.gn file to 'lib' or 'lib64' as appropriate for the target architecture.
-  system_libdir = "lib"
+  system_libdir = "libdata"
 }
 
 pkg_config_script = "//build/config/linux/pkg-config.py"
diff --git build/config/ui.gni build/config/ui.gni
index ce384b5cdd8a..6d7fa5b346c5 100644
--- build/config/ui.gni
+++ build/config/ui.gni
@@ -31,10 +31,10 @@ declare_args() {
 
   # Indicates if Aura is enabled. Aura is a low-level windowing library, sort
   # of a replacement for GDI or GTK.
-  use_aura = is_win || is_linux
+  use_aura = is_win || is_linux || is_bsd
 
   # Whether we should use glib, a low level C utility library.
-  use_glib = is_linux
+  use_glib = is_linux || is_bsd
 }
 
 declare_args() {
@@ -48,14 +48,14 @@ declare_args() {
 # These variables depend on other variables and can't be set externally.
 
 # Indicates if the UI toolkit depends on X11.
-use_x11 = is_linux && !use_ozone
+use_x11 = (is_linux || is_bsd) && !use_ozone
 
 # Turn off glib if Ozone is enabled.
 if (use_ozone) {
   use_glib = false
 }
 
-if (is_linux && !use_ozone) {
+if ((is_linux || is_bsd) && !use_ozone) {
   use_cairo = true
   use_pango = true
 } else {
diff --git build/download_nacl_toolchains.py build/download_nacl_toolchains.py
index cccecce9ef95..43314ffa844a 100755
--- build/download_nacl_toolchains.py
+++ build/download_nacl_toolchains.py
@@ -16,6 +16,10 @@ def Main(args):
     return 0
   if 'OS=android' in os.environ.get('GYP_DEFINES', ''):
     return 0
+  # Exit early on DragonFly.
+  if sys.platform.startswith('dragonfly'):
+    print 'Skipping NACL toolchain download on DragonFly'
+    return 0
   script_dir = os.path.dirname(os.path.abspath(__file__))
   src_dir = os.path.dirname(script_dir)
   nacl_dir = os.path.join(src_dir, 'native_client')
diff --git build/linux/pkg-config-wrapper build/linux/pkg-config-wrapper
index c4935d7b5970..f2d6d7f6c228 100755
--- build/linux/pkg-config-wrapper
+++ build/linux/pkg-config-wrapper
@@ -31,7 +31,11 @@ fi
 rewrite=`dirname $0`/rewrite_dirs.py
 package=${!#}
 
-libdir=$root/usr/$libpath/pkgconfig:$root/usr/share/pkgconfig
+if [ "$(uname -s)" = "DragonFly" ]; then
+  libdir=$root/usr/$libpath/pkgconfig:$root/usr/share/pkgconfig
+else
+  libdir=$root/usr/$libpath/pkgconfig:$root/usr/libdata/pkgconfig
+fi
 
 set -e
 # Some sysroots, like the Chromium OS ones, may generate paths that are not
diff --git build/secondary/third_party/libjpeg_turbo/BUILD.gn build/secondary/third_party/libjpeg_turbo/BUILD.gn
index 941c825d279d..747268e391d5 100644
--- build/secondary/third_party/libjpeg_turbo/BUILD.gn
+++ build/secondary/third_party/libjpeg_turbo/BUILD.gn
@@ -95,7 +95,7 @@ if (current_cpu == "x86" || current_cpu == "x64") {
     } else if (is_mac || is_ios) {
       defines += [ "MACHO" ]
       include_dirs = [ "mac" ]
-    } else if (is_linux || is_android) {
+    } else if (is_linux || is_android || is_bsd) {
       defines += [ "ELF" ]
       include_dirs = [ "linux" ]
     }
diff --git build/secondary/third_party/nss/BUILD.gn build/secondary/third_party/nss/BUILD.gn
index 5788f3e5d6d9..359869b9e6d9 100644
--- build/secondary/third_party/nss/BUILD.gn
+++ build/secondary/third_party/nss/BUILD.gn
@@ -4,7 +4,7 @@
 
 import("//build/config/linux/pkg_config.gni")
 
-if (is_linux) {
+if (is_linux || is_bsd) {
   # This is a dependency on NSS with no libssl. On Linux we use a built-in SSL
   # library but the system NSS libraries. Non-Linux platforms using NSS use the
   # hermetic one in //third_party/nss.
diff --git chrome/BUILD.gn chrome/BUILD.gn
index 070d7c6008b1..f6fb92b29ad5 100644
--- chrome/BUILD.gn
+++ chrome/BUILD.gn
@@ -121,7 +121,7 @@ if (!is_android && !is_mac) {
     if (is_win) {
       public_deps += [ ":reorder_imports" ]
     }
-    if (use_aura && (is_win || is_linux)) {
+    if (use_aura && (is_win || is_linux || is_bsd)) {
       data_deps += [ "//chrome/app:service_manifests" ]
     }
   }
@@ -159,7 +159,7 @@ if (!is_android && !is_mac) {
     data = [
       "$root_out_dir/resources.pak",
     ]
-    if (is_linux || is_win) {
+    if (is_linux || is_win || is_bsd) {
       data += [
         "$root_out_dir/chrome_100_percent.pak",
         "$root_out_dir/locales/en-US.pak",
@@ -241,7 +241,7 @@ if (!is_android && !is_mac) {
       sources += [ "app/chrome_exe_main_aura.cc" ]
     }
 
-    if (is_linux) {
+    if (is_linux || is_bsd) {
       sources += [
         "app/chrome_dll_resource.h",
         "app/chrome_main.cc",
@@ -1698,6 +1698,46 @@ if (enable_resource_whitelist_generation) {
   }
 }
 
+if (is_bsd) {
+  action("manpage") {
+    name = "Chromium"
+    filename = "chromium-browser"
+    confdir = "chromium"
+
+    script = "//chrome/tools/build/linux/sed.py"
+    infile = "app/resources/manpage.1.in"
+    inputs = [
+      infile,
+    ]
+
+    outfile = "$root_out_dir/chrome.1"
+    outputs = [
+      outfile,
+    ]
+
+    args = [
+      rebase_path(infile, root_build_dir),
+      rebase_path(outfile, root_build_dir),
+      "-e s/@@NAME@@/$name/",
+      "-e s/@@FILENAME@@/$filename/",
+      "-e s/@@CONFDIR@@/$confdir/",
+    ]
+  }
+
+  # Copies some scripts and resources that are used for desktop integration.
+  copy("xdg_mime") {
+    sources = [
+      "//chrome/app/theme/$branding_path_component/product_logo_48.png",
+      "//chrome/tools/build/linux/chrome-wrapper",
+      "//third_party/xdg-utils/scripts/xdg-mime",
+      "//third_party/xdg-utils/scripts/xdg-settings",
+    ]
+    outputs = [
+      "$root_out_dir/{{source_file_part}}",
+    ]
+  }
+}
+
 if (is_linux) {
   action("manpage") {
     if (is_chrome_branded) {
diff --git chrome/app/chrome_command_ids.h chrome/app/chrome_command_ids.h
index 99707a980c2f..cd37f9366241 100644
--- chrome/app/chrome_command_ids.h
+++ chrome/app/chrome_command_ids.h
@@ -67,7 +67,7 @@
 #define IDC_VISIT_DESKTOP_OF_LRU_USER_2 34049
 #define IDC_VISIT_DESKTOP_OF_LRU_USER_3 34050
 
-#if defined(OS_LINUX) && !defined(OS_CHROMEOS)
+#if (defined(OS_LINUX) && !defined(OS_CHROMEOS)) || defined(OS_BSD)
 #define IDC_USE_SYSTEM_TITLE_BAR        34051
 #endif
 
diff --git chrome/app/chrome_main.cc chrome/app/chrome_main.cc
index aec129c9bd1b..73022fee8089 100644
--- chrome/app/chrome_main.cc
+++ chrome/app/chrome_main.cc
@@ -92,14 +92,15 @@ int ChromeMain(int argc, const char** argv) {
   const base::CommandLine* command_line(base::CommandLine::ForCurrentProcess());
   ALLOW_UNUSED_LOCAL(command_line);
 
-#if defined(OS_LINUX) || defined(OS_MACOSX) || defined(OS_WIN)
+#if defined(OS_LINUX) || defined(OS_MACOSX) || defined(OS_WIN) || \
+    defined(OS_BSD)
   if (command_line->HasSwitch(switches::kHeadless)) {
 #if defined(OS_MACOSX)
     SetUpBundleOverrides();
 #endif
     return headless::HeadlessShellMain(params);
   }
-#endif  // defined(OS_LINUX) || defined(OS_MACOSX) || defined(OS_WIN)
+#endif  // defined(OS_LINUX) || defined(OS_MACOSX) || defined(OS_WIN) || defined(OS_BSD)
 
 #if defined(OS_CHROMEOS) && BUILDFLAG(ENABLE_PACKAGE_MASH_SERVICES)
   if (service_manager::ServiceManagerIsRemote())
diff --git chrome/app/chrome_main_delegate.cc chrome/app/chrome_main_delegate.cc
index 12bde04bb984..c5879905ec04 100644
--- chrome/app/chrome_main_delegate.cc
+++ chrome/app/chrome_main_delegate.cc
@@ -90,7 +90,9 @@
 #include <locale.h>
 #include <signal.h>
 
+#if !defined(OS_DRAGONFLY)
 #include "chrome/app/chrome_crash_reporter_client.h"
+#endif
 #include "chrome/app/shutdown_signal_handlers_posix.h"
 #endif
 
@@ -135,11 +137,11 @@
 #include "ui/base/x/x11_util.h"  // nogncheck
 #endif
 
-#if defined(OS_POSIX) && !defined(OS_MACOSX)
+#if defined(OS_POSIX) && !defined(OS_MACOSX) && !defined(OS_DRAGONFLY)
 #include "components/crash/content/app/breakpad_linux.h"
 #endif
 
-#if defined(OS_LINUX)
+#if defined(OS_LINUX) || defined(OS_BSD)
 #include "base/environment.h"
 #endif
 
@@ -182,7 +184,7 @@ base::LazyInstance<ChromeContentBrowserClient>::DestructorAtExit
     g_chrome_content_browser_client = LAZY_INSTANCE_INITIALIZER;
 #endif
 
-#if defined(OS_POSIX)
+#if defined(OS_POSIX) && !defined(OS_DRAGONFLY)
 base::LazyInstance<ChromeCrashReporterClient>::Leaky g_chrome_crash_client =
     LAZY_INSTANCE_INITIALIZER;
 #endif
@@ -305,7 +307,7 @@ void AdjustLinuxOOMScore(const std::string& process_type) {
 // and resources loaded.
 bool SubprocessNeedsResourceBundle(const std::string& process_type) {
   return
-#if defined(OS_POSIX) && !defined(OS_MACOSX)
+#if defined(OS_POSIX) && !defined(OS_MACOSX) && !defined(OS_DRAGONFLY)
       // The zygote process opens the resources for the renderers.
       process_type == switches::kZygoteProcess ||
 #endif
@@ -357,7 +359,7 @@ void HandleHelpSwitches(const base::CommandLine& command_line) {
 }
 #endif
 
-#if !defined(OS_MACOSX) && !defined(OS_ANDROID)
+#if !defined(OS_MACOSX) && !defined(OS_ANDROID) && !defined(OS_DRAGONFLY)
 void SIGTERMProfilingShutdown(int signal) {
   Profiling::Stop();
   struct sigaction sigact;
@@ -374,7 +376,7 @@ void SetUpProfilingShutdownHandler() {
   sigemptyset(&sigact.sa_mask);
   CHECK_EQ(sigaction(SIGTERM, &sigact, NULL), 0);
 }
-#endif  // !defined(OS_MACOSX) && !defined(OS_ANDROID)
+#endif  // !defined(OS_MACOSX) && !defined(OS_ANDROID) && !defined(OS_DRAGONFLY)
 
 #endif  // OS_POSIX
 
@@ -424,7 +426,7 @@ void InitializeUserDataDir(base::CommandLine* command_line) {
   std::string process_type =
       command_line->GetSwitchValueASCII(switches::kProcessType);
 
-#if defined(OS_LINUX)
+#if defined(OS_LINUX) || defined(OS_BSD)
   // On Linux, Chrome does not support running multiple copies under different
   // DISPLAYs, so the profile directory can be specified in the environment to
   // support the virtual desktop use-case.
@@ -436,7 +438,7 @@ void InitializeUserDataDir(base::CommandLine* command_line) {
       user_data_dir = base::FilePath::FromUTF8Unsafe(user_data_dir_string);
     }
   }
-#endif  // OS_LINUX
+#endif  // OS_LINUX || defined(OS_BSD)
 #if defined(OS_MACOSX)
   policy::path_parser::CheckUserDataDirPolicy(&user_data_dir);
 #endif  // OS_MAC
@@ -492,7 +494,8 @@ void InitLogging(const std::string& process_type) {
 void RecordMainStartupMetrics(base::TimeTicks exe_entry_point_ticks) {
   if (!exe_entry_point_ticks.is_null())
     startup_metric_utils::RecordExeMainEntryPointTicks(exe_entry_point_ticks);
-#if defined(OS_MACOSX) || defined(OS_WIN) || defined(OS_LINUX)
+#if defined(OS_MACOSX) || defined(OS_WIN) || defined(OS_LINUX) || \
+    defined(OS_BSD)
   // Record the startup process creation time on supported platforms.
   startup_metric_utils::RecordStartupProcessCreationTime(
       base::CurrentProcessInfo::CreationTime());
@@ -779,7 +782,7 @@ void ChromeMainDelegate::PreSandboxStartup() {
   std::string process_type =
       command_line.GetSwitchValueASCII(switches::kProcessType);
 
-#if defined(OS_POSIX)
+#if defined(OS_POSIX) && !defined(OS_DRAGONFLY)
   crash_reporter::SetCrashReporterClient(g_chrome_crash_client.Pointer());
 #endif
 
@@ -909,7 +912,7 @@ void ChromeMainDelegate::PreSandboxStartup() {
   chrome::InitializePDF();
 #endif
 
-#if defined(OS_POSIX) && !defined(OS_MACOSX)
+#if defined(OS_POSIX) && !defined(OS_MACOSX) && !defined(OS_DRAGONFLY)
   // Zygote needs to call InitCrashReporter() in RunZygote().
   if (process_type != switches::kZygoteProcess) {
 #if defined(OS_ANDROID)
@@ -924,7 +927,7 @@ void ChromeMainDelegate::PreSandboxStartup() {
     breakpad::InitCrashReporter(process_type);
 #endif  // defined(OS_ANDROID)
   }
-#endif  // defined(OS_POSIX) && !defined(OS_MACOSX)
+#endif  // defined(OS_POSIX) && !defined(OS_MACOSX) && !defined(OS_DRAGONFLY)
 
   // After all the platform Breakpads have been initialized, store the command
   // line for crash reporting.
@@ -977,7 +980,7 @@ int ChromeMainDelegate::RunProcess(
     // This entry is not needed on Linux, where the NaCl loader
     // process is launched via nacl_helper instead.
 #if !defined(DISABLE_NACL) && !defined(CHROME_MULTIPLE_DLL_BROWSER) && \
-    !defined(OS_LINUX)
+    !defined(OS_LINUX) && !defined(OS_BSD)
     {switches::kNaClLoaderProcess, NaClMain},
 #else
     { "<invalid>", NULL },  // To avoid constant array of size 0
@@ -1030,7 +1033,7 @@ bool ChromeMainDelegate::DelaySandboxInitialization(
 #endif
   return process_type == switches::kRelauncherProcess;
 }
-#elif defined(OS_POSIX) && !defined(OS_ANDROID)
+#elif defined(OS_POSIX) && !defined(OS_ANDROID) && !defined(OS_DRAGONFLY)
 void ChromeMainDelegate::ZygoteStarting(
     std::vector<std::unique_ptr<content::ZygoteForkDelegate>>* delegates) {
 #if defined(OS_CHROMEOS)
diff --git chrome/app/chrome_main_delegate.h chrome/app/chrome_main_delegate.h
index 22ba58a9b27d..69953c0723c8 100644
--- chrome/app/chrome_main_delegate.h
+++ chrome/app/chrome_main_delegate.h
@@ -42,7 +42,7 @@ class ChromeMainDelegate : public content::ContentMainDelegate {
       const std::string& process_type) override;
   bool ShouldSendMachPort(const std::string& process_type) override;
   bool DelaySandboxInitialization(const std::string& process_type) override;
-#elif defined(OS_POSIX) && !defined(OS_ANDROID)
+#elif defined(OS_POSIX) && !defined(OS_ANDROID) && !defined(OS_DRAGONFLY)
   void ZygoteStarting(std::vector<std::unique_ptr<content::ZygoteForkDelegate>>*
                           delegates) override;
   void ZygoteForked() override;
diff --git chrome/app/chromium_strings.grd chrome/app/chromium_strings.grd
index 0a1609831b69..bb75a335c572 100644
--- chrome/app/chromium_strings.grd
+++ chrome/app/chromium_strings.grd
@@ -910,7 +910,7 @@ Signing in anyway will merge Chromium information like bookmarks, history, and o
       </message>
 
       <!-- ProcessSingleton -->
-      <if expr="is_linux or is_macosx">
+      <if expr="is_linux or is_macosx or is_bsd">
         <message name="IDS_PROFILE_IN_USE_POSIX" desc="Message shown when the browser cannot start because the profile is in use on a different host.">
           The profile appears to be in use by another Chromium process (<ph name="PROCESS_ID">$1<ex>12345</ex></ph>) on another computer (<ph name="HOST_NAME">$2<ex>example.com</ex></ph>). Chromium has locked the profile so that it doesn't get corrupted. If you are sure no other processes are using this profile, you can unlock the profile and relaunch Chromium.
         </message>
diff --git chrome/app/generated_resources.grd chrome/app/generated_resources.grd
index c79a92e22949..6e7032bf0ccc 100644
--- chrome/app/generated_resources.grd
+++ chrome/app/generated_resources.grd
@@ -7977,7 +7977,7 @@ I don't think this site should be blocked!
       <message name="IDS_APPEARANCE_GROUP_NAME" desc="The title of the appearance group">
         Appearance
       </message>
-      <if expr="not is_linux or chromeos">
+      <if expr="not is_posix or chromeos or is_macosx">
         <message name="IDS_THEMES_GROUP_NAME" desc="The title of the themes group">
           Themes
         </message>
@@ -7985,7 +7985,7 @@ I don't think this site should be blocked!
       <message name="IDS_THEMES_RESET_BUTTON" desc="The button to reset your theme">
         Reset to default theme
       </message>
-      <if expr="is_linux and not chromeos">
+      <if expr="is_posix and not chromeos and not is_macosx">
         <message name="IDS_THEMES_GTK_BUTTON" desc="The button to choose GTK colors and icons as the current theme.">
           Use GTK+ theme
         </message>
@@ -9243,7 +9243,7 @@ Tell us what happened exactly before you got the profile error message:
         Set as default
       </message>
 
-      <if expr="is_linux and not chromeos">
+      <if expr="is_posix and not chromeos and not is_macosx">
         <message name="IDS_SHOW_WINDOW_DECORATIONS_MENU" desc="The menu entry text in the tab strip context menu.  This toggles the system title bar and window borders (window decorations) on linux.">
           Use system title bar and borders
         </message>
diff --git chrome/app/mash/BUILD.gn chrome/app/mash/BUILD.gn
index f6f8e3804bac..1d72f8d5520b 100644
--- chrome/app/mash/BUILD.gn
+++ chrome/app/mash/BUILD.gn
@@ -60,7 +60,7 @@ source_set("embedded_services") {
     deps += [ "//chrome/app:shutdown_signal_handlers" ]
   }
 
-  if (is_linux && !is_android) {
+  if ((is_linux && !is_android) || is_bsd) {
     deps += [ "//components/font_service:lib" ]
   }
 }
@@ -86,7 +86,7 @@ catalog("catalog") {
     embedded_services += [ "//ash/mus:manifest" ]
   }
 
-  if (is_linux && !is_android) {
+  if ((is_linux && !is_android) || is_bsd) {
     embedded_services += [ "//components/font_service:manifest" ]
   }
 
diff --git chrome/app/settings_strings.grdp chrome/app/settings_strings.grdp
index 4a089cad5467..99e6cb577afa 100644
--- chrome/app/settings_strings.grdp
+++ chrome/app/settings_strings.grdp
@@ -278,7 +278,7 @@
   <message name="IDS_SETTINGS_THEMES" desc="Name of the control which allows the user to get a theme for the browser.">
     Themes
   </message>
-  <if expr="is_linux and not chromeos">
+  <if expr="(is_linux and not chromeos) or is_bsd">
     <message name="IDS_SETTINGS_SYSTEM_THEME" desc="Text of the label describing the system (GTK+) browser theme on Linux">
       GTK+
     </message>
@@ -292,7 +292,7 @@
       Use Classic
     </message>
   </if>
-  <if expr="not is_linux or chromeos">
+  <if expr="(not is_linux or chromeos) and not is_bsd">
     <message name="IDS_SETTINGS_RESET_TO_DEFAULT_THEME" desc="Name of the control which resets the browser theme back to the default theme.">
       Reset to default
     </message>
diff --git chrome/browser/BUILD.gn chrome/browser/BUILD.gn
index c79b28b3776c..221e9dca7b0a 100644
--- chrome/browser/BUILD.gn
+++ chrome/browser/BUILD.gn
@@ -2422,7 +2422,7 @@ split_static_library("browser") {
     deps += [ "//device/udev_linux" ]
   }
 
-  if (is_linux && !is_chromeos) {
+  if ((is_linux && !is_chromeos) || is_bsd) {
     deps += [ "//third_party/speech-dispatcher" ]
   }
 
@@ -3819,7 +3819,7 @@ split_static_library("browser") {
     }
   }
 
-  if (is_linux) {
+  if (is_linux || is_bsd) {
     if (use_aura) {
       deps += [ "//build/linux:fontconfig" ]
       if (use_dbus) {
@@ -3832,7 +3832,7 @@ split_static_library("browser") {
     }
   }
 
-  if (is_linux || is_win || is_mac) {
+  if (is_linux || is_win || is_mac || is_bsd) {
     sources += [
       "payments/chrome_payment_request_delegate.cc",
       "payments/chrome_payment_request_delegate.h",
@@ -3842,7 +3842,7 @@ split_static_library("browser") {
     deps += [ "//components/payments/content" ]
   }
 
-  if (is_linux || is_win) {
+  if (is_linux || is_win || is_bsd) {
     sources += [
       "renderer_context_menu/spelling_options_submenu_observer.cc",
       "renderer_context_menu/spelling_options_submenu_observer.h",
diff --git chrome/browser/about_flags.cc chrome/browser/about_flags.cc
index 268b4d03f653..422d72aba005 100644
--- chrome/browser/about_flags.cc
+++ chrome/browser/about_flags.cc
@@ -799,7 +799,7 @@ const FeatureEntry::FeatureVariation
          arraysize(kSpeculativeResourcePrefetchingLearning), nullptr}};
 
 #if defined(OS_CHROMEOS) || defined(OS_LINUX) || defined(OS_MACOSX) || \
-    defined(OS_WIN)
+    defined(OS_WIN) || defined(OS_BSD)
 const FeatureEntry::FeatureParam kPauseBackgroundTabsMinimalEngagment[] = {
     {pausetabs::kFeatureName, pausetabs::kModeParamMinimal}};
 
@@ -1730,12 +1730,13 @@ const FeatureEntry kFeatureEntries[] = {
      ENABLE_DISABLE_VALUE_TYPE(switches::kEnableTranslateNewUX,
                                switches::kDisableTranslateNewUX)},
 #endif  // OS_MACOSX
-#if defined(OS_LINUX) || defined(OS_WIN) || defined(OS_CHROMEOS)
+#if defined(OS_LINUX) || defined(OS_WIN) || defined(OS_CHROMEOS) || \
+    defined(OS_BSD)
     {"translate-2016q2-ui", flag_descriptions::kTranslate2016q2UiName,
      flag_descriptions::kTranslate2016q2UiDescription,
      kOsCrOS | kOsWin | kOsLinux,
      FEATURE_VALUE_TYPE(translate::kTranslateUI2016Q2)},
-#endif  // OS_LINUX || OS_WIN || OS_CHROMEOS
+#endif  // OS_LINUX || OS_WIN || OS_CHROMEOS || OS_BSD
     {"translate-lang-by-ulp", flag_descriptions::kTranslateLanguageByUlpName,
      flag_descriptions::kTranslateLanguageByUlpDescription, kOsAll,
      FEATURE_VALUE_TYPE(translate::kTranslateLanguageByULP)},
@@ -2238,12 +2239,12 @@ const FeatureEntry kFeatureEntries[] = {
      flag_descriptions::kEnableMaterialDesignExtensionsDescription, kOsDesktop,
      FEATURE_VALUE_TYPE(features::kMaterialDesignExtensions)},
 #endif  // ENABLE_EXTENSIONS
-#if defined(OS_WIN) || defined(OS_LINUX)
+#if defined(OS_WIN) || defined(OS_LINUX) || defined(OS_BSD)
     {"enable-input-ime-api", flag_descriptions::kEnableInputImeApiName,
      flag_descriptions::kEnableInputImeApiDescription, kOsWin | kOsLinux,
      ENABLE_DISABLE_VALUE_TYPE(switches::kEnableInputImeAPI,
                                switches::kDisableInputImeAPI)},
-#endif  // OS_WIN || OS_LINUX
+#endif  // OS_WIN || OS_LINUX || OS_BSD
     {"enable-origin-trials", flag_descriptions::kOriginTrialsName,
      flag_descriptions::kOriginTrialsDescription, kOsAll,
      FEATURE_VALUE_TYPE(features::kOriginTrials)},
@@ -2806,7 +2807,7 @@ const FeatureEntry kFeatureEntries[] = {
      FEATURE_VALUE_TYPE(omnibox::kNewOmniboxAnswerTypes)},
 
 #if defined(OS_CHROMEOS) || defined(OS_LINUX) || defined(OS_MACOSX) || \
-    defined(OS_WIN)
+    defined(OS_WIN) || defined(OS_BSD)
     {"omnibox-entity-suggestions",
      flag_descriptions::kOmniboxEntitySuggestionsName,
      flag_descriptions::kOmniboxEntitySuggestionsDescription, kOsDesktop,
@@ -2815,7 +2816,7 @@ const FeatureEntry kFeatureEntries[] = {
      flag_descriptions::kEnableNewAppMenuIconDescription, kOsDesktop,
      SINGLE_VALUE_TYPE(switches::kEnableNewAppMenuIcon)},
 #endif  // defined(OS_CHROMEOS) || defined(OS_LINUX) || defined(OS_MACOSX) ||
-        // defined(OS_WIN)
+        // defined(OS_WIN) || defined(OS_BSD)
 
 #if defined(OS_ANDROID)
     {"enable-custom-feedback-ui",
@@ -2885,7 +2886,7 @@ const FeatureEntry kFeatureEntries[] = {
 #endif  // OS_ANDROID
 
 #if defined(OS_CHROMEOS) || defined(OS_LINUX) || defined(OS_MACOSX) || \
-    defined(OS_WIN)
+    defined(OS_WIN) || defined(OS_BSD)
     {pausetabs::kFeatureName, flag_descriptions::kPauseBackgroundTabsName,
      flag_descriptions::kPauseBackgroundTabsDescription, kOsDesktop,
      FEATURE_WITH_PARAMS_VALUE_TYPE(pausetabs::kFeature,
diff --git chrome/browser/after_startup_task_utils.cc chrome/browser/after_startup_task_utils.cc
index 1ba1bd552962..afcf2b98c7f6 100644
--- chrome/browser/after_startup_task_utils.cc
+++ chrome/browser/after_startup_task_utils.cc
@@ -99,7 +99,8 @@ void QueueTask(std::unique_ptr<AfterStartupTask> queued_task) {
 
 void SetBrowserStartupIsComplete() {
   DCHECK_CURRENTLY_ON(BrowserThread::UI);
-#if defined(OS_MACOSX) || defined(OS_WIN) || defined(OS_LINUX)
+#if defined(OS_MACOSX) || defined(OS_WIN) || defined(OS_LINUX) || \
+    defined(OS_BSD)
   // CurrentProcessInfo::CreationTime() is not available on all platforms.
   const base::Time process_creation_time =
       base::CurrentProcessInfo::CreationTime();
@@ -107,7 +108,7 @@ void SetBrowserStartupIsComplete() {
     UMA_HISTOGRAM_LONG_TIMES("Startup.AfterStartupTaskDelayedUntilTime",
                              base::Time::Now() - process_creation_time);
   }
-#endif  // defined(OS_MACOSX) || defined(OS_WIN) || defined(OS_LINUX)
+#endif  // defined(OS_MACOSX) || defined(OS_WIN) || defined(OS_LINUX) || defined(OS_BSD)
   UMA_HISTOGRAM_COUNTS_10000("Startup.AfterStartupTaskCount",
                              g_after_startup_tasks.Get().size());
   g_startup_complete_flag.Get().Set();
diff --git chrome/browser/browser_process.h chrome/browser/browser_process.h
index 96d26749b40d..c3a79022ae68 100644
--- chrome/browser/browser_process.h
+++ chrome/browser/browser_process.h
@@ -242,7 +242,8 @@ class BrowserProcess {
   virtual subresource_filter::ContentRulesetService*
   subresource_filter_ruleset_service() = 0;
 
-#if (defined(OS_WIN) || defined(OS_LINUX)) && !defined(OS_CHROMEOS)
+#if (defined(OS_WIN) || defined(OS_LINUX) || defined(OS_BSD)) && \
+    !defined(OS_CHROMEOS)
   // This will start a timer that, if Chrome is in persistent mode, will check
   // whether an update is available, and if that's the case, restart the
   // browser. Note that restart code will strip some of the command line keys
diff --git chrome/browser/browser_process_impl.cc chrome/browser/browser_process_impl.cc
index fca71f7f0bc8..b0c51f2772c9 100644
--- chrome/browser/browser_process_impl.cc
+++ chrome/browser/browser_process_impl.cc
@@ -173,7 +173,8 @@
 #include "chrome/browser/media/webrtc/webrtc_log_uploader.h"
 #endif
 
-#if defined(OS_WIN) || defined(OS_MACOSX) || defined(OS_LINUX)
+#if defined(OS_WIN) || defined(OS_MACOSX) || defined(OS_LINUX) || \
+    defined(OS_BSD)
 #include "chrome/browser/memory/tab_manager.h"
 #endif
 
@@ -185,7 +186,8 @@
 #include "chrome/browser/android/physical_web/physical_web_data_source_android.h"
 #endif
 
-#if (defined(OS_WIN) || defined(OS_LINUX)) && !defined(OS_CHROMEOS)
+#if (defined(OS_WIN) || defined(OS_LINUX) || defined(OS_BSD)) && \
+    !defined(OS_CHROMEOS)
 // How often to check if the persistent instance of Chrome needs to restart
 // to install an update.
 static const int kUpdateCheckIntervalHours = 6;
@@ -809,7 +811,8 @@ gcm::GCMDriver* BrowserProcessImpl::gcm_driver() {
 
 memory::TabManager* BrowserProcessImpl::GetTabManager() {
   DCHECK(CalledOnValidThread());
-#if defined(OS_WIN) || defined(OS_MACOSX) || defined(OS_LINUX)
+#if defined(OS_WIN) || defined(OS_MACOSX) || defined(OS_LINUX) || \
+    defined(OS_BSD)
   if (!tab_manager_.get())
     tab_manager_.reset(new memory::TabManager());
   return tab_manager_.get();
@@ -931,7 +934,8 @@ BrowserProcessImpl::subresource_filter_ruleset_service() {
   return subresource_filter_ruleset_service_.get();
 }
 
-#if (defined(OS_WIN) || defined(OS_LINUX)) && !defined(OS_CHROMEOS)
+#if (defined(OS_WIN) || defined(OS_LINUX) || defined(OS_BSD)) && \
+    !defined(OS_CHROMEOS)
 void BrowserProcessImpl::StartAutoupdateTimer() {
   autoupdate_timer_.Start(FROM_HERE,
       base::TimeDelta::FromHours(kUpdateCheckIntervalHours),
@@ -1121,7 +1125,7 @@ void BrowserProcessImpl::PreMainMessageLoopRun() {
   plugins_resource_service_->Init();
 #endif  // BUILDFLAG(ENABLE_PLUGINS)
 
-#if !defined(OS_ANDROID)
+#if !defined(OS_ANDROID) && !defined(OS_BSD)
   storage_monitor::StorageMonitor::Create();
 #endif
 
@@ -1366,7 +1370,8 @@ void BrowserProcessImpl::Unpin() {
 }
 
 // Mac is currently not supported.
-#if (defined(OS_WIN) || defined(OS_LINUX)) && !defined(OS_CHROMEOS)
+#if (defined(OS_WIN) || defined(OS_LINUX) || defined(OS_BSD)) && \
+    !defined(OS_CHROMEOS)
 
 bool BrowserProcessImpl::CanAutorestartForUpdate() const {
   // Check if browser is in the background and if it needs to be restarted to
@@ -1428,4 +1433,4 @@ void BrowserProcessImpl::OnAutoupdateTimer() {
   }
 }
 
-#endif  // (defined(OS_WIN) || defined(OS_LINUX)) && !defined(OS_CHROMEOS)
+#endif  // (defined(OS_WIN) || defined(OS_LINUX) || defined(OS_BSD)) && !defined(OS_CHROMEOS)
diff --git chrome/browser/browser_process_impl.h chrome/browser/browser_process_impl.h
index ac66b067e7ea..3ee8e72f3da0 100644
--- chrome/browser/browser_process_impl.h
+++ chrome/browser/browser_process_impl.h
@@ -137,7 +137,8 @@ class BrowserProcessImpl : public BrowserProcess,
   subresource_filter::ContentRulesetService*
   subresource_filter_ruleset_service() override;
 
-#if (defined(OS_WIN) || defined(OS_LINUX)) && !defined(OS_CHROMEOS)
+#if (defined(OS_WIN) || defined(OS_LINUX) || defined(OS_BSD)) && \
+    !defined(OS_CHROMEOS)
   void StartAutoupdateTimer() override;
 #endif
 
@@ -296,7 +297,8 @@ class BrowserProcessImpl : public BrowserProcess,
   std::unique_ptr<ChromeResourceDispatcherHostDelegate>
       resource_dispatcher_host_delegate_;
 
-#if (defined(OS_WIN) || defined(OS_LINUX)) && !defined(OS_CHROMEOS)
+#if (defined(OS_WIN) || defined(OS_LINUX) || defined(OS_BSD)) && \
+    !defined(OS_CHROMEOS)
   base::RepeatingTimer autoupdate_timer_;
 
   // Gets called by autoupdate timer to see if browser needs restart and can be
@@ -304,7 +306,7 @@ class BrowserProcessImpl : public BrowserProcess,
   void OnAutoupdateTimer();
   bool CanAutorestartForUpdate() const;
   void RestartBackgroundInstance();
-#endif  // defined(OS_WIN) || defined(OS_LINUX) && !defined(OS_CHROMEOS)
+#endif  // (defined(OS_WIN) || defined(OS_LINUX) || defined(OS_BSD)) && !defined(OS_CHROMEOS)
 
   // component updater is normally not used under ChromeOS due
   // to concerns over integrity of data shared between profiles,
@@ -343,7 +345,8 @@ class BrowserProcessImpl : public BrowserProcess,
 
   std::unique_ptr<ChromeDeviceClient> device_client_;
 
-#if defined(OS_WIN) || defined(OS_MACOSX) || defined(OS_LINUX)
+#if defined(OS_WIN) || defined(OS_MACOSX) || defined(OS_LINUX) || \
+    defined(OS_BSD)
   // Any change to this #ifdef must be reflected as well in
   // chrome/browser/memory/tab_manager_browsertest.cc
   std::unique_ptr<memory::TabManager> tab_manager_;
diff --git chrome/browser/chrome_browser_main.cc chrome/browser/chrome_browser_main.cc
index f786c546e9a5..85b805ed8be3 100644
--- chrome/browser/chrome_browser_main.cc
+++ chrome/browser/chrome_browser_main.cc
@@ -185,9 +185,9 @@
 #include "chrome/browser/feedback/feedback_profile_observer.h"
 #endif  // defined(OS_ANDROID)
 
-#if defined(OS_LINUX) && !defined(OS_CHROMEOS)
+#if (defined(OS_LINUX) && !defined(OS_CHROMEOS))  || defined(OS_BSD)
 #include "chrome/browser/first_run/upgrade_util_linux.h"
-#endif  // defined(OS_LINUX) && !defined(OS_CHROMEOS)
+#endif  // (defined(OS_LINUX) && !defined(OS_CHROMEOS)) || defined(OS_BSD)
 
 #if defined(OS_CHROMEOS)
 #include "chrome/browser/chromeos/settings/cros_settings.h"
@@ -275,7 +275,7 @@
 #endif
 
 #if defined(OS_WIN) || defined(OS_MACOSX) || \
-    (defined(OS_LINUX) && !defined(OS_CHROMEOS))
+    (defined(OS_LINUX) && !defined(OS_CHROMEOS)) || defined(OS_BSD)
 #include "chrome/browser/metrics/desktop_session_duration/desktop_session_duration_tracker.h"
 #endif
 
@@ -476,12 +476,12 @@ void RegisterComponentsForUpdate() {
   else
     RegisterRecoveryComponent(cus, g_browser_process->local_state());
 
-#if !defined(OS_ANDROID)
+#if !defined(OS_ANDROID) && !defined(OS_BSD)
   RegisterPepperFlashComponent(cus);
 #if !defined(OS_CHROMEOS)
   RegisterWidevineCdmComponent(cus);
 #endif  // !defined(OS_CHROMEOS)
-#endif  // !defined(OS_ANDROID)
+#endif  // !defined(OS_ANDROID) && !defined(OS_BSD)
 
 #if !defined(DISABLE_NACL) && !defined(OS_ANDROID)
 #if defined(OS_CHROMEOS)
@@ -762,7 +762,7 @@ void ChromeBrowserMainParts::SetupFieldTrials() {
   field_trial_synchronizer_ = new FieldTrialSynchronizer();
 
 #if defined(OS_WIN) || defined(OS_MACOSX) || \
-    (defined(OS_LINUX) && !defined(OS_CHROMEOS))
+    (defined(OS_LINUX) && !defined(OS_CHROMEOS)) || defined(OS_BSD)
   metrics::DesktopSessionDurationTracker::Initialize();
 #endif
   metrics::RendererUptimeTracker::Initialize();
@@ -1365,7 +1365,8 @@ void ChromeBrowserMainParts::PreBrowserStart() {
 
 // Start the tab manager here so that we give the most amount of time for the
 // other services to start up before we start adjusting the oom priority.
-#if defined(OS_WIN) || defined(OS_MACOSX) || defined(OS_LINUX)
+#if defined(OS_WIN) || defined(OS_MACOSX) || defined(OS_LINUX) || \
+    defined(OS_BSD)
   g_browser_process->GetTabManager()->Start();
 #endif
 
@@ -1862,13 +1863,13 @@ int ChromeBrowserMainParts::PreMainMessageLoopRunImpl() {
     browser_process_->StartAutoupdateTimer();
 #endif  // defined(OS_WIN) || (defined(OS_LINUX) && !defined(OS_CHROMEOS))
 
-#if defined(OS_LINUX) && !defined(OS_CHROMEOS)
+#if defined(OS_LINUX) && !defined(OS_CHROMEOS) ||  defined(OS_BSD)
     // On Linux, the running exe will be updated if an upgrade becomes
     // available while the browser is running.  We need to save the last
     // modified time of the exe, so we can compare to determine if there is
     // an upgrade while the browser is kept alive by a persistent extension.
     upgrade_util::SaveLastModifiedTimeOfExe();
-#endif  // defined(OS_LINUX) && !defined(OS_CHROMEOS)
+#endif  // defined(OS_LINUX) && !defined(OS_CHROMEOS) && !defined(OS_BSD)
 
     // Record now as the last successful chrome start.
     GoogleUpdateSettings::SetLastRunTime();
diff --git chrome/browser/chrome_browser_main_linux.cc chrome/browser/chrome_browser_main_linux.cc
index 1fc00fa7e9ae..0bb169913305 100644
--- chrome/browser/chrome_browser_main_linux.cc
+++ chrome/browser/chrome_browser_main_linux.cc
@@ -13,10 +13,14 @@
 #include "build/build_config.h"
 #include "chrome/browser/browser_process.h"
 #include "chrome/grit/chromium_strings.h"
+#if !defined(OS_DRAGONFLY)
 #include "components/crash/content/app/breakpad_linux.h"
+#endif
 #include "components/metrics/metrics_service.h"
+#if !defined(OS_BSD)
 #include "device/bluetooth/dbus/bluez_dbus_manager.h"
 #include "device/bluetooth/dbus/dbus_thread_manager_linux.h"
+#endif
 #include "media/audio/audio_manager.h"
 #include "ui/base/l10n/l10n_util.h"
 
@@ -46,7 +50,7 @@ void ChromeBrowserMainPartsLinux::ToolkitInitialized() {
 }
 
 void ChromeBrowserMainPartsLinux::PreProfileInit() {
-#if !defined(OS_CHROMEOS)
+#if !defined(OS_CHROMEOS) && !defined(OS_BSD)
   // Needs to be called after we have chrome::DIR_USER_DATA and
   // g_browser_process.  This happens in PreCreateThreads.
   // base::GetLinuxDistro() will initialize its value if needed.
@@ -77,12 +81,14 @@ void ChromeBrowserMainPartsLinux::PreProfileInit() {
 void ChromeBrowserMainPartsLinux::PostProfileInit() {
   ChromeBrowserMainPartsPosix::PostProfileInit();
 
+#if !defined(OS_DRAGONFLY)
   g_browser_process->metrics_service()->RecordBreakpadRegistration(
       breakpad::IsCrashReporterEnabled());
+#endif
 }
 
 void ChromeBrowserMainPartsLinux::PostMainMessageLoopStart() {
-#if !defined(OS_CHROMEOS)
+#if !defined(OS_CHROMEOS) && !defined(OS_BSD)
   bluez::DBusThreadManagerLinux::Initialize();
   bluez::BluezDBusManager::Initialize(
       bluez::DBusThreadManagerLinux::Get()->GetSystemBus(), false);
@@ -92,7 +98,7 @@ void ChromeBrowserMainPartsLinux::PostMainMessageLoopStart() {
 }
 
 void ChromeBrowserMainPartsLinux::PostDestroyThreads() {
-#if !defined(OS_CHROMEOS)
+#if !defined(OS_CHROMEOS) && !defined(OS_BSD)
   bluez::BluezDBusManager::Shutdown();
   bluez::DBusThreadManagerLinux::Shutdown();
 #endif
diff --git chrome/browser/chrome_content_browser_client.cc chrome/browser/chrome_content_browser_client.cc
index f0e244e722a5..9ee99e00624c 100644
--- chrome/browser/chrome_content_browser_client.cc
+++ chrome/browser/chrome_content_browser_client.cc
@@ -252,7 +252,7 @@
 #include "components/user_manager/user_manager.h"
 #include "mash/public/interfaces/launchable.mojom.h"
 #include "services/service_manager/public/interfaces/interface_provider_spec.mojom.h"
-#elif defined(OS_LINUX)
+#elif defined(OS_LINUX) || defined(OS_BSD)
 #include "chrome/browser/chrome_browser_main_linux.h"
 #elif defined(OS_ANDROID)
 #include "chrome/browser/android/app_hooks.h"
@@ -269,11 +269,11 @@
 #include "chrome/browser/payments/payment_request_factory.h"
 #endif
 
-#if defined(OS_LINUX) || defined(OS_WIN)
+#if defined(OS_LINUX) || defined(OS_WIN) || defined(OS_BSD)
 #include "chrome/browser/webshare/share_service_impl.h"
 #endif
 
-#if defined(OS_POSIX) && !defined(OS_MACOSX)
+#if defined(OS_POSIX) && !defined(OS_MACOSX) && !defined(OS_DRAGONFLY)
 #include "base/debug/leak_annotations.h"
 #include "components/crash/content/app/breakpad_linux.h"
 #include "components/crash/content/browser/crash_handler_host_linux.h"
@@ -297,7 +297,7 @@
 #include "chrome/browser/ui/views/chrome_browser_main_extra_parts_views.h"
 #endif
 
-#if defined(OS_LINUX) && !defined(OS_CHROMEOS)
+#if (defined(OS_LINUX) && !defined(OS_CHROMEOS)) || defined(OS_BSD)
 #include "chrome/browser/ui/views/chrome_browser_main_extra_parts_views_linux.h"
 #endif
 
@@ -723,7 +723,8 @@ bool CertMatchesFilter(const net::X509Certificate& cert,
   return false;
 }
 
-#if defined(OS_POSIX) && !defined(OS_ANDROID) && !defined(OS_MACOSX)
+#if defined(OS_POSIX) && !defined(OS_ANDROID) && !defined(OS_MACOSX) && \
+    !defined(OS_DRAGONFLY)
 breakpad::CrashHandlerHostLinux* CreateCrashHandlerHost(
     const std::string& process_type) {
   base::FilePath dumps_path;
@@ -773,7 +774,7 @@ int GetCrashSignalFD(const base::CommandLine& command_line) {
 
   return -1;
 }
-#endif  // defined(OS_POSIX) && !defined(OS_ANDROID) && !defined(OS_MACOSX)
+#endif  // defined(OS_POSIX) && !defined(OS_ANDROID) && !defined(OS_MACOSX) && !defined(OS_DRAGONFLY)
 
 void SetApplicationLocaleOnIOThread(const std::string& locale) {
   DCHECK_CURRENTLY_ON(BrowserThread::IO);
@@ -1062,7 +1063,7 @@ content::BrowserMainParts* ChromeContentBrowserClient::CreateBrowserMainParts(
   main_parts = new ChromeBrowserMainPartsMac(parameters);
 #elif defined(OS_CHROMEOS)
   main_parts = new chromeos::ChromeBrowserMainPartsChromeos(parameters);
-#elif defined(OS_LINUX)
+#elif defined(OS_LINUX) || defined(OS_BSD)
   main_parts = new ChromeBrowserMainPartsLinux(parameters);
 #elif defined(OS_ANDROID)
   main_parts = new ChromeBrowserMainPartsAndroid(parameters);
@@ -1078,7 +1079,7 @@ content::BrowserMainParts* ChromeContentBrowserClient::CreateBrowserMainParts(
   // Construct additional browser parts. Stages are called in the order in
   // which they are added.
 #if defined(TOOLKIT_VIEWS)
-#if defined(OS_LINUX) && !defined(OS_CHROMEOS) && !defined(USE_OZONE)
+#if ((defined(OS_LINUX) && !defined(OS_CHROMEOS)) || defined(OS_BSD)) && !defined(USE_OZONE)
   main_parts->AddParts(new ChromeBrowserMainExtraPartsViewsLinux());
 #else
   main_parts->AddParts(new ChromeBrowserMainExtraPartsViews());
@@ -1728,7 +1729,7 @@ void ChromeContentBrowserClient::AppendExtraCommandLineSwitches(
     command_line->AppendSwitchASCII(switches::kMetricsClientID,
                                     client_info->client_id);
   }
-#elif defined(OS_POSIX)
+#elif defined(OS_POSIX) && !defined(OS_DRAGONFLY)
   if (breakpad::IsCrashReporterEnabled()) {
     std::string switch_value;
     std::unique_ptr<metrics::ClientInfo> client_info =
@@ -2981,7 +2982,7 @@ void ChromeContentBrowserClient::GetAdditionalMappedFilesForChildProcess(
   base::FilePath app_data_path;
   PathService::Get(base::DIR_ANDROID_APP_DATA, &app_data_path);
   DCHECK(!app_data_path.empty());
-#else
+#elif !defined(OS_DRAGONFLY)
   int crash_signal_fd = GetCrashSignalFD(command_line);
   if (crash_signal_fd >= 0) {
     mappings->Share(kCrashDumpSignal, crash_signal_fd);
@@ -3200,7 +3201,7 @@ void ChromeContentBrowserClient::ExposeInterfacesToFrame(
   }
 #endif
 
-#if defined(OS_LINUX) || defined(OS_WIN)
+#if defined(OS_LINUX) || defined(OS_WIN) || defined(OS_BSD)
   if (!ChromeOriginTrialPolicy().IsFeatureDisabled("WebShare")) {
     registry->AddInterface(base::Bind(&ShareServiceImpl::Create));
   }
diff --git chrome/browser/defaults.cc chrome/browser/defaults.cc
index 2aec41babc91..9f4faf2f7c77 100644
--- chrome/browser/defaults.cc
+++ chrome/browser/defaults.cc
@@ -44,7 +44,7 @@ const bool kSyncAutoStarts = true;
 const bool kSyncAutoStarts = false;
 #endif
 
-#if defined(OS_LINUX) && !defined(OS_CHROMEOS)
+#if (defined(OS_LINUX) && !defined(OS_CHROMEOS)) || defined(OS_BSD)
 const bool kScrollEventChangesTab = true;
 #else
 const bool kScrollEventChangesTab = false;
diff --git chrome/browser/devtools/devtools_eye_dropper.cc chrome/browser/devtools/devtools_eye_dropper.cc
index bb38173b2380..14c2682bf744 100644
--- chrome/browser/devtools/devtools_eye_dropper.cc
+++ chrome/browser/devtools/devtools_eye_dropper.cc
@@ -149,7 +149,7 @@ void DevToolsEyeDropper::UpdateCursor() {
 // magnified projection only with centered hotspot.
 // Mac Retina requires cursor to be > 120px in order to render smoothly.
 
-#if defined(OS_LINUX)
+#if defined(OS_LINUX) || defined(OS_BSD)
   const float kCursorSize = 63;
   const float kDiameter = 63;
   const float kHotspotOffset = 32;
diff --git chrome/browser/download/download_commands.cc chrome/browser/download/download_commands.cc
index 23fc29385a7a..ea2b1881dfd1 100644
--- chrome/browser/download/download_commands.cc
+++ chrome/browser/download/download_commands.cc
@@ -218,7 +218,8 @@ bool DownloadCommands::IsCommandChecked(Command command) const {
       return download_item_->GetOpenWhenComplete() ||
              download_crx_util::IsExtensionDownload(*download_item_);
     case ALWAYS_OPEN_TYPE:
-#if defined(OS_WIN) || defined(OS_LINUX) || defined(OS_MACOSX)
+#if defined(OS_WIN) || defined(OS_LINUX) || defined(OS_MACOSX) || \
+    defined(OS_BSD)
       if (CanOpenPdfInSystemViewer()) {
         DownloadPrefs* prefs = DownloadPrefs::FromBrowserContext(
             download_item_->GetBrowserContext());
@@ -262,7 +263,8 @@ void DownloadCommands::ExecuteCommand(Command command) {
       bool is_checked = IsCommandChecked(ALWAYS_OPEN_TYPE);
       DownloadPrefs* prefs = DownloadPrefs::FromBrowserContext(
           download_item_->GetBrowserContext());
-#if defined(OS_WIN) || defined(OS_LINUX) || defined(OS_MACOSX)
+#if defined(OS_WIN) || defined(OS_LINUX) || defined(OS_MACOSX) || \
+    defined(OS_BSD)
       if (CanOpenPdfInSystemViewer()) {
         prefs->SetShouldOpenPdfInSystemReader(!is_checked);
         DownloadItemModel(download_item_)
@@ -375,7 +377,8 @@ Browser* DownloadCommands::GetBrowser() const {
   return browser_displayer.browser();
 }
 
-#if defined(OS_WIN) || defined(OS_MACOSX) || defined(OS_LINUX)
+#if defined(OS_WIN) || defined(OS_MACOSX) || defined(OS_LINUX) || \
+    defined(OS_BSD)
 bool DownloadCommands::IsDownloadPdf() const {
   base::FilePath path = download_item_->GetTargetFilePath();
   return path.MatchesExtension(FILE_PATH_LITERAL(".pdf"));
@@ -392,7 +395,7 @@ bool DownloadCommands::CanOpenPdfInSystemViewer() const {
   return IsDownloadPdf() &&
          (IsAdobeReaderDefaultPDFViewer() ? is_adobe_pdf_reader_up_to_date
                                           : true);
-#elif defined(OS_MACOSX) || defined(OS_LINUX)
+#elif defined(OS_MACOSX) || defined(OS_LINUX) || defined(OS_BSD)
   return IsDownloadPdf();
 #endif
 }
diff --git chrome/browser/download/download_commands.h chrome/browser/download/download_commands.h
index 06fb554da24b..dbae41e52f83 100644
--- chrome/browser/download/download_commands.h
+++ chrome/browser/download/download_commands.h
@@ -43,7 +43,7 @@ class DownloadCommands {
   void ExecuteCommand(Command command);
 
 #if defined(OS_WIN) || defined(OS_LINUX) || \
-    (defined(OS_MACOSX) && !defined(OS_IOS))
+    (defined(OS_MACOSX) && !defined(OS_IOS)) || defined(OS_BSD)
   bool IsDownloadPdf() const;
   bool CanOpenPdfInSystemViewer() const;
 #endif
diff --git chrome/browser/download/download_prefs.cc chrome/browser/download/download_prefs.cc
index 9a3b2dea14ab..c864d5c18de1 100644
--- chrome/browser/download/download_prefs.cc
+++ chrome/browser/download/download_prefs.cc
@@ -54,7 +54,7 @@ namespace {
 // Consider downloads 'dangerous' if they go to the home directory on Linux and
 // to the desktop on any platform.
 bool DownloadPathIsDangerous(const base::FilePath& download_path) {
-#if defined(OS_LINUX)
+#if defined(OS_LINUX) || defined(OS_BSD)
   base::FilePath home_dir = base::GetHomeDir();
   if (download_path == home_dir) {
     return true;
@@ -134,7 +134,8 @@ DownloadPrefs::DownloadPrefs(Profile* profile) : profile_(profile) {
                  GetDefaultDownloadDirectoryForProfile()));
 #endif  // defined(OS_CHROMEOS)
 
-#if defined(OS_WIN) || defined(OS_LINUX) || defined(OS_MACOSX)
+#if defined(OS_WIN) || defined(OS_LINUX) || defined(OS_MACOSX) || \
+    defined(OS_BSD)
   should_open_pdf_in_system_reader_ =
       prefs->GetBoolean(prefs::kOpenPdfDownloadInSystemReader);
 #endif
@@ -211,7 +212,8 @@ void DownloadPrefs::RegisterProfilePrefs(
                                  default_download_path);
   registry->RegisterFilePathPref(prefs::kSaveFileDefaultDirectory,
                                  default_download_path);
-#if defined(OS_WIN) || defined(OS_LINUX) || defined(OS_MACOSX)
+#if defined(OS_WIN) || defined(OS_LINUX) || defined(OS_MACOSX) || \
+    defined(OS_BSD)
   registry->RegisterBooleanPref(prefs::kOpenPdfDownloadInSystemReader, false);
 #endif
 }
@@ -288,7 +290,8 @@ bool DownloadPrefs::IsDownloadPathManaged() const {
 }
 
 bool DownloadPrefs::IsAutoOpenUsed() const {
-#if defined(OS_WIN) || defined(OS_LINUX) || defined(OS_MACOSX)
+#if defined(OS_WIN) || defined(OS_LINUX) || defined(OS_MACOSX) || \
+    defined(OS_BSD)
   if (ShouldOpenPdfInSystemReader())
     return true;
 #endif
@@ -302,7 +305,8 @@ bool DownloadPrefs::IsAutoOpenEnabledBasedOnExtension(
     return false;
   DCHECK(extension[0] == base::FilePath::kExtensionSeparator);
   extension.erase(0, 1);
-#if defined(OS_WIN) || defined(OS_LINUX) || defined(OS_MACOSX)
+#if defined(OS_WIN) || defined(OS_LINUX) || defined(OS_MACOSX) || \
+    defined(OS_BSD)
   if (extension == FILE_PATH_LITERAL("pdf") && ShouldOpenPdfInSystemReader())
     return true;
 #endif
@@ -336,7 +340,8 @@ void DownloadPrefs::DisableAutoOpenBasedOnExtension(
   SaveAutoOpenState();
 }
 
-#if defined(OS_WIN) || defined(OS_LINUX) || defined(OS_MACOSX)
+#if defined(OS_WIN) || defined(OS_LINUX) || defined(OS_MACOSX) || \
+    defined(OS_BSD)
 void DownloadPrefs::SetShouldOpenPdfInSystemReader(bool should_open) {
   if (should_open_pdf_in_system_reader_ == should_open)
     return;
@@ -357,7 +362,8 @@ bool DownloadPrefs::ShouldOpenPdfInSystemReader() const {
 #endif
 
 void DownloadPrefs::ResetAutoOpen() {
-#if defined(OS_WIN) || defined(OS_LINUX) || defined(OS_MACOSX)
+#if defined(OS_WIN) || defined(OS_LINUX) || defined(OS_MACOSX) || \
+    defined(OS_BSD)
   SetShouldOpenPdfInSystemReader(false);
 #endif
   auto_open_.clear();
diff --git chrome/browser/download/download_prefs.h chrome/browser/download/download_prefs.h
index d0c8cfaa6a0a..22fc22d996e7 100644
--- chrome/browser/download/download_prefs.h
+++ chrome/browser/download/download_prefs.h
@@ -78,7 +78,8 @@ class DownloadPrefs {
   // Disables auto-open based on file extension.
   void DisableAutoOpenBasedOnExtension(const base::FilePath& file_name);
 
-#if defined(OS_WIN) || defined(OS_LINUX) || defined(OS_MACOSX)
+#if defined(OS_WIN) || defined(OS_LINUX) || defined(OS_MACOSX) || \
+    defined(OS_BSD)
   // Store the user preference to disk. If |should_open| is true, also disable
   // the built-in PDF plugin. If |should_open| is false, enable the PDF plugin.
   void SetShouldOpenPdfInSystemReader(bool should_open);
@@ -109,7 +110,8 @@ class DownloadPrefs {
                    AutoOpenCompareFunctor> AutoOpenSet;
   AutoOpenSet auto_open_;
 
-#if defined(OS_WIN) || defined(OS_LINUX) || defined(OS_MACOSX)
+#if defined(OS_WIN) || defined(OS_LINUX) || defined(OS_MACOSX) || \
+    defined(OS_BSD)
   bool should_open_pdf_in_system_reader_;
 #endif
 
diff --git chrome/browser/download/download_shelf_context_menu.cc chrome/browser/download/download_shelf_context_menu.cc
index 93063b2bc169..5c3aea1fd0a8 100644
--- chrome/browser/download/download_shelf_context_menu.cc
+++ chrome/browser/download/download_shelf_context_menu.cc
@@ -127,7 +127,7 @@ base::string16 DownloadShelfContextMenu::GetLabelForCommandId(
                    : IDS_DOWNLOAD_MENU_PLATFORM_OPEN_ALWAYS;
           break;
         }
-#elif defined(OS_MACOSX) || defined(OS_LINUX)
+#elif defined(OS_MACOSX) || defined(OS_LINUX) || defined(OS_BSD)
         if (can_open_pdf_in_system_viewer) {
           id = IDS_DOWNLOAD_MENU_PLATFORM_OPEN_ALWAYS;
           break;
diff --git chrome/browser/extensions/BUILD.gn chrome/browser/extensions/BUILD.gn
index e63a44b7a63b..bf58c26f92f6 100644
--- chrome/browser/extensions/BUILD.gn
+++ chrome/browser/extensions/BUILD.gn
@@ -1018,6 +1018,12 @@ static_library("extensions") {
     ]
   }
 
+  if (is_bsd) {
+    sources -= [
+      "api/image_writer_private/removable_storage_provider_linux.cc",
+    ]
+  }
+
   # chromeos uses its own global_shortcut_listener, _x11 is not necessary.
   if (is_chromeos || !use_x11) {
     sources -= [
@@ -1033,7 +1039,7 @@ static_library("extensions") {
     sources -= [ "global_shortcut_listener_ozone.cc" ]
   }
 
-  if (is_linux) {
+  if (is_linux || is_bsd) {
     deps += [ "//build/linux:fontconfig" ]
 
     if (use_dbus) {
@@ -1095,7 +1101,7 @@ static_library("extensions") {
     ]
   }
 
-  if (is_win || (is_linux && !is_chromeos)) {
+  if (is_win || (is_linux && !is_chromeos) || is_bsd) {
     sources += [
       "api/input_ime/input_ime_api.cc",
       "api/input_ime/input_ime_api.h",
diff --git chrome/browser/extensions/api/image_writer_private/removable_storage_provider.cc chrome/browser/extensions/api/image_writer_private/removable_storage_provider.cc
index ab396ed428d3..4a8c3e907d5f 100644
--- chrome/browser/extensions/api/image_writer_private/removable_storage_provider.cc
+++ chrome/browser/extensions/api/image_writer_private/removable_storage_provider.cc
@@ -26,12 +26,14 @@ void RemovableStorageProvider::GetAllDevices(DeviceListReadyCallback callback) {
 
   scoped_refptr<StorageDeviceList> device_list(new StorageDeviceList);
 
+#if !defined(OS_BSD)
   // We need to do some file i/o to get the device block size
   content::BrowserThread::PostTaskAndReplyWithResult(
       content::BrowserThread::FILE,
       FROM_HERE,
       base::Bind(PopulateDeviceList, device_list),
       base::Bind(callback, device_list));
+#endif
 }
 
 void RemovableStorageProvider::SetDeviceListForTesting(
diff --git chrome/browser/extensions/api/input_ime/input_ime_api.h chrome/browser/extensions/api/input_ime/input_ime_api.h
index 21ed2f8294b5..cab4dcf8b9ad 100644
--- chrome/browser/extensions/api/input_ime/input_ime_api.h
+++ chrome/browser/extensions/api/input_ime/input_ime_api.h
@@ -28,7 +28,7 @@
 
 #if defined(OS_CHROMEOS)
 #include "chrome/browser/extensions/api/input_ime/input_ime_api_chromeos.h"
-#elif defined(OS_LINUX) || defined(OS_WIN)
+#elif defined(OS_LINUX) || defined(OS_WIN) || defined(OS_BSD)
 #include "chrome/browser/extensions/api/input_ime/input_ime_api_nonchromeos.h"
 #endif  // defined(OS_CHROMEOS)
 
diff --git chrome/browser/extensions/api/messaging/message_service.cc chrome/browser/extensions/api/messaging/message_service.cc
index 801f3b6f7a52..cc94d0e4081c 100644
--- chrome/browser/extensions/api/messaging/message_service.cc
+++ chrome/browser/extensions/api/messaging/message_service.cc
@@ -105,7 +105,8 @@ MessageService::PolicyPermission MessageService::IsNativeMessagingHostAllowed(
 
 const char kReceivingEndDoesntExistError[] =
     "Could not establish connection. Receiving end does not exist.";
-#if defined(OS_WIN) || defined(OS_MACOSX) || defined(OS_LINUX)
+#if defined(OS_WIN) || defined(OS_MACOSX) || defined(OS_LINUX) || \
+    defined(OS_BSD)
 const char kMissingPermissionError[] =
     "Access to native messaging requires nativeMessaging permission.";
 const char kProhibitedByPoliciesError[] =
@@ -383,7 +384,8 @@ void MessageService::OpenChannelToNativeApp(
   if (!source)
     return;
 
-#if defined(OS_WIN) || defined(OS_MACOSX) || defined(OS_LINUX)
+#if defined(OS_WIN) || defined(OS_MACOSX) || defined(OS_LINUX) || \
+    defined(OS_BSD)
   content::WebContents* web_contents =
       content::WebContents::FromRenderFrameHost(source);
   ExtensionWebContentsObserver* extension_web_contents_observer =
@@ -446,12 +448,12 @@ void MessageService::OpenChannelToNativeApp(
   channel->opener->IncrementLazyKeepaliveCount();
 
   AddChannel(std::move(channel), receiver_port_id);
-#else  // !(defined(OS_WIN) || defined(OS_MACOSX) || defined(OS_LINUX))
+#else  // !(defined(OS_WIN) || defined(OS_MACOSX) || defined(OS_LINUX) || defined(OS_BSD))
   const char kNativeMessagingNotSupportedError[] =
       "Native Messaging is not supported on this platform.";
   DispatchOnDisconnect(
       source, receiver_port_id, kNativeMessagingNotSupportedError);
-#endif  // !(defined(OS_WIN) || defined(OS_MACOSX) || defined(OS_LINUX))
+#endif  // !(defined(OS_WIN) || defined(OS_MACOSX) || defined(OS_LINUX) || defined(OS_BSD))
 }
 
 void MessageService::OpenChannelToTab(int source_process_id,
diff --git chrome/browser/extensions/api/music_manager_private/device_id_linux.cc chrome/browser/extensions/api/music_manager_private/device_id_linux.cc
index 0484c0a49dab..d77cace84c57 100644
--- chrome/browser/extensions/api/music_manager_private/device_id_linux.cc
+++ chrome/browser/extensions/api/music_manager_private/device_id_linux.cc
@@ -4,6 +4,10 @@
 
 #include "chrome/browser/extensions/api/music_manager_private/device_id.h"
 
+#if defined(OS_FREEBSD) || defined(OS_DRAGONFLY)
+#include <sys/types.h>
+#include <net/if_dl.h>
+#endif
 #include <ifaddrs.h>
 #include <net/if.h>
 #include <stddef.h>
@@ -105,9 +109,31 @@ class MacAddressProcessor {
                         const char* const prefixes[],
                         size_t prefixes_count) {
     const int MAC_LENGTH = 6;
+#if defined(OS_FREEBSD) || defined(OS_DRAGONFLY)
+    struct ifaddrs *ifap, *ifinfo;
+#else
     struct ifreq ifinfo;
+#endif
 
     memset(&ifinfo, 0, sizeof(ifinfo));
+#if defined(OS_FREEBSD) || defined(OS_DRAGONFLY)
+    int result = getifaddrs(&ifap);
+    if (result != 0)
+      return true;
+    result = 1; // no MAC found yet
+    for (ifinfo = ifap; ifinfo != NULL; ifinfo = ifinfo->ifa_next) {
+      struct sockaddr* sa = ifinfo->ifa_addr;
+      if (sa->sa_family == AF_LINK &&
+        !strncmp(ifinfo->ifa_name, ifaddr->ifa_name,
+        sizeof(ifinfo->ifa_name) - 1)) {
+          result = 0;
+         break;
+      }
+    }
+
+    char mac_address[6];
+    strncpy(mac_address, (const char*)LLADDR((struct sockaddr_dl*)ifinfo->ifa_addr), sizeof(mac_address));
+#else
     strncpy(ifinfo.ifr_name, ifaddr->ifa_name, sizeof(ifinfo.ifr_name) - 1);
 
     int sd = socket(AF_INET, SOCK_DGRAM, 0);
@@ -119,11 +145,17 @@ class MacAddressProcessor {
 
     const char* mac_address =
         static_cast<const char*>(ifinfo.ifr_hwaddr.sa_data);
+#endif
     if (!is_valid_mac_address_.Run(mac_address, MAC_LENGTH))
       return true;
 
+#if defined(OS_FREEBSD) || defined(OS_DRAGONFLY)
+    if (!IsValidPrefix(ifinfo->ifa_name, prefixes, prefixes_count))
+      return true;
+#else
     if (!IsValidPrefix(ifinfo.ifr_name, prefixes, prefixes_count))
       return true;
+#endif
 
     // Got one!
     found_mac_address_ =
diff --git chrome/browser/extensions/api/runtime/chrome_runtime_api_delegate.cc chrome/browser/extensions/api/runtime/chrome_runtime_api_delegate.cc
index d4c0b762a461..2679941acb6b 100644
--- chrome/browser/extensions/api/runtime/chrome_runtime_api_delegate.cc
+++ chrome/browser/extensions/api/runtime/chrome_runtime_api_delegate.cc
@@ -270,6 +270,8 @@ bool ChromeRuntimeAPIDelegate::GetPlatformInfo(PlatformInfo* info) {
     info->os = extensions::api::runtime::PLATFORM_OS_LINUX;
   } else if (strcmp(os, "openbsd") == 0) {
     info->os = extensions::api::runtime::PLATFORM_OS_OPENBSD;
+  } else if (strcmp(os, "dragonfly") == 0) {
+    info->os = extensions::api::runtime::PLATFORM_OS_DRAGONFLY;
   } else {
     NOTREACHED();
     return false;
diff --git chrome/browser/extensions/api/settings_private/prefs_util.cc chrome/browser/extensions/api/settings_private/prefs_util.cc
index 2c9b357f4048..539de7f08e1a 100644
--- chrome/browser/extensions/api/settings_private/prefs_util.cc
+++ chrome/browser/extensions/api/settings_private/prefs_util.cc
@@ -85,7 +85,7 @@ const PrefsUtil::TypedPrefMap& PrefsUtil::GetWhitelistedKeys() {
       settings_private::PrefType::PREF_TYPE_BOOLEAN;
   (*s_whitelist)[bookmarks::prefs::kShowBookmarkBar] =
       settings_private::PrefType::PREF_TYPE_BOOLEAN;
-#if defined(OS_LINUX) && !defined(OS_CHROMEOS)
+#if (defined(OS_LINUX) && !defined(OS_CHROMEOS)) || defined(OS_BSD)
   (*s_whitelist)[::prefs::kUseCustomChromeFrame] =
       settings_private::PrefType::PREF_TYPE_BOOLEAN;
 #endif
@@ -95,7 +95,7 @@ const PrefsUtil::TypedPrefMap& PrefsUtil::GetWhitelistedKeys() {
   // Appearance settings.
   (*s_whitelist)[::prefs::kCurrentThemeID] =
       settings_private::PrefType::PREF_TYPE_STRING;
-#if defined(OS_LINUX) && !defined(OS_CHROMEOS)
+#if (defined(OS_LINUX) && !defined(OS_CHROMEOS)) || defined(OS_BSD)
   (*s_whitelist)[::prefs::kUsesSystemTheme] =
       settings_private::PrefType::PREF_TYPE_BOOLEAN;
 #endif
diff --git chrome/browser/extensions/browser_context_keyed_service_factories.cc chrome/browser/extensions/browser_context_keyed_service_factories.cc
index c7a0ad126eb3..d8ddaeb5fc9f 100644
--- chrome/browser/extensions/browser_context_keyed_service_factories.cc
+++ chrome/browser/extensions/browser_context_keyed_service_factories.cc
@@ -63,7 +63,7 @@
 #include "chrome/browser/chromeos/extensions/media_player_api.h"
 #include "chrome/browser/extensions/api/input_ime/input_ime_api.h"
 #include "chrome/browser/extensions/api/log_private/log_private_api.h"
-#elif defined(OS_LINUX) || defined(OS_WIN)
+#elif defined(OS_LINUX) || defined(OS_WIN) || defined(OS_BSD)
 #include "chrome/browser/extensions/api/input_ime/input_ime_api.h"
 #endif
 
@@ -107,7 +107,7 @@ void EnsureBrowserContextKeyedServiceFactoriesBuilt() {
 #if defined(OS_CHROMEOS)
   extensions::InputImeAPI::GetFactoryInstance();
   extensions::InputMethodAPI::GetFactoryInstance();
-#elif defined(OS_LINUX) || defined(OS_WIN)
+#elif defined(OS_LINUX) || defined(OS_WIN) || defined(OS_BSD)
   extensions::InputImeAPI::GetFactoryInstance();
 #endif
   extensions::LanguageSettingsPrivateDelegateFactory::GetInstance();
diff --git chrome/browser/first_run/upgrade_util_linux.cc chrome/browser/first_run/upgrade_util_linux.cc
index 65e4f9528571..9ccfdf6c087c 100644
--- chrome/browser/first_run/upgrade_util_linux.cc
+++ chrome/browser/first_run/upgrade_util_linux.cc
@@ -23,8 +23,10 @@ namespace upgrade_util {
 
 bool RelaunchChromeBrowser(const base::CommandLine& command_line) {
   base::LaunchOptions options;
+#if !defined(OS_BSD)
   // Don't set NO_NEW_PRIVS on the relaunched browser process.
   options.allow_new_privs = true;
+#endif
   return base::LaunchProcess(command_line, options).IsValid();
 }
 
diff --git chrome/browser/flag_descriptions.cc chrome/browser/flag_descriptions.cc
index 75f18bca26b0..d2a07532b826 100644
--- chrome/browser/flag_descriptions.cc
+++ chrome/browser/flag_descriptions.cc
@@ -1626,14 +1626,14 @@ const char kForceDirectionLtr[] = "Left-to-right";
 
 const char kForceDirectionRtl[] = "Right-to-left";
 
-#if defined(OS_WIN) || defined(OS_LINUX)
+#if defined(OS_WIN) || defined(OS_LINUX) || defined(OS_BSD)
 
 const char kEnableInputImeApiName[] = "Enable Input IME API";
 
 const char kEnableInputImeApiDescription[] =
     "Enable the use of chrome.input.ime API.";
 
-#endif  // defined(OS_WIN) || defined(OS_LINUX)
+#endif  // defined(OS_WIN) || defined(OS_LINUX) || defined(OS_BSD)
 
 const char kEnableGroupedHistoryName[] = "Group history by domain";
 
@@ -2829,7 +2829,7 @@ const char kEnableCustomFeedbackUiDescription[] =
 #endif  // defined(OS_ANDROID)
 
 #if defined(OS_CHROMEOS) || defined(OS_LINUX) || defined(OS_MACOSX) || \
-    defined(OS_WIN)
+    defined(OS_WIN) || defined(OS_BSD)
 
 const char kOmniboxEntitySuggestionsName[] = "Omnibox entity suggestions";
 
@@ -2845,7 +2845,7 @@ const char kEnableNewAppMenuIconDescription[] =
     "Use the new app menu icon with update notification animations.";
 
 #endif  // defined(OS_CHROMEOS) || defined(OS_LINUX) || defined(OS_MACOSX) ||
-        // defined(OS_WIN)
+        // defined(OS_WIN) || defined(OS_BSD)
 
 #if defined(OS_CHROMEOS)
 
diff --git chrome/browser/flag_descriptions.h chrome/browser/flag_descriptions.h
index c0d2a5533977..c5959df3a039 100644
--- chrome/browser/flag_descriptions.h
+++ chrome/browser/flag_descriptions.h
@@ -1391,12 +1391,12 @@ extern const char kUseGoogleLocalNtpDescription[];
 
 // Random platform combinations -----------------------------------------------
 
-#if defined(OS_WIN) || defined(OS_LINUX)
+#if defined(OS_WIN) || defined(OS_LINUX) || defined(OS_BSD)
 
 extern const char kEnableInputImeApiName[];
 extern const char kEnableInputImeApiDescription[];
 
-#endif  // defined(OS_WIN) || defined(OS_LINUX)
+#endif  // defined(OS_WIN) || defined(OS_LINUX) || defined(OS_BSD)
 
 #if defined(OS_WIN) || defined(OS_MACOSX)
 
diff --git chrome/browser/gpu/gl_string_manager.cc chrome/browser/gpu/gl_string_manager.cc
index 9df794c86c32..48eb476c45fc 100644
--- chrome/browser/gpu/gl_string_manager.cc
+++ chrome/browser/gpu/gl_string_manager.cc
@@ -33,7 +33,7 @@ GLStringManager::~GLStringManager() {
 
 void GLStringManager::Initialize() {
   // On MacOSX or Windows, preliminary GPUInfo is enough.
-#if defined(OS_LINUX)
+#if defined(OS_LINUX) || defined(OS_BSD)
   // We never remove this observer from GpuDataManager.
   content::GpuDataManager::GetInstance()->AddObserver(this);
 
diff --git chrome/browser/media/webrtc/webrtc_log_uploader.cc chrome/browser/media/webrtc/webrtc_log_uploader.cc
index be677efa5a83..a27d08c52469 100644
--- chrome/browser/media/webrtc/webrtc_log_uploader.cc
+++ chrome/browser/media/webrtc/webrtc_log_uploader.cc
@@ -335,7 +335,7 @@ void WebRtcLogUploader::SetupMultipart(
   const char product[] = "Chrome";
 #elif defined(OS_MACOSX)
   const char product[] = "Chrome_Mac";
-#elif defined(OS_LINUX)
+#elif defined(OS_LINUX) || defined(OS_BSD)
 #if !defined(ADDRESS_SANITIZER)
   const char product[] = "Chrome_Linux";
 #else
diff --git chrome/browser/memory_details.cc chrome/browser/memory_details.cc
index 356fffcf72bc..5169c093c0c6 100644
--- chrome/browser/memory_details.cc
+++ chrome/browser/memory_details.cc
@@ -35,7 +35,8 @@
 #include "extensions/features/features.h"
 #include "ui/base/l10n/l10n_util.h"
 
-#if defined(OS_POSIX) && !defined(OS_MACOSX) && !defined(OS_ANDROID)
+#if defined(OS_POSIX) && !defined(OS_MACOSX) && !defined(OS_ANDROID) && \
+    !defined(OS_DRAGONFLY)
 #include "content/public/browser/zygote_host_linux.h"
 #endif
 
@@ -346,7 +347,8 @@ void MemoryDetails::CollectChildInfoOnUIThread() {
       process.titles.push_back(title);
     }
 
-#if defined(OS_POSIX) && !defined(OS_MACOSX) && !defined(OS_ANDROID)
+#if defined(OS_POSIX) && !defined(OS_MACOSX) && !defined(OS_ANDROID) && \
+    !defined(OS_DRAGONFLY)
     if (content::ZygoteHost::GetInstance()->IsZygotePid(process.pid)) {
       process.process_type = content::PROCESS_TYPE_ZYGOTE;
     }
diff --git chrome/browser/memory_details_linux.cc chrome/browser/memory_details_linux.cc
index 1079fc195eb3..fee5b349a70b 100644
--- chrome/browser/memory_details_linux.cc
+++ chrome/browser/memory_details_linux.cc
@@ -71,8 +71,10 @@ ProcessData GetProcessDataMemoryInformation(
     std::unique_ptr<base::ProcessMetrics> metrics(
         base::ProcessMetrics::CreateProcessMetrics(pid));
     metrics->GetWorkingSetKBytes(&pmi.working_set);
+#if !defined(OS_DRAGONFLY)
     pmi.num_open_fds = metrics->GetOpenFdCount();
     pmi.open_fds_soft_limit = metrics->GetOpenFdSoftLimit();
+#endif
 
     process_data.processes.push_back(pmi);
   }
diff --git chrome/browser/metrics/chrome_browser_main_extra_parts_metrics.cc chrome/browser/metrics/chrome_browser_main_extra_parts_metrics.cc
index 9be497ed78fe..0dbfeb740397 100644
--- chrome/browser/metrics/chrome_browser_main_extra_parts_metrics.cc
+++ chrome/browser/metrics/chrome_browser_main_extra_parts_metrics.cc
@@ -39,12 +39,14 @@
 
 #if defined(OS_LINUX) && !defined(OS_CHROMEOS)
 #include <gnu/libc-version.h>
-
 #include "base/version.h"
+#endif
+
+#if (defined(OS_LINUX) && !defined(OS_CHROMEOS)) || defined(OS_BSD)
 #if defined(USE_X11)
 #include "ui/base/x/x11_util.h"
 #endif
-#endif  // defined(OS_LINUX) && !defined(OS_CHROMEOS)
+#endif  // (defined(OS_LINUX) && !defined(OS_CHROMEOS)) || defined(OS_BSD)
 
 #if defined(USE_OZONE) || defined(USE_X11)
 #include "ui/events/devices/input_device_event_observer.h"
diff --git chrome/browser/metrics/chrome_metrics_service_client.cc chrome/browser/metrics/chrome_metrics_service_client.cc
index 54e79f7385c7..3d9040e12ff0 100644
--- chrome/browser/metrics/chrome_metrics_service_client.cc
+++ chrome/browser/metrics/chrome_metrics_service_client.cc
@@ -309,7 +309,9 @@ ChromeMetricsServiceClient::ChromeMetricsServiceClient(
       watcher_metrics_provider_(nullptr),
       antivirus_metrics_provider_(nullptr),
 #endif
+#if !defined(OS_BSD)
       drive_metrics_provider_(nullptr),
+#endif
       start_time_(base::TimeTicks::Now()),
       has_uploaded_profiler_data_(false),
       weak_ptr_factory_(this) {
@@ -486,10 +488,12 @@ void ChromeMetricsServiceClient::InitializeSystemProfileMetrics(
                  base::Unretained(antivirus_metrics_provider_), next_task));
 #endif  // defined(OS_WIN)
 
+#if !defined(OS_BSD)
   // Load drive metrics.
   initialize_task_queue_.push_back(
       base::Bind(&metrics::DriveMetricsProvider::GetDriveMetrics,
                  base::Unretained(drive_metrics_provider_), next_task));
+#endif
 
 #if defined(OS_WIN)
   // Optionally collect postmortem reports.
@@ -649,12 +653,14 @@ void ChromeMetricsServiceClient::RegisterMetricsServiceProviders() {
   metrics_service_->RegisterMetricsProvider(CreateFileMetricsProvider(
       ChromeMetricsServiceAccessor::IsMetricsAndCrashReportingEnabled()));
 
+#if !defined(OS_BSD)
   drive_metrics_provider_ = new metrics::DriveMetricsProvider(
       content::BrowserThread::GetTaskRunnerForThread(
           content::BrowserThread::FILE),
       chrome::FILE_LOCAL_STATE);
   metrics_service_->RegisterMetricsProvider(
       std::unique_ptr<metrics::MetricsProvider>(drive_metrics_provider_));
+#endif
 
   profiler_metrics_provider_ = new metrics::ProfilerMetricsProvider();
   metrics_service_->RegisterMetricsProvider(
diff --git chrome/browser/metrics/chrome_metrics_service_client.h chrome/browser/metrics/chrome_metrics_service_client.h
index bfb2ccd1d6f9..acef08a17b62 100644
--- chrome/browser/metrics/chrome_metrics_service_client.h
+++ chrome/browser/metrics/chrome_metrics_service_client.h
@@ -227,9 +227,11 @@ class ChromeMetricsServiceClient : public metrics::MetricsServiceClient,
   AntiVirusMetricsProvider* antivirus_metrics_provider_;
 #endif
 
+#if !defined(OS_BSD)
   // The DriveMetricsProvider instance that was registered with MetricsService.
   // Has the same lifetime as |metrics_service_|.
   metrics::DriveMetricsProvider* drive_metrics_provider_;
+#endif
 
   // The MemoryGrowthTracker instance that tracks memory usage growth in
   // MemoryDetails.
diff --git chrome/browser/net/spdyproxy/data_reduction_proxy_chrome_settings.cc chrome/browser/net/spdyproxy/data_reduction_proxy_chrome_settings.cc
index 656e55cdc645..cb1dbbe5e458 100644
--- chrome/browser/net/spdyproxy/data_reduction_proxy_chrome_settings.cc
+++ chrome/browser/net/spdyproxy/data_reduction_proxy_chrome_settings.cc
@@ -235,7 +235,7 @@ data_reduction_proxy::Client DataReductionProxyChromeSettings::GetClient() {
   return data_reduction_proxy::Client::CHROME_LINUX;
 #elif defined(OS_WIN)
   return data_reduction_proxy::Client::CHROME_WINDOWS;
-#elif defined(OS_FREEBSD)
+#elif defined(OS_FREEBSD) || defined(OS_DRAGONFLY)
   return data_reduction_proxy::Client::CHROME_FREEBSD;
 #elif defined(OS_OPENBSD)
   return data_reduction_proxy::Client::CHROME_OPENBSD;
diff --git chrome/browser/platform_util.h chrome/browser/platform_util.h
index 1ca527969765..f7ac5924c5d9 100644
--- chrome/browser/platform_util.h
+++ chrome/browser/platform_util.h
@@ -40,7 +40,7 @@ enum OpenOperationResult {
 enum OpenItemType {
   OPEN_FILE,
   OPEN_FOLDER,
-#if defined(OS_LINUX)
+#if defined(OS_LINUX) || defined(OS_BSD)
   SHOW_ITEM_IN_FOLDER
 #endif
 };
diff --git chrome/browser/platform_util_linux.cc chrome/browser/platform_util_linux.cc
index b708dfdbc05d..ec80bd1d8f03 100644
--- chrome/browser/platform_util_linux.cc
+++ chrome/browser/platform_util_linux.cc
@@ -37,7 +37,9 @@ void RunCommand(const std::string& command,
 
   base::LaunchOptions options;
   options.current_directory = working_directory;
+#if !defined(OS_BSD)
   options.allow_new_privs = true;
+#endif
   // xdg-open can fall back on mailcap which eventually might plumb through
   // to a command that needs a terminal.  Set the environment variable telling
   // it that we definitely don't have a terminal available and that it should
diff --git chrome/browser/plugins/plugins_resource_service.cc chrome/browser/plugins/plugins_resource_service.cc
index 57fecc253249..a1474818e0c0 100644
--- chrome/browser/plugins/plugins_resource_service.cc
+++ chrome/browser/plugins/plugins_resource_service.cc
@@ -61,6 +61,8 @@ GURL GetPluginsServerURL() {
   filename = "plugins_chromeos.json";
 #elif defined(OS_LINUX)
   filename = "plugins_linux.json";
+#elif defined(OS_BSD)
+  filename = "plugins_linux.json";
 #elif defined(OS_MACOSX)
   filename = "plugins_mac.json";
 #else
diff --git chrome/browser/process_singleton_posix.cc chrome/browser/process_singleton_posix.cc
index c684f51ce101..a997a65c75a8 100644
--- chrome/browser/process_singleton_posix.cc
+++ chrome/browser/process_singleton_posix.cc
@@ -93,11 +93,12 @@
 #include "net/base/network_interfaces.h"
 #include "ui/base/l10n/l10n_util.h"
 
-#if defined(OS_LINUX)
+#if defined(OS_LINUX) || defined(OS_BSD)
 #include "chrome/browser/ui/process_singleton_dialog_linux.h"
 #endif
 
-#if defined(TOOLKIT_VIEWS) && defined(OS_LINUX) && !defined(OS_CHROMEOS)
+#if defined(TOOLKIT_VIEWS) && ((defined(OS_LINUX) && !defined(OS_CHROMEOS)) || \
+                               defined(OS_BSD))
 #include "ui/views/linux_ui/linux_ui.h"
 #endif
 
@@ -324,7 +325,7 @@ bool DisplayProfileInUseError(const base::FilePath& lock_path,
   if (g_disable_prompt)
     return false;
 
-#if defined(OS_LINUX)
+#if defined(OS_LINUX) || defined(OS_BSD)
   base::string16 relaunch_button_text = l10n_util::GetStringUTF16(
       IDS_PROFILE_IN_USE_LINUX_RELAUNCH);
   return ShowProcessSingletonDialog(error, relaunch_button_text);
@@ -889,7 +890,8 @@ ProcessSingleton::NotifyResult ProcessSingleton::NotifyOtherProcessWithTimeout(
     SendRemoteProcessInteractionResultHistogram(REMOTE_PROCESS_SHUTTING_DOWN);
     return PROCESS_NONE;
   } else if (strncmp(buf, kACKToken, arraysize(kACKToken) - 1) == 0) {
-#if defined(TOOLKIT_VIEWS) && defined(OS_LINUX) && !defined(OS_CHROMEOS)
+#if defined(TOOLKIT_VIEWS) && ((defined(OS_LINUX) && !defined(OS_CHROMEOS)) || \
+                               defined(OS_BSD))
     // Likely NULL in unit tests.
     views::LinuxUI* linux_ui = views::LinuxUI::instance();
     if (linux_ui)
diff --git chrome/browser/profiles/profile_impl_io_data.cc chrome/browser/profiles/profile_impl_io_data.cc
index b72ea5c71453..ad89bc64938f 100644
--- chrome/browser/profiles/profile_impl_io_data.cc
+++ chrome/browser/profiles/profile_impl_io_data.cc
@@ -103,7 +103,8 @@ net::BackendType ChooseCacheBackendType() {
   }
 #endif  // #if !defined(OS_ANDROID)
 
-#if defined(OS_ANDROID) || defined(OS_LINUX) || defined(OS_CHROMEOS)
+#if defined(OS_ANDROID) || defined(OS_LINUX) || defined(OS_CHROMEOS) || \
+    defined(OS_BSD)
   return net::CACHE_BACKEND_SIMPLE;
 #else
   return net::CACHE_BACKEND_BLOCKFILE;
diff --git chrome/browser/renderer_preferences_util.cc chrome/browser/renderer_preferences_util.cc
index 7296a04a56cc..1427e7e0238e 100644
--- chrome/browser/renderer_preferences_util.cc
+++ chrome/browser/renderer_preferences_util.cc
@@ -20,7 +20,7 @@
 #include "third_party/WebKit/public/public_features.h"
 #include "third_party/skia/include/core/SkColor.h"
 
-#if defined(OS_LINUX) || defined(OS_ANDROID)
+#if defined(OS_LINUX) || defined(OS_ANDROID) || defined(OS_BSD)
 #include "ui/gfx/font_render_params.h"
 #endif
 
@@ -32,7 +32,8 @@
 #include "ui/base/cocoa/defaults_utils.h"
 #endif
 
-#if defined(USE_AURA) && defined(OS_LINUX) && !defined(OS_CHROMEOS)
+#if defined(USE_AURA) && ((defined(OS_LINUX) && !defined(OS_CHROMEOS)) || \
+                          defined(OS_BSD))
 #include "chrome/browser/themes/theme_service.h"
 #include "chrome/browser/themes/theme_service_factory.h"
 #include "ui/views/linux_ui/linux_ui.h"
@@ -134,7 +135,8 @@ void UpdateFromSystemSettings(content::RendererPreferences* prefs,
     prefs->caret_blink_interval = interval.InSecondsF();
 #endif
 
-#if defined(USE_AURA) && defined(OS_LINUX) && !defined(OS_CHROMEOS)
+#if defined(USE_AURA) && ((defined(OS_LINUX) && !defined(OS_CHROMEOS)) || \
+                          defined(OS_BSD))
   views::LinuxUI* linux_ui = views::LinuxUI::instance();
   if (linux_ui) {
     if (ThemeServiceFactory::GetForProfile(profile)->UsingSystemTheme()) {
@@ -156,7 +158,8 @@ void UpdateFromSystemSettings(content::RendererPreferences* prefs,
   }
 #endif
 
-#if defined(OS_LINUX) || defined(OS_ANDROID) || defined(OS_WIN)
+#if defined(OS_LINUX) || defined(OS_ANDROID) || defined(OS_WIN) || \
+    defined(OS_BSD)
   CR_DEFINE_STATIC_LOCAL(const gfx::FontRenderParams, params,
       (gfx::GetFontRenderParams(gfx::FontRenderParamsQuery(), NULL)));
   prefs->should_antialias_text = params.antialiasing;
diff --git chrome/browser/resources/options/browser_options.html chrome/browser/resources/options/browser_options.html
index b5706ea2015d..9394b298091c 100644
--- chrome/browser/resources/options/browser_options.html
+++ chrome/browser/resources/options/browser_options.html
@@ -95,7 +95,7 @@
         </span>
       </label>
     </div>
-<if expr="is_linux and not chromeos">
+<if expr="is_posix and not is_chromeos and not is_macosx">
     <div class="checkbox"><label>
         <input id="show-window-decorations" type="checkbox"
             pref="browser.custom_chrome_frame" metric="Options_CustomFrame"
diff --git chrome/browser/resources/safe_browsing/BUILD.gn chrome/browser/resources/safe_browsing/BUILD.gn
index 89a3efdbfbae..3be3734c133a 100644
--- chrome/browser/resources/safe_browsing/BUILD.gn
+++ chrome/browser/resources/safe_browsing/BUILD.gn
@@ -29,6 +29,10 @@ action("make_file_types_protobuf") {
     target_arch = "mac"
   } else if (is_linux) {
     target_arch = "linux"
+  } else if (current_os == "freebsd") {
+    target_arch = "freebsd"
+  } else if (current_os == "dragonfly") {
+    target_arch = "dragonfly"
   } else {
     # This will cause the script to fail.
     target_arch = "unknown_target_arch"
diff --git chrome/browser/resources/safe_browsing/gen_file_type_proto.py chrome/browser/resources/safe_browsing/gen_file_type_proto.py
index 651ed98dad4e..ef4215c6f239 100755
--- chrome/browser/resources/safe_browsing/gen_file_type_proto.py
+++ chrome/browser/resources/safe_browsing/gen_file_type_proto.py
@@ -31,6 +31,8 @@ def PlatformTypes():
     "android": download_file_types_pb2.DownloadFileType.PLATFORM_ANDROID,
     "chromeos": download_file_types_pb2.DownloadFileType.PLATFORM_CHROME_OS,
     "linux": download_file_types_pb2.DownloadFileType.PLATFORM_LINUX,
+    "freebsd": download_file_types_pb2.DownloadFileType.PLATFORM_LINUX,
+    "dragonfly": download_file_types_pb2.DownloadFileType.PLATFORM_LINUX,
     "mac": download_file_types_pb2.DownloadFileType.PLATFORM_MAC,
     "win": download_file_types_pb2.DownloadFileType.PLATFORM_WINDOWS,
   }
diff --git chrome/browser/resources/settings/appearance_page/appearance_page.html chrome/browser/resources/settings/appearance_page/appearance_page.html
index 0e7f31afb9f9..a8329639d092 100644
--- chrome/browser/resources/settings/appearance_page/appearance_page.html
+++ chrome/browser/resources/settings/appearance_page/appearance_page.html
@@ -73,7 +73,7 @@
                 actionable aria-label="$i18n{themes}"
                 aria-describedby="themesSecondary"></button>
           </a>
-<if expr="not is_linux or chromeos">
+<if expr="not is_posix or chromeos or is_macosx">
           <template is="dom-if" if="[[prefs.extensions.theme.id.value]]">
             <div class="separator"></div>
             <paper-button id="useDefault" on-tap="onUseDefaultTap_"
@@ -82,7 +82,7 @@
             </paper-button>
           </template>
 </if>
-<if expr="is_linux and not chromeos">
+<if expr="is_posix and not chromeos and not is_macosx">
           <div class="settings-row" hidden="[[!showThemesSecondary_(
               prefs.extensions.theme.id.value, useSystemTheme_)]]"
               id="themesSecondaryActions">
@@ -152,7 +152,7 @@
           </settings-toggle-button>
         </div>
         <div class$="settings-box [[getFirst_(pageVisibility.bookmarksBar)]]">
-<if expr="is_linux and not chromeos">
+<if expr="is_posix and not chromeos and not is_macosx">
           <settings-toggle-button class="start"
               pref="{{prefs.browser.custom_chrome_frame}}"
               label="$i18n{showWindowDecorations}"
diff --git chrome/browser/safe_browsing/permission_reporter.cc chrome/browser/safe_browsing/permission_reporter.cc
index 458caed0607a..1c6d337439a5 100644
--- chrome/browser/safe_browsing/permission_reporter.cc
+++ chrome/browser/safe_browsing/permission_reporter.cc
@@ -234,7 +234,7 @@ bool PermissionReporter::BuildReport(const PermissionReportInfo& report_info,
 #if defined(OS_ANDROID)
   report.set_platform_type(PermissionReport::ANDROID_PLATFORM);
 #elif defined(OS_MACOSX) || defined(OS_WIN) || defined(OS_CHROMEOS) || \
-    defined(OS_LINUX)
+    defined(OS_LINUX) || defined(OS_BSD)
   report.set_platform_type(PermissionReport::DESKTOP_PLATFORM);
 #else
 #error Unsupported platform.
diff --git chrome/browser/sync/chrome_sync_client.cc chrome/browser/sync/chrome_sync_client.cc
index 3b9ef88baf7c..8c5a059a7e41 100644
--- chrome/browser/sync/chrome_sync_client.cc
+++ chrome/browser/sync/chrome_sync_client.cc
@@ -665,7 +665,8 @@ void ChromeSyncClient::RegisterDesktopDataTypes(
   }
 #endif  // BUILDFLAG(ENABLE_APP_LIST)
 
-#if defined(OS_LINUX) || defined(OS_WIN) || defined(OS_CHROMEOS)
+#if defined(OS_LINUX) || defined(OS_WIN) || defined(OS_CHROMEOS) || \
+    defined(OS_BSD)
   // Dictionary sync is enabled by default.
   if (!disabled_types.Has(syncer::DICTIONARY)) {
     sync_service->RegisterDataTypeController(
@@ -673,7 +674,7 @@ void ChromeSyncClient::RegisterDesktopDataTypes(
             syncer::DICTIONARY, error_callback, this, syncer::GROUP_UI,
             BrowserThread::GetTaskRunnerForThread(BrowserThread::UI)));
   }
-#endif  // defined(OS_LINUX) || defined(OS_WIN) || defined(OS_CHROMEOS)
+#endif  // defined(OS_LINUX) || defined(OS_WIN) || defined(OS_CHROMEOS) || defined(OS_BSD)
 
 #if BUILDFLAG(ENABLE_SUPERVISED_USERS)
   sync_service->RegisterDataTypeController(
diff --git chrome/browser/tracing/crash_service_uploader.cc chrome/browser/tracing/crash_service_uploader.cc
index e288dd7a9d7b..3cade12f1432 100644
--- chrome/browser/tracing/crash_service_uploader.cc
+++ chrome/browser/tracing/crash_service_uploader.cc
@@ -153,6 +153,8 @@ void TraceCrashServiceUploader::DoUploadOnFileThread(
   const char product[] = "Chrome_Mac";
 #elif defined(OS_LINUX)
   const char product[] = "Chrome_Linux";
+#elif defined(OS_DRAGONFLY)
+  const char product[] = "Chrome_DragonFly";
 #elif defined(OS_ANDROID)
   const char product[] = "Chrome_Android";
 #elif defined(OS_CHROMEOS)
diff --git chrome/browser/ui/BUILD.gn chrome/browser/ui/BUILD.gn
index b29d0d03d23a..945e47002d52 100644
--- chrome/browser/ui/BUILD.gn
+++ chrome/browser/ui/BUILD.gn
@@ -3208,7 +3208,7 @@ split_static_library("ui") {
       ]
     }
   }
-  if (is_linux) {  # Both desktop Linux and ChromeOS.
+  if (is_linux || is_bsd) {  # Both desktop Linux and ChromeOS.
     sources += [
       "certificate_dialogs.cc",
       "certificate_dialogs.h",
diff --git chrome/browser/ui/browser_command_controller.cc chrome/browser/ui/browser_command_controller.cc
index 7db71e164a7a..fecee5169f5d 100644
--- chrome/browser/ui/browser_command_controller.cc
+++ chrome/browser/ui/browser_command_controller.cc
@@ -80,7 +80,7 @@
 #include "chrome/browser/ui/browser_commands_chromeos.h"
 #endif
 
-#if defined(OS_LINUX) && !defined(OS_CHROMEOS)
+#if (defined(OS_LINUX) && !defined(OS_CHROMEOS)) || defined(OS_BSD)
 #include "ui/base/ime/linux/text_edit_key_bindings_delegate_auralinux.h"
 #endif
 
@@ -209,7 +209,7 @@ bool BrowserCommandController::IsReservedCommandOrKey(
 #endif
   }
 
-#if defined(OS_LINUX) && !defined(OS_CHROMEOS)
+#if (defined(OS_LINUX) && !defined(OS_CHROMEOS)) || defined(OS_BSD)
   // If this key was registered by the user as a content editing hotkey, then
   // it is not reserved.
   ui::TextEditKeyBindingsDelegateAuraLinux* delegate =
@@ -413,7 +413,7 @@ void BrowserCommandController::ExecuteCommandWithDisposition(
       break;
 #endif
 
-#if defined(OS_LINUX) && !defined(OS_CHROMEOS)
+#if (defined(OS_LINUX) && !defined(OS_CHROMEOS)) || defined(OS_BSD)
     case IDC_USE_SYSTEM_TITLE_BAR: {
       PrefService* prefs = profile()->GetPrefs();
       prefs->SetBoolean(prefs::kUseCustomChromeFrame,
@@ -775,7 +775,7 @@ void BrowserCommandController::InitCommandState() {
   command_updater_.UpdateCommandEnabled(IDC_VISIT_DESKTOP_OF_LRU_USER_2, true);
   command_updater_.UpdateCommandEnabled(IDC_VISIT_DESKTOP_OF_LRU_USER_3, true);
 #endif
-#if defined(OS_LINUX) && !defined(OS_CHROMEOS)
+#if (defined(OS_LINUX) && !defined(OS_CHROMEOS)) || defined(OS_BSD)
   command_updater_.UpdateCommandEnabled(IDC_USE_SYSTEM_TITLE_BAR, true);
 #endif
 
diff --git chrome/browser/ui/browser_view_prefs.cc chrome/browser/ui/browser_view_prefs.cc
index 95555bacc618..cff2b6bbff84 100644
--- chrome/browser/ui/browser_view_prefs.cc
+++ chrome/browser/ui/browser_view_prefs.cc
@@ -10,7 +10,7 @@
 #include "components/prefs/pref_registry_simple.h"
 #include "components/prefs/pref_service.h"
 
-#if defined(OS_LINUX) && !defined(OS_CHROMEOS)
+#if (defined(OS_LINUX) && !defined(OS_CHROMEOS)) || defined(OS_BSD)
 #include "ui/base/x/x11_util.h"  // nogncheck
 #endif
 
diff --git chrome/browser/ui/libgtkui/BUILD.gn chrome/browser/ui/libgtkui/BUILD.gn
index 05e5209a2b81..3cb7ca60cd56 100644
--- chrome/browser/ui/libgtkui/BUILD.gn
+++ chrome/browser/ui/libgtkui/BUILD.gn
@@ -2,7 +2,7 @@
 # Use of this source code is governed by a BSD-style license that can be
 # found in the LICENSE file.
 
-assert(is_linux, "This file should only be referenced on Linux")
+assert(is_linux || is_bsd, "This file should only be referenced on Linux")
 
 import("//build/config/features.gni")
 import("//build/config/linux/gtk/gtk.gni")
diff --git chrome/browser/ui/libgtkui/gtk_ui.cc chrome/browser/ui/libgtkui/gtk_ui.cc
index 7df1d0c511c1..63fa993a2de1 100644
--- chrome/browser/ui/libgtkui/gtk_ui.cc
+++ chrome/browser/ui/libgtkui/gtk_ui.cc
@@ -320,8 +320,8 @@ float GetRawDeviceScaleFactor() {
     return display::Display::GetForcedDeviceScaleFactor();
 
   GdkScreen* screen = gdk_screen_get_default();
-  gint scale = gdk_screen_get_monitor_scale_factor(
-      screen, gdk_screen_get_primary_monitor(screen));
+  gint scale = gdk_monitor_get_scale_factor(
+      gdk_display_get_primary_monitor(gdk_screen_get_display(screen)));
   gdouble resolution = gdk_screen_get_resolution(screen);
   return resolution <= 0 ? scale : resolution * scale / kDefaultDPI;
 }
diff --git chrome/browser/ui/profile_chooser_constants.h chrome/browser/ui/profile_chooser_constants.h
index d18f4e3d8220..d2be20725445 100644
--- chrome/browser/ui/profile_chooser_constants.h
+++ chrome/browser/ui/profile_chooser_constants.h
@@ -9,7 +9,9 @@
 
 namespace profiles {
 
+#if defined(OS_MACOSX)
 static const SkColor kHoverColor = SkColorSetRGB(0xEA, 0xEA, 0xEA);
+#endif
 
 // Different views that can be displayed in the profile chooser bubble.
 enum BubbleViewMode {
diff --git chrome/browser/ui/sad_tab.cc chrome/browser/ui/sad_tab.cc
index 2a9d3b9365f6..59cb1f7cb3e9 100644
--- chrome/browser/ui/sad_tab.cc
+++ chrome/browser/ui/sad_tab.cc
@@ -189,7 +189,8 @@ int SadTab::GetSubMessage(size_t line_id) {
       return 0;
     case chrome::SAD_TAB_KIND_CRASHED:
     case chrome::SAD_TAB_KIND_KILLED:
-#if defined(OS_MACOSX) || defined(OS_LINUX) || defined(OS_CHROMEOS)
+#if defined(OS_MACOSX) || defined(OS_LINUX) || defined(OS_CHROMEOS) || \
+    defined(OS_BSD)
       if (line_id == 0)
         return AreOtherTabsOpen() ? IDS_SAD_TAB_RELOAD_CLOSE_TABS
                                   : IDS_SAD_TAB_RELOAD_CLOSE_NOTABS;
diff --git chrome/browser/ui/startup/bad_flags_prompt.cc chrome/browser/ui/startup/bad_flags_prompt.cc
index a2af8372e031..8c05b950d455 100644
--- chrome/browser/ui/startup/bad_flags_prompt.cc
+++ chrome/browser/ui/startup/bad_flags_prompt.cc
@@ -73,7 +73,7 @@ void ShowBadFlagsPrompt(Browser* browser) {
     // This flag gives extensions more powers.
     extensions::switches::kExtensionsOnChromeURLs,
 
-#if defined(OS_LINUX) && !defined(OS_CHROMEOS)
+#if (defined(OS_LINUX) && !defined(OS_CHROMEOS)) || defined(OS_BSD)
     // Speech dispatcher is buggy, it can crash and it can make Chrome freeze.
     // http://crbug.com/327295
     switches::kEnableSpeechDispatcher,
diff --git chrome/browser/ui/startup/startup_browser_creator.cc chrome/browser/ui/startup/startup_browser_creator.cc
index 2777068c0ef1..01324d3340b5 100644
--- chrome/browser/ui/startup/startup_browser_creator.cc
+++ chrome/browser/ui/startup/startup_browser_creator.cc
@@ -94,7 +94,7 @@
 #include "components/user_manager/user_manager.h"
 #endif
 
-#if defined(TOOLKIT_VIEWS) && defined(OS_LINUX)
+#if defined(TOOLKIT_VIEWS) && (defined(OS_LINUX) || defined(OS_BSD))
 #include "ui/events/devices/x11/touch_factory_x11.h"  // nogncheck
 #endif
 
diff --git chrome/browser/ui/tab_helpers.cc chrome/browser/ui/tab_helpers.cc
index b565c76b692d..be387a7e3f29 100644
--- chrome/browser/ui/tab_helpers.cc
+++ chrome/browser/ui/tab_helpers.cc
@@ -270,7 +270,7 @@ void TabHelpers::AttachTabHelpers(
     banners::AppBannerManagerDesktop::CreateForWebContents(web_contents);
 #endif
 
-#if defined(OS_WIN) || defined(OS_MACOSX) || \
+#if defined(OS_WIN) || defined(OS_MACOSX) || defined(OS_BSD) || \
     (defined(OS_LINUX) && !defined(OS_CHROMEOS))
   metrics::DesktopSessionDurationObserver::CreateForWebContents(web_contents);
 #endif
diff --git chrome/browser/ui/views/accelerator_table.cc chrome/browser/ui/views/accelerator_table.cc
index b5391831b491..abc7e08ddda0 100644
--- chrome/browser/ui/views/accelerator_table.cc
+++ chrome/browser/ui/views/accelerator_table.cc
@@ -54,7 +54,7 @@ const AcceleratorMapping kAcceleratorMap[] = {
   { ui::VKEY_S, kPlatformModifier, IDC_SAVE_PAGE },
   { ui::VKEY_9, kPlatformModifier, IDC_SELECT_LAST_TAB },
   { ui::VKEY_NUMPAD9, kPlatformModifier, IDC_SELECT_LAST_TAB },
-#if defined(OS_LINUX) && !defined(OS_CHROMEOS)
+#if (defined(OS_LINUX) && !defined(OS_CHROMEOS)) || defined(OS_BSD)
   { ui::VKEY_9, ui::EF_ALT_DOWN, IDC_SELECT_LAST_TAB },
   { ui::VKEY_NUMPAD9, ui::EF_ALT_DOWN, IDC_SELECT_LAST_TAB },
   { ui::VKEY_NEXT, ui::EF_CONTROL_DOWN | ui::EF_SHIFT_DOWN, IDC_MOVE_TAB_NEXT },
@@ -84,7 +84,7 @@ const AcceleratorMapping kAcceleratorMap[] = {
   { ui::VKEY_NUMPAD7, kPlatformModifier, IDC_SELECT_TAB_6 },
   { ui::VKEY_8, kPlatformModifier, IDC_SELECT_TAB_7 },
   { ui::VKEY_NUMPAD8, kPlatformModifier, IDC_SELECT_TAB_7 },
-#if defined(OS_LINUX) && !defined(OS_CHROMEOS)
+#if (defined(OS_LINUX) && !defined(OS_CHROMEOS)) || defined(OS_BSD)
   { ui::VKEY_1, ui::EF_ALT_DOWN, IDC_SELECT_TAB_0 },
   { ui::VKEY_NUMPAD1, ui::EF_ALT_DOWN, IDC_SELECT_TAB_0 },
   { ui::VKEY_2, ui::EF_ALT_DOWN, IDC_SELECT_TAB_1 },
@@ -102,7 +102,7 @@ const AcceleratorMapping kAcceleratorMap[] = {
   { ui::VKEY_8, ui::EF_ALT_DOWN, IDC_SELECT_TAB_7 },
   { ui::VKEY_NUMPAD8, ui::EF_ALT_DOWN, IDC_SELECT_TAB_7 },
   { ui::VKEY_BROWSER_FAVORITES, ui::EF_NONE, IDC_SHOW_BOOKMARK_BAR },
-#endif  // OS_LINUX && !OS_CHROMEOS
+#endif  // (OS_LINUX && !OS_CHROMEOS) || OS_BSD
   { ui::VKEY_B, ui::EF_SHIFT_DOWN | kPlatformModifier,
     IDC_SHOW_BOOKMARK_BAR },
   { ui::VKEY_ESCAPE, ui::EF_NONE, IDC_STOP },
@@ -129,14 +129,14 @@ const AcceleratorMapping kAcceleratorMap[] = {
 #endif  // !OS_MACOSX
 
   // Platform-specific key maps.
-#if defined(OS_LINUX)
+#if defined(OS_LINUX) || defined(OS_BSD)
   { ui::VKEY_BROWSER_BACK, ui::EF_NONE, IDC_BACK },
   { ui::VKEY_BROWSER_FORWARD, ui::EF_NONE, IDC_FORWARD },
   { ui::VKEY_BROWSER_HOME, ui::EF_NONE, IDC_HOME },
   { ui::VKEY_BROWSER_REFRESH, ui::EF_NONE, IDC_RELOAD },
   { ui::VKEY_BROWSER_REFRESH, ui::EF_CONTROL_DOWN, IDC_RELOAD_BYPASSING_CACHE },
   { ui::VKEY_BROWSER_REFRESH, ui::EF_SHIFT_DOWN, IDC_RELOAD_BYPASSING_CACHE },
-#endif  // defined(OS_LINUX)
+#endif  // defined(OS_LINUX) || defined(OS_BSD)
 
 #if defined(OS_CHROMEOS)
   // On Chrome OS, VKEY_BROWSER_SEARCH is handled in Ash.
diff --git chrome/browser/ui/views/apps/chrome_native_app_window_views_aura.cc chrome/browser/ui/views/apps/chrome_native_app_window_views_aura.cc
index d7074d1320df..a412539ac3fc 100644
--- chrome/browser/ui/views/apps/chrome_native_app_window_views_aura.cc
+++ chrome/browser/ui/views/apps/chrome_native_app_window_views_aura.cc
@@ -19,7 +19,7 @@
 #include "ui/gfx/image/image_skia.h"
 #include "ui/views/widget/widget.h"
 
-#if defined(OS_LINUX)
+#if defined(OS_LINUX) || defined(OS_BSD)
 #include "chrome/browser/shell_integration_linux.h"
 #endif
 
@@ -56,7 +56,7 @@ void ChromeNativeAppWindowViewsAura::OnBeforeWidgetInit(
     const AppWindow::CreateParams& create_params,
     views::Widget::InitParams* init_params,
     views::Widget* widget) {
-#if defined(OS_LINUX) && !defined(OS_CHROMEOS)
+#if (defined(OS_LINUX) && !defined(OS_CHROMEOS)) || defined(OS_BSD)
   std::string app_name = web_app::GenerateApplicationNameFromExtensionId(
       app_window()->extension_id());
   // Set up a custom WM_CLASS for app windows. This allows task switchers in
diff --git chrome/browser/ui/views/chrome_browser_main_extra_parts_views.cc chrome/browser/ui/views/chrome_browser_main_extra_parts_views.cc
index b5486da2d567..591814aa8a13 100644
--- chrome/browser/ui/views/chrome_browser_main_extra_parts_views.cc
+++ chrome/browser/ui/views/chrome_browser_main_extra_parts_views.cc
@@ -29,7 +29,7 @@
 #include "ui/wm/core/wm_state.h"
 #endif  // defined(USE_AURA)
 
-#if defined(OS_LINUX) && !defined(OS_CHROMEOS)
+#if (defined(OS_LINUX) && !defined(OS_CHROMEOS)) || defined(OS_BSD)
 #include <sys/stat.h>
 #include <sys/types.h>
 #include <unistd.h>
@@ -40,7 +40,7 @@
 #include "chrome/grit/generated_resources.h"
 #include "content/public/common/content_switches.h"
 #include "ui/base/l10n/l10n_util.h"
-#endif  // defined(OS_LINUX) && !defined(OS_CHROMEOS)
+#endif  // (defined(OS_LINUX) && !defined(OS_CHROMEOS)) || defined(OS_BSD)
 
 #if defined(OS_CHROMEOS)
 #include "chrome/browser/chromeos/ash_config.h"
@@ -104,7 +104,7 @@ void ChromeBrowserMainExtraPartsViews::PreProfileInit() {
     IMEDriver::Register();
 #endif
 
-#if defined(OS_LINUX) && !defined(OS_CHROMEOS)
+#if (defined(OS_LINUX) && !defined(OS_CHROMEOS)) || defined(OS_BSD)
   // On the Linux desktop, we want to prevent the user from logging in as root,
   // so that we don't destroy the profile. Now that we have some minimal ui
   // initialized, check to see if we're running as root and bail if we are.
@@ -135,7 +135,7 @@ void ChromeBrowserMainExtraPartsViews::PreProfileInit() {
   base::RunLoop().RunUntilIdle();
 
   exit(EXIT_FAILURE);
-#endif  // defined(OS_LINUX) && !defined(OS_CHROMEOS)
+#endif  // (defined(OS_LINUX) && !defined(OS_CHROMEOS)) || defined(OS_BSD)
 }
 
 void ChromeBrowserMainExtraPartsViews::ServiceManagerConnectionStarted(
diff --git chrome/browser/ui/views/chrome_views_delegate.h chrome/browser/ui/views/chrome_views_delegate.h
index 867d5b7d3c64..ff616dd24393 100644
--- chrome/browser/ui/views/chrome_views_delegate.h
+++ chrome/browser/ui/views/chrome_views_delegate.h
@@ -43,7 +43,7 @@ class ChromeViewsDelegate : public views::ViewsDelegate {
   HICON GetSmallWindowIcon() const override;
   int GetAppbarAutohideEdges(HMONITOR monitor,
                              const base::Closure& callback) override;
-#elif defined(OS_LINUX) && !defined(OS_CHROMEOS)
+#elif (defined(OS_LINUX) && !defined(OS_CHROMEOS)) || defined(OS_BSD)
   gfx::ImageSkia* GetDefaultWindowIcon() const override;
   bool WindowManagerProvidesTitleBar(bool maximized) override;
 #endif
diff --git chrome/browser/ui/views/first_run_dialog.cc chrome/browser/ui/views/first_run_dialog.cc
index a90d687b119e..10d5f8bd9056 100644
--- chrome/browser/ui/views/first_run_dialog.cc
+++ chrome/browser/ui/views/first_run_dialog.cc
@@ -41,8 +41,10 @@ using views::GridLayout;
 namespace {
 
 void InitCrashReporterIfEnabled(bool enabled) {
+#if !defined(OS_DRAGONFLY)
   if (enabled)
     breakpad::InitCrashReporter(std::string());
+#endif
 }
 
 }  // namespace
diff --git chrome/browser/ui/views/frame/browser_frame.cc chrome/browser/ui/views/frame/browser_frame.cc
index 34168ebdf5bd..7c7e7bea9854 100644
--- chrome/browser/ui/views/frame/browser_frame.cc
+++ chrome/browser/ui/views/frame/browser_frame.cc
@@ -36,7 +36,7 @@
 #include "components/user_manager/user_manager.h"
 #endif
 
-#if defined(OS_LINUX)
+#if defined(OS_LINUX) || defined(OS_BSD)
 #include "chrome/browser/ui/views/frame/browser_command_handler_linux.h"
 #endif
 
@@ -97,7 +97,7 @@ void BrowserFrame::InitBrowserFrame() {
     non_client_view()->set_context_menu_controller(this);
   }
 
-#if defined(OS_LINUX)
+#if defined(OS_LINUX) || defined(OS_BSD)
   browser_command_handler_.reset(new BrowserCommandHandlerLinux(browser_view_));
 #endif
 }
diff --git chrome/browser/ui/views/frame/opaque_browser_frame_view.cc chrome/browser/ui/views/frame/opaque_browser_frame_view.cc
index 09b9db83f04b..9a9c97694d07 100644
--- chrome/browser/ui/views/frame/opaque_browser_frame_view.cc
+++ chrome/browser/ui/views/frame/opaque_browser_frame_view.cc
@@ -38,7 +38,7 @@
 #include "ui/views/window/frame_background.h"
 #include "ui/views/window/window_shape.h"
 
-#if defined(OS_LINUX)
+#if defined(OS_LINUX) || defined(OS_BSD)
 #include "ui/views/controls/menu/menu_runner.h"
 #endif
 
@@ -292,7 +292,7 @@ void OpaqueBrowserFrameView::ButtonPressed(views::Button* sender,
 void OpaqueBrowserFrameView::OnMenuButtonClicked(views::MenuButton* source,
                                                  const gfx::Point& point,
                                                  const ui::Event* event) {
-#if defined(OS_LINUX)
+#if defined(OS_LINUX) || defined(OS_BSD)
   views::MenuRunner menu_runner(frame()->GetSystemMenuModel(),
                                 views::MenuRunner::HAS_MNEMONICS);
   menu_runner.RunMenuAt(browser_view()->GetWidget(), window_icon_,
diff --git chrome/browser/ui/views/frame/opaque_browser_frame_view_platform_specific.cc chrome/browser/ui/views/frame/opaque_browser_frame_view_platform_specific.cc
index c3e5f2683aa6..8d4abec40e73 100644
--- chrome/browser/ui/views/frame/opaque_browser_frame_view_platform_specific.cc
+++ chrome/browser/ui/views/frame/opaque_browser_frame_view_platform_specific.cc
@@ -10,7 +10,7 @@ bool OpaqueBrowserFrameViewPlatformSpecific::IsUsingSystemTheme() {
   return false;
 }
 
-#if !defined(OS_LINUX)
+#if !defined(OS_LINUX) && !defined(OS_BSD)
 
 // static
 OpaqueBrowserFrameViewPlatformSpecific*
diff --git chrome/browser/ui/views/profiles/avatar_button.cc chrome/browser/ui/views/profiles/avatar_button.cc
index 8945445716f6..d67d0ab6c597 100644
--- chrome/browser/ui/views/profiles/avatar_button.cc
+++ chrome/browser/ui/views/profiles/avatar_button.cc
@@ -171,7 +171,7 @@ AvatarButton::AvatarButton(views::ButtonListener* listener,
       label()->font_list().DeriveWithHeightUpperBound(kDisplayFontHeight));
 
   bool apply_ink_drop = IsCondensible();
-#if defined(OS_LINUX)
+#if defined(OS_LINUX) || defined(OS_BSD)
   DCHECK_EQ(AvatarButtonStyle::THEMED, button_style);
   apply_ink_drop = true;
 #endif
@@ -180,7 +180,7 @@ AvatarButton::AvatarButton(views::ButtonListener* listener,
     SetInkDropMode(InkDropMode::ON);
     SetFocusPainter(nullptr);
     constexpr int kIconSize = 16;
-#if defined(OS_LINUX)
+#if defined(OS_LINUX) || defined(OS_BSD)
     set_ink_drop_base_color(SK_ColorWHITE);
     SetBorder(base::MakeUnique<AvatarButtonThemedBorder>());
     generic_avatar_ = gfx::CreateVectorIcon(kProfileSwitcherOutlineIcon,
diff --git chrome/browser/ui/views/tabs/tab.cc chrome/browser/ui/views/tabs/tab.cc
index 38aeef588620..75713e140c71 100644
--- chrome/browser/ui/views/tabs/tab.cc
+++ chrome/browser/ui/views/tabs/tab.cc
@@ -400,25 +400,26 @@ void Tab::ThrobberView::OnPaint(gfx::Canvas* canvas) {
 
   const ui::ThemeProvider* tp = GetThemeProvider();
   const gfx::Rect bounds = GetLocalBounds();
+  base::TimeTicks now(base::TimeTicks::Now());
   if (state == TabRendererData::NETWORK_STATE_WAITING) {
     if (waiting_start_time_ == base::TimeTicks())
-      waiting_start_time_ = base::TimeTicks::Now();
+      waiting_start_time_ = now;
 
-    waiting_state_.elapsed_time = base::TimeTicks::Now() - waiting_start_time_;
+    waiting_state_.elapsed_time = now - waiting_start_time_;
     gfx::PaintThrobberWaiting(
         canvas, bounds,
         tp->GetColor(ThemeProperties::COLOR_TAB_THROBBER_WAITING),
         waiting_state_.elapsed_time);
   } else {
     if (loading_start_time_ == base::TimeTicks())
-      loading_start_time_ = base::TimeTicks::Now();
+      loading_start_time_ = now;
 
     waiting_state_.color =
         tp->GetColor(ThemeProperties::COLOR_TAB_THROBBER_WAITING);
     gfx::PaintThrobberSpinningAfterWaiting(
         canvas, bounds,
         tp->GetColor(ThemeProperties::COLOR_TAB_THROBBER_SPINNING),
-        base::TimeTicks::Now() - loading_start_time_, &waiting_state_);
+        now - loading_start_time_, &waiting_state_);
   }
 }
 
diff --git chrome/browser/ui/views/tabs/tab_drag_controller.cc chrome/browser/ui/views/tabs/tab_drag_controller.cc
index b1060798acf6..fb878a896486 100644
--- chrome/browser/ui/views/tabs/tab_drag_controller.cc
+++ chrome/browser/ui/views/tabs/tab_drag_controller.cc
@@ -261,7 +261,7 @@ void TabDragController::Init(
   //     synchronous on desktop Linux, so use that.
   // - Ash
   //     Releasing capture on Ash cancels gestures so avoid it.
-#if defined(OS_LINUX) || defined(USE_ASH)
+#if defined(OS_LINUX) || defined(USE_ASH) || defined(OS_BSD)
   can_release_capture_ = false;
 #endif
   start_point_in_screen_ = gfx::Point(source_tab_offset, mouse_offset.y());
@@ -606,7 +606,7 @@ TabDragController::DragBrowserToNewTabStrip(
     else
       target_tabstrip->GetWidget()->SetCapture(attached_tabstrip_);
 
-#if !defined(OS_LINUX) || defined(OS_CHROMEOS)
+#if (!defined(OS_LINUX) || defined(OS_CHROMEOS)) && !defined(OS_BSD)
     // EndMoveLoop is going to snap the window back to its original location.
     // Hide it so users don't see this. Hiding a window in Linux aura causes
     // it to lose capture so skip it.
@@ -1796,7 +1796,7 @@ TabDragController::Liveness TabDragController::GetLocalProcessWindow(
     if (dragged_window)
       exclude.insert(dragged_window);
   }
-#if defined(OS_LINUX) && !defined(OS_CHROMEOS)
+#if (defined(OS_LINUX) && !defined(OS_CHROMEOS)) || defined(OS_BSD)
   // Exclude windows which are pending deletion via Browser::TabStripEmpty().
   // These windows can be returned in the Linux Aura port because the browser
   // window which was used for dragging is not hidden once all of its tabs are
diff --git chrome/browser/ui/views/tabs/tab_strip.cc chrome/browser/ui/views/tabs/tab_strip.cc
index 6c5a0194980b..a4ec0deadfb3 100644
--- chrome/browser/ui/views/tabs/tab_strip.cc
+++ chrome/browser/ui/views/tabs/tab_strip.cc
@@ -323,7 +323,7 @@ NewTabButton::NewTabButton(TabStrip* tab_strip, views::ButtonListener* listener)
       tab_strip_(tab_strip),
       destroyed_(NULL) {
   set_animate_on_state_change(true);
-#if defined(OS_LINUX) && !defined(OS_CHROMEOS)
+#if (defined(OS_LINUX) && !defined(OS_CHROMEOS)) || defined(OS_BSD)
   set_triggerable_event_flags(triggerable_event_flags() |
                               ui::EF_MIDDLE_MOUSE_BUTTON);
 #endif
diff --git chrome/browser/ui/webui/about_ui.cc chrome/browser/ui/webui/about_ui.cc
index f3922f56d613..665e68eda492 100644
--- chrome/browser/ui/webui/about_ui.cc
+++ chrome/browser/ui/webui/about_ui.cc
@@ -419,7 +419,8 @@ std::string ChromeURLs() {
   return html;
 }
 
-#if defined(OS_WIN) || defined(OS_MACOSX) || defined(OS_LINUX)
+#if defined(OS_WIN) || defined(OS_MACOSX) || defined(OS_LINUX) || \
+    defined(OS_BSD)
 
 const char kAboutDiscardsRunCommand[] = "run";
 
@@ -579,7 +580,7 @@ std::string AboutDiscards(const std::string& path) {
   return output;
 }
 
-#endif  // OS_WIN || OS_MACOSX || OS_LINUX
+#endif  // OS_WIN || OS_MACOSX || OS_LINUX || OS_BSD
 
 // AboutDnsHandler bounces the request back to the IO thread to collect
 // the DNS information.
@@ -641,7 +642,7 @@ class AboutDnsHandler : public base::RefCountedThreadSafe<AboutDnsHandler> {
   DISALLOW_COPY_AND_ASSIGN(AboutDnsHandler);
 };
 
-#if defined(OS_LINUX) || defined(OS_OPENBSD)
+#if defined(OS_LINUX) || defined(OS_OPENBSD) || defined(OS_BSD)
 std::string AboutLinuxProxyConfig() {
   std::string data;
   AppendHeader(&data, 0,
@@ -716,14 +717,15 @@ void AboutUIHTMLSource::StartDataRequest(
     } else {
       response = raw_response.as_string();
     }
-#if defined(OS_WIN) || defined(OS_MACOSX) || defined(OS_LINUX)
+#if defined(OS_WIN) || defined(OS_MACOSX) || defined(OS_LINUX) || \
+    defined(OS_BSD)
   } else if (source_name_ == chrome::kChromeUIDiscardsHost) {
     response = AboutDiscards(path);
 #endif
   } else if (source_name_ == chrome::kChromeUIDNSHost) {
     AboutDnsHandler::Start(profile(), callback);
     return;
-#if defined(OS_LINUX) || defined(OS_OPENBSD)
+#if defined(OS_LINUX) || defined(OS_OPENBSD) || defined(OS_BSD)
   } else if (source_name_ == chrome::kChromeUILinuxProxyConfigHost) {
     response = AboutLinuxProxyConfig();
 #endif
diff --git chrome/browser/ui/webui/chrome_web_ui_controller_factory.cc chrome/browser/ui/webui/chrome_web_ui_controller_factory.cc
index ad04d3c07d5a..60599250bdf2 100644
--- chrome/browser/ui/webui/chrome_web_ui_controller_factory.cc
+++ chrome/browser/ui/webui/chrome_web_ui_controller_factory.cc
@@ -290,13 +290,14 @@ bool IsAboutUI(const GURL& url) {
 #if !defined(OS_ANDROID)
           || url.host_piece() == chrome::kChromeUITermsHost
 #endif
-#if defined(OS_LINUX) || defined(OS_OPENBSD)
+#if defined(OS_LINUX) || defined(OS_OPENBSD) || defined(OS_BSD)
           || url.host_piece() == chrome::kChromeUILinuxProxyConfigHost
 #endif
 #if defined(OS_CHROMEOS)
           || url.host_piece() == chrome::kChromeUIOSCreditsHost
 #endif
-#if defined(OS_WIN) || defined(OS_MACOSX) || defined(OS_LINUX)
+#if defined(OS_WIN) || defined(OS_MACOSX) || defined(OS_LINUX) || \
+    defined(OS_BSD)
           || url.host_piece() == chrome::kChromeUIDiscardsHost
 #endif
           );  // NOLINT
diff --git chrome/browser/ui/webui/options/browser_options_handler.cc chrome/browser/ui/webui/options/browser_options_handler.cc
index 61ce8bf577cc..257219283e45 100644
--- chrome/browser/ui/webui/options/browser_options_handler.cc
+++ chrome/browser/ui/webui/options/browser_options_handler.cc
@@ -597,13 +597,13 @@ void BrowserOptionsHandler::GetLocalizedValues(base::DictionaryValue* values) {
     {"syncButtonTextStart", IDS_SYNC_SETUP_BUTTON_LABEL},
 #endif  // defined(OS_CHROMEOS)
 
-#if defined(OS_LINUX) && !defined(OS_CHROMEOS)
+#if (defined(OS_LINUX) && !defined(OS_CHROMEOS)) || defined(OS_BSD)
     {"showWindowDecorations", IDS_SHOW_WINDOW_DECORATIONS},
     {"themesNativeButton", IDS_THEMES_GTK_BUTTON},
     {"themesSetClassic", IDS_THEMES_SET_CLASSIC},
 #else
     {"themes", IDS_THEMES_GROUP_NAME},
-#endif  // defined(OS_LINUX) && !defined(OS_CHROMEOS)
+#endif  // defined(OS_LINUX) && !defined(OS_CHROMEOS)) && !defined(OS_BSD)
 
 #if defined(OS_CHROMEOS)
     {"setWallpaper", IDS_SET_WALLPAPER_BUTTON},
@@ -850,7 +850,7 @@ void BrowserOptionsHandler::RegisterMessages() {
       "requestProfilesInfo",
       base::Bind(&BrowserOptionsHandler::HandleRequestProfilesInfo,
                  base::Unretained(this)));
-#if defined(OS_LINUX) && !defined(OS_CHROMEOS)
+#if (defined(OS_LINUX) && !defined(OS_CHROMEOS)) || defined(OS_BSD)
   web_ui()->RegisterMessageCallback(
       "themesSetNative",
       base::Bind(&BrowserOptionsHandler::ThemesSetNative,
@@ -1509,7 +1509,7 @@ void BrowserOptionsHandler::ObserveThemeChanged() {
   ThemeService* theme_service = ThemeServiceFactory::GetForProfile(profile);
   bool is_system_theme = false;
 
-#if defined(OS_LINUX) && !defined(OS_CHROMEOS)
+#if (defined(OS_LINUX) && !defined(OS_CHROMEOS)) || defined(OS_BSD)
   bool profile_is_supervised = profile->IsSupervised();
   is_system_theme = theme_service->UsingSystemTheme();
   base::Value native_theme_enabled(!is_system_theme && !profile_is_supervised);
@@ -1530,7 +1530,7 @@ void BrowserOptionsHandler::ThemesReset(const base::ListValue* args) {
   ThemeServiceFactory::GetForProfile(profile)->UseDefaultTheme();
 }
 
-#if defined(OS_LINUX) && !defined(OS_CHROMEOS)
+#if (defined(OS_LINUX) && !defined(OS_CHROMEOS)) || defined(OS_BSD)
 void BrowserOptionsHandler::ThemesSetNative(const base::ListValue* args) {
   base::RecordAction(UserMetricsAction("Options_GtkThemeSet"));
   Profile* profile = Profile::FromWebUI(web_ui());
diff --git chrome/browser/ui/webui/options/browser_options_handler.h chrome/browser/ui/webui/options/browser_options_handler.h
index 2d117952b04f..121dc0c5e88e 100644
--- chrome/browser/ui/webui/options/browser_options_handler.h
+++ chrome/browser/ui/webui/options/browser_options_handler.h
@@ -214,7 +214,7 @@ class BrowserOptionsHandler
 
   void ObserveThemeChanged();
   void ThemesReset(const base::ListValue* args);
-#if defined(OS_LINUX) && !defined(OS_CHROMEOS)
+#if (defined(OS_LINUX) && !defined(OS_CHROMEOS)) || defined(OS_BSD)
   void ThemesSetNative(const base::ListValue* args);
 #endif
 
diff --git chrome/browser/ui/webui/settings/appearance_handler.cc chrome/browser/ui/webui/settings/appearance_handler.cc
index c863519b3153..cd3623b6b776 100644
--- chrome/browser/ui/webui/settings/appearance_handler.cc
+++ chrome/browser/ui/webui/settings/appearance_handler.cc
@@ -32,7 +32,7 @@ void AppearanceHandler::RegisterMessages() {
       "useDefaultTheme",
       base::Bind(&AppearanceHandler::HandleUseDefaultTheme,
                  base::Unretained(this)));
-#if defined(OS_LINUX) && !defined(OS_CHROMEOS)
+#if (defined(OS_LINUX) && !defined(OS_CHROMEOS)) || defined(OS_BSD)
   web_ui()->RegisterMessageCallback(
       "useSystemTheme",
       base::Bind(&AppearanceHandler::HandleUseSystemTheme,
@@ -50,7 +50,7 @@ void AppearanceHandler::HandleUseDefaultTheme(const base::ListValue* args) {
   ThemeServiceFactory::GetForProfile(profile_)->UseDefaultTheme();
 }
 
-#if defined(OS_LINUX) && !defined(OS_CHROMEOS)
+#if (defined(OS_LINUX) && !defined(OS_CHROMEOS)) || defined(OS_BSD)
 void AppearanceHandler::HandleUseSystemTheme(const base::ListValue* args) {
   if (profile_->IsSupervised())
     NOTREACHED();
diff --git chrome/browser/ui/webui/settings/appearance_handler.h chrome/browser/ui/webui/settings/appearance_handler.h
index a00a9637dc7a..d5c762ca3c92 100644
--- chrome/browser/ui/webui/settings/appearance_handler.h
+++ chrome/browser/ui/webui/settings/appearance_handler.h
@@ -35,7 +35,7 @@ class AppearanceHandler : public SettingsPageUIHandler {
   // Changes the UI theme of the browser to the default theme.
   void HandleUseDefaultTheme(const base::ListValue* args);
 
-#if defined(OS_LINUX) && !defined(OS_CHROMEOS)
+#if (defined(OS_LINUX) && !defined(OS_CHROMEOS)) || defined(OS_BSD)
   // Changes the UI theme of the browser to the system (GTK+) theme.
   void HandleUseSystemTheme(const base::ListValue* args);
 #endif
diff --git chrome/browser/ui/webui/settings/md_settings_localized_strings_provider.cc chrome/browser/ui/webui/settings/md_settings_localized_strings_provider.cc
index b714d9b070f9..d67ee214acd8 100644
--- chrome/browser/ui/webui/settings/md_settings_localized_strings_provider.cc
+++ chrome/browser/ui/webui/settings/md_settings_localized_strings_provider.cc
@@ -330,7 +330,7 @@ void AddAppearanceStrings(content::WebUIDataSource* html_source,
     {"enterCustomWebAddress", IDS_SETTINGS_ENTER_CUSTOM_WEB_ADDRESS},
     {"homeButtonDisabled", IDS_SETTINGS_HOME_BUTTON_DISABLED},
     {"themes", IDS_SETTINGS_THEMES},
-#if defined(OS_LINUX) && !defined(OS_CHROMEOS)
+#if (defined(OS_LINUX) && !defined(OS_CHROMEOS)) || defined(OS_BSD)
     {"systemTheme", IDS_SETTINGS_SYSTEM_THEME},
     {"useSystemTheme", IDS_SETTINGS_USE_SYSTEM_THEME},
     {"classicTheme", IDS_SETTINGS_CLASSIC_THEME},
@@ -348,7 +348,7 @@ void AddAppearanceStrings(content::WebUIDataSource* html_source,
     {"openWallpaperApp", IDS_SETTINGS_OPEN_WALLPAPER_APP},
     {"setWallpaper", IDS_SETTINGS_SET_WALLPAPER},
 #endif
-#if defined(OS_LINUX) && !defined(OS_CHROMEOS)
+#if (defined(OS_LINUX) && !defined(OS_CHROMEOS)) || defined(OS_BSD)
     {"showWindowDecorations", IDS_SHOW_WINDOW_DECORATIONS},
 #endif
 #if defined(OS_MACOSX)
diff --git chrome/browser/ui/webui/welcome_handler.cc chrome/browser/ui/webui/welcome_handler.cc
index 82b10df1e906..a8f8a9387d21 100644
--- chrome/browser/ui/webui/welcome_handler.cc
+++ chrome/browser/ui/webui/welcome_handler.cc
@@ -67,7 +67,7 @@ void WelcomeHandler::HandleUserDecline(const base::ListValue* args) {
   // attempted to sign in.
   result_ = (result_ == WelcomeResult::ATTEMPTED)
                 ? WelcomeResult::ATTEMPTED_DECLINED
-                : result_ = WelcomeResult::DECLINED;
+                : WelcomeResult::DECLINED;
   GoToNewTabPage();
 }
 
diff --git chrome/browser/web_applications/web_app.cc chrome/browser/web_applications/web_app.cc
index 298dcb96d7df..191faca594af 100644
--- chrome/browser/web_applications/web_app.cc
+++ chrome/browser/web_applications/web_app.cc
@@ -58,7 +58,7 @@ namespace {
 #if defined(OS_MACOSX)
 const int kDesiredSizes[] = {16, 32, 128, 256, 512};
 const size_t kNumDesiredSizes = arraysize(kDesiredSizes);
-#elif defined(OS_LINUX)
+#elif defined(OS_LINUX) || defined(OS_BSD)
 // Linux supports icons of any size. FreeDesktop Icon Theme Specification states
 // that "Minimally you should install a 48x48 icon in the hicolor theme."
 const int kDesiredSizes[] = {16, 32, 48, 128, 256, 512};
@@ -501,7 +501,7 @@ void GetIconsInfo(const WebApplicationInfo& app_info,
 }
 #endif
 
-#if defined(OS_LINUX)
+#if defined(OS_LINUX) || defined(OS_BSD)
 std::string GetWMClassFromAppName(std::string app_name) {
   base::i18n::ReplaceIllegalCharactersInPath(&app_name, '_');
   base::TrimString(app_name, "_", &app_name);
diff --git chrome/browser/web_applications/web_app.h chrome/browser/web_applications/web_app.h
index 2c8d2cf559b1..6c28d20b860c 100644
--- chrome/browser/web_applications/web_app.h
+++ chrome/browser/web_applications/web_app.h
@@ -206,7 +206,7 @@ typedef std::vector<WebApplicationInfo::IconInfo> IconInfoList;
 void GetIconsInfo(const WebApplicationInfo& app_info, IconInfoList* icons);
 #endif
 
-#if defined(OS_LINUX)
+#if defined(OS_LINUX) || defined(OS_BSD)
 // Windows that correspond to web apps need to have a deterministic (and
 // different) WMClass than normal chrome windows so the window manager groups
 // them as a separate application.
diff --git chrome/common/BUILD.gn chrome/common/BUILD.gn
index 7f659bdcdccb..a1a955072502 100644
--- chrome/common/BUILD.gn
+++ chrome/common/BUILD.gn
@@ -367,6 +367,11 @@ static_library("common") {
   if (is_chromeos) {
     public_deps += [ "//chromeos" ]
   }
+  if (is_bsd) {
+    sources -= [
+      "component_flash_hint_file_linux.cc",
+    ]
+  }
 
   if (enable_nacl) {
     public_deps += [ "//components/nacl/common" ]
diff --git chrome/common/chrome_features.h chrome/common/chrome_features.h
index 3e6348d79a30..2939047cc81a 100644
--- chrome/common/chrome_features.h
+++ chrome/common/chrome_features.h
@@ -42,9 +42,9 @@ extern const base::Feature kAutoDismissingDialogs;
 extern const base::Feature kAutomaticTabDiscarding;
 #endif  // defined(OS_WIN) || defined(OS_MACOSX)
 
-#if defined(OS_WIN) || defined(OS_LINUX)
+#if defined(OS_WIN) || defined(OS_LINUX) || defined(OS_BSD)
 extern const base::Feature kBackgroundModeAllowRestart;
-#endif  // defined(OS_WIN) || defined(OS_LINUX)
+#endif  // defined(OS_WIN) || defined(OS_LINUX) || defined(OS_BSD)
 
 extern const base::Feature kBackspaceGoesBackFeature;
 
diff --git chrome/common/chrome_paths.cc chrome/common/chrome_paths.cc
index 0506aa8e1928..c23d5c44d8cf 100644
--- chrome/common/chrome_paths.cc
+++ chrome/common/chrome_paths.cc
@@ -65,6 +65,9 @@ const base::FilePath::CharType kFilepathSinglePrefExtensions[] =
 // where it can find the latest component updated flash.
 const base::FilePath::CharType kComponentUpdatedFlashHint[] =
     FILE_PATH_LITERAL("latest-component-updated-flash");
+#elif defined(OS_BSD)
+const base::FilePath::CharType kFilepathSinglePrefExtensions[] =
+    FILE_PATH_LITERAL("/usr/local/share/chromium/extensions");
 #endif  // defined(OS_LINUX)
 
 #if defined(OS_CHROMEOS)
@@ -190,7 +193,7 @@ bool PathProvider(int key, base::FilePath* result) {
         return false;
       break;
     case chrome::DIR_DEFAULT_DOWNLOADS_SAFE:
-#if defined(OS_WIN) || defined(OS_LINUX)
+#if defined(OS_WIN) || defined(OS_LINUX) || defined(OS_BSD)
       if (!GetUserDownloadsDirectorySafe(&cur))
         return false;
       break;
@@ -426,7 +429,7 @@ bool PathProvider(int key, base::FilePath* result) {
       break;
 #endif
 #if BUILDFLAG(ENABLE_SUPERVISED_USERS)
-#if defined(OS_LINUX)
+#if defined(OS_LINUX) || defined(OS_BSD)
     case chrome::DIR_SUPERVISED_USERS_DEFAULT_APPS:
       if (!PathService::Get(chrome::DIR_STANDALONE_EXTERNAL_EXTENSIONS, &cur))
         return false;
@@ -485,7 +488,7 @@ bool PathProvider(int key, base::FilePath* result) {
     }
 #endif
 #if defined(OS_CHROMEOS) || (defined(OS_LINUX) && defined(CHROMIUM_BUILD)) || \
-    defined(OS_MACOSX)
+    defined(OS_MACOSX) || defined(OS_BSD)
     case chrome::DIR_USER_EXTERNAL_EXTENSIONS: {
       if (!PathService::Get(chrome::DIR_USER_DATA, &cur))
         return false;
@@ -493,7 +496,7 @@ bool PathProvider(int key, base::FilePath* result) {
       break;
     }
 #endif
-#if defined(OS_LINUX)
+#if defined(OS_LINUX) || defined(OS_BSD)
     case chrome::DIR_STANDALONE_EXTERNAL_EXTENSIONS: {
       cur = base::FilePath(kFilepathSinglePrefExtensions);
       break;
@@ -528,7 +531,7 @@ bool PathProvider(int key, base::FilePath* result) {
 #endif
       break;
 
-#if defined(OS_LINUX) || defined(OS_MACOSX)
+#if defined(OS_LINUX) || defined(OS_MACOSX) || defined(OS_BSD)
     case chrome::DIR_NATIVE_MESSAGING:
 #if defined(OS_MACOSX)
 #if defined(GOOGLE_CHROME_BUILD)
@@ -538,6 +541,9 @@ bool PathProvider(int key, base::FilePath* result) {
       cur = base::FilePath(FILE_PATH_LITERAL(
           "/Library/Application Support/Chromium/NativeMessagingHosts"));
 #endif
+#elif defined(OS_BSD)
+      cur = base::FilePath(FILE_PATH_LITERAL(
+          "/usr/local/etc/chromium/native-messaging-hosts"));
 #else  // defined(OS_MACOSX)
 #if defined(GOOGLE_CHROME_BUILD)
       cur = base::FilePath(FILE_PATH_LITERAL(
@@ -554,7 +560,7 @@ bool PathProvider(int key, base::FilePath* result) {
         return false;
       cur = cur.Append(FILE_PATH_LITERAL("NativeMessagingHosts"));
       break;
-#endif  // defined(OS_LINUX) || defined(OS_MACOSX)
+#endif  // defined(OS_LINUX) || defined(OS_MACOSX) || defined(OS_BSD)
 #if !defined(OS_ANDROID)
     case chrome::DIR_GLOBAL_GCM_STORE:
       if (!PathService::Get(chrome::DIR_USER_DATA, &cur))
diff --git chrome/common/chrome_paths.h chrome/common/chrome_paths.h
index 0924105ef1f2..ccdc4e8da740 100644
--- chrome/common/chrome_paths.h
+++ chrome/common/chrome_paths.h
@@ -52,7 +52,7 @@ enum {
                                 // contains subdirectories.
 #endif
 #if defined(OS_CHROMEOS) || (defined(OS_LINUX) && defined(CHROMIUM_BUILD)) || \
-    defined(OS_MACOSX)
+    defined(OS_MACOSX) || defined(OS_BSD)
   DIR_USER_EXTERNAL_EXTENSIONS,  // Directory for per-user external extensions
                                  // on Chrome Mac and Chromium Linux.
                                  // On Chrome OS, this path is used for OEM
@@ -60,7 +60,7 @@ enum {
                                  // create it.
 #endif
 
-#if defined(OS_LINUX)
+#if defined(OS_LINUX) || defined(OS_BSD)
   DIR_STANDALONE_EXTERNAL_EXTENSIONS,  // Directory for 'per-extension'
                                        // definition manifest files that
                                        // describe extensions which are to be
@@ -113,7 +113,7 @@ enum {
   DIR_SUPERVISED_USER_INSTALLED_WHITELISTS,  // Directory where sanitized
                                              // supervised user whitelists are
                                              // installed.
-#if defined(OS_LINUX) || defined(OS_MACOSX)
+#if defined(OS_LINUX) || defined(OS_MACOSX) || defined(OS_BSD)
   DIR_NATIVE_MESSAGING,         // System directory where native messaging host
                                 // manifest files are stored.
   DIR_USER_NATIVE_MESSAGING,    // Directory with Native Messaging Hosts
diff --git chrome/common/chrome_paths_internal.h chrome/common/chrome_paths_internal.h
index ab8129354263..ed84666c08a5 100644
--- chrome/common/chrome_paths_internal.h
+++ chrome/common/chrome_paths_internal.h
@@ -45,7 +45,7 @@ void GetUserCacheDirectory(const base::FilePath& profile_dir, base::FilePath* re
 // Get the path to the user's documents directory.
 bool GetUserDocumentsDirectory(base::FilePath* result);
 
-#if defined(OS_WIN) || defined(OS_LINUX)
+#if defined(OS_WIN) || defined(OS_LINUX) || defined(OS_BSD)
 // Gets the path to a safe default download directory for a user.
 bool GetUserDownloadsDirectorySafe(base::FilePath* result);
 #endif
diff --git chrome/common/chrome_switches.cc chrome/common/chrome_switches.cc
index 047c0a98fcfd..56f46de6d81f 100644
--- chrome/common/chrome_switches.cc
+++ chrome/common/chrome_switches.cc
@@ -1150,13 +1150,13 @@ const char kAllowNaClSocketAPI[]            = "allow-nacl-socket-api";
 const char kEnableWaylandServer[] = "enable-wayland-server";
 #endif
 
-#if defined(OS_WIN) || defined(OS_LINUX)
+#if defined(OS_WIN) || defined(OS_LINUX) || defined(OS_BSD)
 extern const char kDisableInputImeAPI[] = "disable-input-ime-api";
 extern const char kEnableInputImeAPI[] = "enable-input-ime-api";
 #endif
 
 #if defined(OS_CHROMEOS) || defined(OS_LINUX) || defined(OS_MACOSX) || \
-    defined(OS_WIN)
+    defined(OS_WIN) || defined(OS_BSD)
 extern const char kEnableNewAppMenuIcon[] = "enable-new-app-menu-icon";
 #endif
 
diff --git chrome/common/chrome_switches.h chrome/common/chrome_switches.h
index a6ec4256cf43..9165b24934ec 100644
--- chrome/common/chrome_switches.h
+++ chrome/common/chrome_switches.h
@@ -349,13 +349,13 @@ extern const char kAllowNaClSocketAPI[];
 extern const char kEnableWaylandServer[];
 #endif
 
-#if defined(OS_WIN) || defined(OS_LINUX)
+#if defined(OS_WIN) || defined(OS_LINUX) || defined(OS_BSD)
 extern const char kDisableInputImeAPI[];
 extern const char kEnableInputImeAPI[];
 #endif
 
 #if defined(OS_CHROMEOS) || defined(OS_LINUX) || defined(OS_MACOSX) || \
-    defined(OS_WIN)
+    defined(OS_WIN) || defined(OS_BSD)
 extern const char kEnableNewAppMenuIcon[];
 #endif
 
diff --git chrome/common/extensions/api/BUILD.gn chrome/common/extensions/api/BUILD.gn
index fb5103053da6..6582b999acab 100644
--- chrome/common/extensions/api/BUILD.gn
+++ chrome/common/extensions/api/BUILD.gn
@@ -121,7 +121,7 @@ if (is_chromeos) {
     "wallpaper.json",
     "wallpaper_private.json",
   ]
-} else if (is_linux || is_win) {
+} else if (is_linux || is_win || is_bsd) {
   schema_sources += [ "input_ime.json" ]
 }
 if (enable_service_discovery) {
diff --git chrome/common/features.gni chrome/common/features.gni
index 6dc3771def34..fe05486d6026 100644
--- chrome/common/features.gni
+++ chrome/common/features.gni
@@ -47,7 +47,7 @@ declare_args() {
       is_android || is_mac || (is_desktop_linux && use_dbus)
 
   enable_one_click_signin =
-      is_win || is_mac || (is_linux && !is_chromeos && !is_chromecast)
+      is_win || is_mac || (is_linux && !is_chromeos && !is_chromecast) || is_bsd
 
   # Set to true to bundle all the mash related mojo services into chrome.
   # Specify --mash to chrome to have chrome start the mash environment.
@@ -71,7 +71,7 @@ declare_args() {
   # for runtime performance purposes. This does more work at compile time for
   # speed benefits at runtime (so we skip in debug builds). TODO(dbeam): rename
   # this flag "optimize_web_uis" because we run more than vulcanize these days.
-  use_vulcanize = !is_debug
+  use_vulcanize = !is_debug && !is_bsd
 }
 
 # Use brlapi from brltty for braille display support.
diff --git chrome/common/pref_names.cc chrome/common/pref_names.cc
index 7b2eb7feadba..80f66a886a40 100644
--- chrome/common/pref_names.cc
+++ chrome/common/pref_names.cc
@@ -1019,7 +1019,7 @@ const char kForceSessionSync[] = "settings.history_recorded";
 // only using an account that belongs to one of the domains from this pref.
 const char kAllowedDomainsForApps[] = "settings.allowed_domains_for_apps";
 
-#if defined(OS_LINUX) && !defined(OS_CHROMEOS)
+#if (defined(OS_LINUX) && !defined(OS_CHROMEOS)) || defined(OS_BSD)
 // Linux specific preference on whether we should match the system theme.
 const char kUsesSystemTheme[] = "extensions.theme.use_system";
 #endif
@@ -1106,7 +1106,7 @@ const char kShowUpdatePromotionInfoBar[] =
     "browser.show_update_promotion_info_bar";
 #endif
 
-#if defined(OS_LINUX) && !defined(OS_CHROMEOS)
+#if (defined(OS_LINUX) && !defined(OS_CHROMEOS)) || defined(OS_BSD)
 // Boolean that is false if we should show window manager decorations.  If
 // true, we draw a custom chrome frame (thicker title bar and blue border).
 const char kUseCustomChromeFrame[] = "browser.custom_chrome_frame";
@@ -1485,7 +1485,8 @@ const char kDownloadDefaultDirectory[] = "download.default_directory";
 // upgrade a unsafe location to a safe location.
 const char kDownloadDirUpgraded[] = "download.directory_upgrade";
 
-#if defined(OS_WIN) || defined(OS_LINUX) || defined(OS_MACOSX)
+#if defined(OS_WIN) || defined(OS_LINUX) || defined(OS_MACOSX) || \
+    defined(OS_BSD)
 const char kOpenPdfDownloadInSystemReader[] =
     "download.open_pdf_in_system_reader";
 #endif
diff --git chrome/common/pref_names.h chrome/common/pref_names.h
index d6b5718aaf32..6e3634a79a69 100644
--- chrome/common/pref_names.h
+++ chrome/common/pref_names.h
@@ -339,7 +339,7 @@ extern const char kForceGoogleSafeSearch[];
 extern const char kForceYouTubeRestrict[];
 extern const char kForceSessionSync[];
 extern const char kAllowedDomainsForApps[];
-#if defined(OS_LINUX) && !defined(OS_CHROMEOS)
+#if (defined(OS_LINUX) && !defined(OS_CHROMEOS)) || defined(OS_BSD)
 extern const char kUsesSystemTheme[];
 #endif
 extern const char kCurrentThemePackFilename[];
@@ -372,7 +372,7 @@ extern const char kDefaultBrowserSettingEnabled[];
 #if defined(OS_MACOSX)
 extern const char kShowUpdatePromotionInfoBar[];
 #endif
-#if defined(OS_LINUX) && !defined(OS_CHROMEOS)
+#if (defined(OS_LINUX) && !defined(OS_CHROMEOS)) || defined(OS_BSD)
 extern const char kUseCustomChromeFrame[];
 #endif
 extern const char kBackShortcutBubbleShownCount[];
@@ -531,7 +531,8 @@ extern const char kAppWindowPlacement[];
 extern const char kDownloadDefaultDirectory[];
 extern const char kDownloadExtensionsToOpen[];
 extern const char kDownloadDirUpgraded[];
-#if defined(OS_WIN) || defined(OS_LINUX) || defined(OS_MACOSX)
+#if defined(OS_WIN) || defined(OS_LINUX) || defined(OS_MACOSX) || \
+    defined(OS_BSD)
 extern const char kOpenPdfDownloadInSystemReader[];
 #endif
 
diff --git chrome/common/url_constants.cc chrome/common/url_constants.cc
index d21a5c80495c..8d22d804464c 100644
--- chrome/common/url_constants.cc
+++ chrome/common/url_constants.cc
@@ -159,7 +159,8 @@ const char kChromeUIMediaRouterURL[] = "chrome://media-router/";
 const char kChromeUICastURL[] = "chrome://cast/";
 #endif
 
-#if defined(OS_WIN) || defined(OS_MACOSX) || defined(OS_LINUX)
+#if defined(OS_WIN) || defined(OS_MACOSX) || defined(OS_LINUX) || \
+    defined(OS_BSD)
 const char kChromeUIDiscardsHost[] = "discards";
 const char kChromeUIDiscardsURL[] = "chrome://discards/";
 #endif
diff --git chrome/common/url_constants.h chrome/common/url_constants.h
index caade9df9a33..168ac0c35d55 100644
--- chrome/common/url_constants.h
+++ chrome/common/url_constants.h
@@ -144,7 +144,8 @@ extern const char kChromeUIMediaRouterURL[];
 extern const char kChromeUICastURL[];
 #endif
 
-#if defined(OS_WIN) || defined(OS_MACOSX) || defined(OS_LINUX)
+#if defined(OS_WIN) || defined(OS_MACOSX) || defined(OS_LINUX) || \
+    defined(OS_BSD)
 extern const char kChromeUIDiscardsHost[];
 extern const char kChromeUIDiscardsURL[];
 #endif
diff --git chrome/service/service_process.cc chrome/service/service_process.cc
index 64bcfb8ef1d7..a5544a3b7574 100644
--- chrome/service/service_process.cc
+++ chrome/service/service_process.cc
@@ -149,7 +149,7 @@ bool ServiceProcess::Initialize(base::MessageLoopForUI* message_loop,
   // GLib type system initialization is needed for gconf.
   g_type_init();
 #endif
-#endif  // defined(OS_LINUX) || defined(OS_OPENBSD)
+#endif  // defined(USE_GLIB)
   main_message_loop_ = message_loop;
   service_process_state_.reset(state);
   network_change_notifier_.reset(net::NetworkChangeNotifier::Create());
diff --git chrome/test/BUILD.gn chrome/test/BUILD.gn
index c090e7af0ba1..b3f25a763e38 100644
--- chrome/test/BUILD.gn
+++ chrome/test/BUILD.gn
@@ -193,11 +193,7 @@ static_library("test_support") {
     ]
   }
 
-  if (enable_offline_pages) {
-    public_deps += [ "//components/offline_pages/core:test_support" ]
-  }
-
-  if (is_linux) {
+  if (is_linux || is_bsd) {
     public_deps += [ "//crypto:platform" ]
   }
   if (is_mac) {
@@ -512,7 +508,7 @@ if (!is_android) {
       "$root_out_dir/test_page.css.mock-http-headers",
       "$root_out_dir/ui_test.pak",
     ]
-    if (is_linux || is_win) {
+    if (is_linux || is_win || is_bsd) {
       data += [
         "$root_out_dir/chrome_100_percent.pak",
         "$root_out_dir/chrome_200_percent.pak",
@@ -632,9 +628,9 @@ if (!is_android) {
           "base/interactive_test_utils_views.cc",
         ]
       }
-      if (is_linux) {
+      if (is_linux || is_bsd) {
         if (!is_chromeos) {
-          # Desktop linux.
+          # Desktop linux or BSD.
           sources -= [
             # TODO(port): This times out. Attempts have been made to fix the
             # individual failures, but each time I disable a test from these
@@ -1936,7 +1932,7 @@ test("browser_tests") {
         ]
         deps += [ "//chrome/browser/chromeos" ]
         data_deps += [ "//third_party/liblouis:liblouis_test_data" ]
-      } else if (is_linux || is_win) {
+      } else if (is_linux || is_win || is_bsd) {
         sources += [
           "../browser/ui/views/ime/ime_warning_bubble_browsertest.cc",
           "../browser/ui/views/ime/ime_window_browsertest.cc",
@@ -2102,7 +2098,7 @@ test("browser_tests") {
       }
     }
 
-    if (is_linux && !is_component_build) {
+    if ((is_linux && !is_component_build) || is_bsd) {
       # Set rpath to find the CDM adapter even in a non-component build.
       configs += [ "//build/config/gcc:rpath_for_built_shared_libraries" ]
     }
@@ -2331,7 +2327,7 @@ test("browser_tests") {
       if (toolkit_views) {
         sources -= [ "../browser/ui/views/select_file_dialog_extension_browsertest.cc" ]
       }
-      if (is_win || is_linux) {
+      if (is_win || is_linux || is_bsd) {
         sources +=
             [ "../browser/ui/views/ime/input_ime_apitest_nonchromeos.cc" ]
       }
@@ -2500,7 +2496,7 @@ test("browser_tests") {
       ]
       deps += [ "//components/wifi:test_support" ]
     }
-    if (is_linux || is_win) {
+    if (is_linux || is_win || is_bsd) {
       sources += [
         # This test is for the spelling options submenu that's only for Windows,
         # ChromeOS, and Linux.
@@ -2516,7 +2512,7 @@ test("browser_tests") {
         "../browser/extensions/api/networking_private/networking_private_chromeos_apitest.cc",
       ]
     }
-    if (is_mac || is_win || (is_linux && !is_chromeos)) {
+    if (is_mac || is_win || (is_linux && !is_chromeos) || is_bsd) {
       sources += [
         # Tests for non mobile and non CrOS (includes Linux, Win, Mac).
         "../browser/metrics/desktop_session_duration/audible_contents_tracker_browsertest.cc",
@@ -2696,7 +2692,7 @@ if (!is_android) {
       "//testing/xvfb.py",
     ]
 
-    if (is_linux || is_win) {
+    if (is_linux || is_win || is_bsd) {
       data += [
         "$root_out_dir/chrome_100_percent.pak",
         "$root_out_dir/chrome_200_percent.pak",
@@ -3387,14 +3383,14 @@ test("unit_tests") {
     "//tools/metrics/histograms/enums.xml",
     "$root_out_dir/pyproto/google/",
   ]
-  if (is_android || is_linux || is_win) {
+  if (is_android || is_linux || is_win || is_bsd) {
     data += [
       "$root_out_dir/chrome_100_percent.pak",
       "$root_out_dir/locales/en-US.pak",
       "$root_out_dir/resources.pak",
     ]
   }
-  if (is_linux || is_win) {
+  if (is_linux || is_win || is_bsd) {
     data += [ "$root_out_dir/chrome_200_percent.pak" ]
   }
   if (is_win) {
@@ -3766,7 +3762,7 @@ test("unit_tests") {
     sources += [ "../browser/notifications/notification_platform_bridge_linux_unittest.cc" ]
   }
 
-  if (is_linux || is_win) {
+  if (is_linux || is_win || is_bsd) {
     sources += [ "../browser/webshare/share_service_impl_unittest.cc" ]
   }
 
@@ -4171,7 +4167,7 @@ test("unit_tests") {
       "//ui/wm",
     ]
   }
-  if (!is_chromeos && is_linux) {
+  if ((!is_chromeos && is_linux) || is_bsd) {
     sources += [
       "../browser/password_manager/native_backend_kwallet_x_unittest.cc",
       "../browser/shell_integration_linux_unittest.cc",
@@ -4193,7 +4189,7 @@ test("unit_tests") {
   if (use_gio) {
     deps += [ "//build/linux/libgio" ]
   }
-  if (!is_chromeos && !use_ozone && is_linux) {
+  if (!use_ozone && ((!is_chromeos && is_linux) || is_bsd)) {
     deps += [ "//chrome/browser/ui/libgtkui" ]
   }
 
@@ -4420,12 +4416,12 @@ test("unit_tests") {
       "//components/os_crypt:gnome_keyring_direct",
     ]
   }
-  if (is_linux && !is_chromeos && !use_ozone) {
+  if (((is_linux && !is_chromeos) || is_bsd) && !use_ozone) {
     sources +=
         [ "../browser/password_manager/native_backend_libsecret_unittest.cc" ]
     deps += [ "//third_party/libsecret" ]
   }
-  if (is_linux && use_aura) {
+  if ((is_linux || is_bsd) && use_aura) {
     deps += [ "//ui/aura:test_support" ]
     if (use_dbus) {
       deps += [ "//dbus:test_support" ]
@@ -4953,6 +4949,11 @@ if (!is_android) {
       "//components/flags_ui:switches",
       "//gpu/config:crash_keys",
     ]
+    if (is_bsd) {
+      deps -= [
+        "//breakpad:client",
+      ]
+    }
   }
 }
 
@@ -5020,7 +5021,7 @@ if (!is_android && !is_chromecast) {
       sources -= [ "perf/mach_ports_performancetest.cc" ]
     }
 
-    if (is_linux || is_win) {
+    if (is_linux || is_win || is_bsd) {
       data += [
         "$root_out_dir/chrome_100_percent.pak",
         "$root_out_dir/chrome_200_percent.pak",
diff --git components/BUILD.gn components/BUILD.gn
index 0c176a8e2733..17fe573d6405 100644
--- components/BUILD.gn
+++ components/BUILD.gn
@@ -44,7 +44,7 @@ test("components_unittests") {
     "test/run_all_unittests.cc",
   ]
 
-  if (is_android || is_linux || is_mac || is_win) {
+  if (is_android || is_linux || is_mac || is_win || is_bsd) {
     data = [
       "test/data/",
 
@@ -172,6 +172,12 @@ test("components_unittests") {
       "//components/translate/ios/browser:unit_tests",
     ]
   } else {  # !iOS
+    if (!is_bsd) {
+      deps += [
+        "//components/crash/content/app:unit_tests",
+        "//components/crash/core/common:unit_tests",
+      ]
+    }
     deps += [
       "//components/autofill/content/browser:unit_tests",
       "//components/autofill/content/common:unit_tests",
@@ -180,8 +186,6 @@ test("components_unittests") {
       "//components/certificate_reporting:unit_tests",
       "//components/certificate_transparency:unit_tests",
       "//components/contextual_search:unit_tests",
-      "//components/crash/content/app:unit_tests",
-      "//components/crash/core/common:unit_tests",
       "//components/data_reduction_proxy/content/browser:unit_tests",
       "//components/data_reduction_proxy/core/browser:unit_tests",
       "//components/data_reduction_proxy/core/common:unit_tests",
@@ -242,7 +246,7 @@ test("components_unittests") {
     deps += [ ":components_tests_pak_bundle_data" ]
   }
 
-  if (is_mac || is_linux) {
+  if (is_mac || is_linux || is_bsd) {
     data_deps += [ "//content/shell:pak" ]
   }
 
@@ -474,7 +478,7 @@ if (!is_ios) {
       ]
     }
 
-    if (is_linux) {
+    if (is_linux || is_bsd) {
       # content_extractor_browsertest is a standalone content extraction tool built as
       # a MANUAL component_browsertest.
       sources += [ "dom_distiller/standalone/content_extractor_browsertest.cc" ]
diff --git components/autofill/core/browser/autofill_experiments.cc components/autofill/core/browser/autofill_experiments.cc
index e667d8963694..28c577a626a9 100644
--- components/autofill/core/browser/autofill_experiments.cc
+++ components/autofill/core/browser/autofill_experiments.cc
@@ -163,7 +163,7 @@ unsigned int GetPopupMargin() {
 }
 
 bool OfferStoreUnmaskedCards() {
-#if defined(OS_LINUX) && !defined(OS_CHROMEOS)
+#if (defined(OS_LINUX) && !defined(OS_CHROMEOS)) || defined(OS_BSD)
   // The checkbox can be forced on with a flag, but by default we don't store
   // on Linux due to lack of system keychain integration. See crbug.com/162735
   return base::CommandLine::ForCurrentProcess()->HasSwitch(
diff --git components/autofill/core/browser/autofill_manager.h components/autofill/core/browser/autofill_manager.h
index a0d7514073a9..a25ad0b9bb23 100644
--- components/autofill/core/browser/autofill_manager.h
+++ components/autofill/core/browser/autofill_manager.h
@@ -39,7 +39,8 @@
 // is here to make it easier to delete this code when the test is complete,
 // and to prevent adding the code on mobile where there is no desktop (the
 // debug dump file is written to the desktop) or command-line flags to enable.
-#if defined(OS_WIN) || defined(OS_MACOSX) || defined(OS_LINUX)
+#if defined(OS_WIN) || defined(OS_MACOSX) || defined(OS_LINUX) || \
+    defined(OS_BSD)
 #define ENABLE_FORM_DEBUG_DUMP
 #endif
 
diff --git components/content_settings/core/browser/website_settings_registry.cc components/content_settings/core/browser/website_settings_registry.cc
index 4d49cef938cc..3c79ef150449 100644
--- components/content_settings/core/browser/website_settings_registry.cc
+++ components/content_settings/core/browser/website_settings_registry.cc
@@ -68,6 +68,9 @@ const WebsiteSettingsInfo* WebsiteSettingsRegistry::Register(
 #elif defined(OS_LINUX) && !defined(OS_CHROMEOS)
   if (!(platform & PLATFORM_LINUX))
     return nullptr;
+#elif defined(OS_DRAGONFLY)
+  if (!(platform & PLATFORM_LINUX))
+    return nullptr;
 #elif defined(OS_MACOSX) && !defined(OS_IOS)
   if (!(platform & PLATFORM_MAC))
     return nullptr;
diff --git components/cookie_config/cookie_store_util.cc components/cookie_config/cookie_store_util.cc
index c1aa494335c0..c6d76e192bd3 100644
--- components/cookie_config/cookie_store_util.cc
+++ components/cookie_config/cookie_store_util.cc
@@ -11,7 +11,8 @@
 
 namespace cookie_config {
 
-#if defined(OS_WIN) || defined(OS_MACOSX) || defined(OS_LINUX)
+#if defined(OS_WIN) || defined(OS_MACOSX) || defined(OS_LINUX) || \
+    defined(OS_BSD)
 namespace {
 
 // Use the operating system's mechanisms to encrypt cookies before writing
@@ -63,10 +64,10 @@ base::LazyInstance<CookieOSCryptoDelegate>::DestructorAtExit
 net::CookieCryptoDelegate* GetCookieCryptoDelegate() {
   return g_cookie_crypto_delegate.Pointer();
 }
-#else   // defined(OS_WIN) || defined(OS_MACOSX) || defined(OS_LINUX)
+#else   // defined(OS_WIN) || defined(OS_MACOSX) || defined(OS_LINUX) || defined(OS_BSD)
 net::CookieCryptoDelegate* GetCookieCryptoDelegate() {
   return NULL;
 }
-#endif  // defined(OS_WIN) || defined(OS_MACOSX) || defined(OS_LINUX)
+#endif  // defined(OS_WIN) || defined(OS_MACOSX) || defined(OS_LINUX) || defined(OS_BSD)
 
 }  // namespace cookie_config
diff --git components/crash/content/app/BUILD.gn components/crash/content/app/BUILD.gn
index 308a8b5e442e..fd2edd15d4c8 100644
--- components/crash/content/app/BUILD.gn
+++ components/crash/content/app/BUILD.gn
@@ -153,7 +153,7 @@ source_set("app_non_mac_win") {
       "//breakpad:breakpad_handler",
       "//sandbox",
     ]
-  } else if (is_posix && !is_ios) {
+  } else if (is_posix && !is_ios && !is_bsd) {
     deps += [ "//breakpad:client" ]
   }
 }
diff --git components/crash/content/browser/BUILD.gn components/crash/content/browser/BUILD.gn
index 31fb1d1aeb04..9b07c5d50445 100644
--- components/crash/content/browser/BUILD.gn
+++ components/crash/content/browser/BUILD.gn
@@ -16,11 +16,15 @@ source_set("browser") {
 
   deps = [
     "//base",
-    "//breakpad:client",
-    "//components/crash/content/app",
     "//content/public/browser",
     "//content/public/common",
   ]
+  if (!is_bsd) {
+    deps += [
+      "//breakpad:client",
+      "//components/crash/content/app",
+    ]
+  }
 
   if (is_linux || is_android) {
     set_sources_assignment_filter([])
@@ -38,7 +42,7 @@ source_set("browser") {
 
   # This is not in the GYP build but this target includes breakpad client
   # headers, so add the dependency here.
-  if (is_posix && !is_ios) {
+  if (is_posix && !is_ios && !is_bsd) {
     configs += [ "//breakpad:client_config" ]
     public_configs = [ "//breakpad:client_config" ]
   }
diff --git components/filesystem/file_system_app.cc components/filesystem/file_system_app.cc
index fc89c115e085..3a9136ae1254 100644
--- components/filesystem/file_system_app.cc
+++ components/filesystem/file_system_app.cc
@@ -21,7 +21,7 @@
 #elif defined(OS_ANDROID)
 #include "base/base_paths_android.h"
 #include "base/path_service.h"
-#elif defined(OS_LINUX)
+#elif defined(OS_LINUX) || defined(OS_BSD)
 #include "base/environment.h"
 #include "base/nix/xdg_util.h"
 #elif defined(OS_MACOSX)
@@ -76,7 +76,7 @@ base::FilePath FileSystemApp::GetUserDataDir() {
     CHECK(PathService::Get(base::DIR_APP_DATA, &path));
 #elif defined(OS_ANDROID)
     CHECK(PathService::Get(base::DIR_ANDROID_APP_DATA, &path));
-#elif defined(OS_LINUX)
+#elif defined(OS_LINUX) || defined(OS_BSD)
     std::unique_ptr<base::Environment> env(base::Environment::Create());
     path = base::nix::GetXDGDirectory(env.get(),
                                       base::nix::kXdgConfigHomeEnvVar,
diff --git components/flags_ui/flags_state.cc components/flags_ui/flags_state.cc
index d89c3629c352..95a10d9fcde5 100644
--- components/flags_ui/flags_state.cc
+++ components/flags_ui/flags_state.cc
@@ -567,7 +567,8 @@ int FlagsState::GetCurrentPlatform() {
   return kOsWin;
 #elif defined(OS_CHROMEOS)  // Needs to be before the OS_LINUX check.
   return kOsCrOS;
-#elif defined(OS_LINUX) || defined(OS_OPENBSD)
+#elif defined(OS_LINUX) || defined(OS_OPENBSD) || defined(OS_FREEBSD) || \
+      defined(OS_DRAGONFLY)
   return kOsLinux;
 #elif defined(OS_ANDROID)
   return kOsAndroid;
diff --git components/metrics/BUILD.gn components/metrics/BUILD.gn
index 1d03801d2c92..4837cced3123 100644
--- components/metrics/BUILD.gn
+++ components/metrics/BUILD.gn
@@ -121,6 +121,14 @@ static_library("metrics") {
     sources -= [ "machine_id_provider_stub.cc" ]
     deps += [ "//components/browser_watcher:stability_client" ]
   }
+
+  if (is_bsd) {
+    sources -= [
+      "drive_metrics_provider.cc",
+      "drive_metrics_provider_linux.cc",
+      "system_memory_stats_recorder_linux.cc",
+    ]
+  }
 }
 
 if (!is_ios) {
@@ -317,7 +325,7 @@ static_library("test_support") {
   ]
 }
 
-if (is_linux) {
+if (is_linux || is_bsd) {
   static_library("serialization") {
     sources = [
       "serialization/metric_sample.cc",
@@ -381,7 +389,7 @@ source_set("unit_tests") {
     "//ui/gfx/geometry",
   ]
 
-  if (is_linux) {
+  if (is_linux || is_bsd) {
     sources += [ "serialization/serialization_utils_unittest.cc" ]
     deps += [ ":serialization" ]
   }
diff --git components/new_or_sad_tab_strings.grdp components/new_or_sad_tab_strings.grdp
index ca8f3c6db3d4..72a13d957fbf 100644
--- components/new_or_sad_tab_strings.grdp
+++ components/new_or_sad_tab_strings.grdp
@@ -58,7 +58,7 @@
           Open page in Incognito mode (⇧⌘N)
         </message>
       </if>
-      <if expr="is_win or is_linux or chromeos">
+      <if expr="is_win or is_linux or chromeos or is_bsd">
         <message name="IDS_SAD_TAB_RELOAD_INCOGNITO" desc="One of the bullet points displayed on the web page if a reload failed to fix the issue, advising the user to open the web page in Chrome's Incognito mode." formatter_data="android_java">
           Open page in Incognito mode (Ctrl-Shift-N)
         </message>
@@ -68,8 +68,8 @@
           Open page in Incognito mode
         </message>
       </if>
-      <if expr="is_macosx or chromeos">
-        <message name="IDS_SAD_TAB_RELOAD_CLOSE_TABS" desc="One of the bullet points displayed on the web page if a reload failed to fix the issue, advising the user to close other Chrome tabs or apps running on their computer (Mac, Chrome OS)." formatter_data="android_java">
+      <if expr="is_macosx or chromeos or is_bsd">
+        <message name="IDS_SAD_TAB_RELOAD_CLOSE_TABS" desc="One of the bullet points displayed on the web page if a reload failed to fix the issue, advising the user to close other Chrome tabs or apps running on their computer (Mac, Chrome OS, BSD)." formatter_data="android_java">
           Close other tabs or apps
         </message>
       </if>
@@ -78,7 +78,7 @@
           Close other tabs or programs
         </message>
       </if>
-      <if expr="is_macosx or chromeos or is_android or is_ios">
+      <if expr="is_macosx or chromeos or is_android or is_ios or is_bsd">
         <message name="IDS_SAD_TAB_RELOAD_CLOSE_NOTABS" desc="One of the bullet points displayed on the web page if a reload failed to fix the issue, advising the user to close other apps running on their computer or device." formatter_data="android_java">
           Close other apps
         </message>
@@ -98,7 +98,7 @@
           Restart Chromium
         </message>
       </if>
-      <if expr="is_win or is_linux or is_macosx or chromeos">
+      <if expr="is_win or is_linux or is_macosx or chromeos or is_bsd">
         <message name="IDS_SAD_TAB_RELOAD_RESTART_DEVICE" desc="One of the bullet points displayed on the web page if a reload failed to fix the issue, advising the user to restart their computer." formatter_data="android_java">
           Restart your computer
         </message>
diff --git components/os_crypt/features.gni components/os_crypt/features.gni
index f67c8b9728d0..e6cea98071ce 100644
--- components/os_crypt/features.gni
+++ components/os_crypt/features.gni
@@ -7,5 +7,5 @@ import("//build/config/ui.gni")
 declare_args() {
   # Whether to use libgnome-keyring (deprecated by libsecret).
   # See http://crbug.com/466975 and http://crbug.com/355223.
-  use_gnome_keyring = is_desktop_linux && use_glib
+  use_gnome_keyring = is_desktop_linux && use_glib && current_os != "dragonfly"
 }
diff --git components/os_crypt/os_crypt.h components/os_crypt/os_crypt.h
index b03d72608d6b..ab2ead2f2c27 100644
--- components/os_crypt/os_crypt.h
+++ components/os_crypt/os_crypt.h
@@ -13,9 +13,9 @@
 #include "base/strings/string16.h"
 #include "build/build_config.h"
 
-#if defined(OS_LINUX) && !defined(OS_CHROMEOS)
+#if (defined(OS_LINUX) && !defined(OS_CHROMEOS)) || defined(OS_BSD)
 #include "components/os_crypt/key_storage_linux.h"
-#endif  // defined(OS_LINUX) && !defined(OS_CHROMEOS)
+#endif  // (defined(OS_LINUX) && !defined(OS_CHROMEOS)) || defined(OS_BSD)
 
 // The OSCrypt class gives access to simple encryption and decryption of
 // strings. Note that on Mac, access to the system Keychain is required and
@@ -23,7 +23,7 @@
 // true for Linux, if a password management tool is available.
 class OSCrypt {
  public:
-#if defined(OS_LINUX) && !defined(OS_CHROMEOS)
+#if (defined(OS_LINUX) && !defined(OS_CHROMEOS)) || defined(OS_BSD)
   // If |store_type| is a known password store, we will attempt to use it.
   // In any other case, we default to auto-detecting the store.
   // This should not be changed after OSCrypt has been used.
@@ -41,7 +41,7 @@ class OSCrypt {
 
   // Returns true iff the real secret key (not hardcoded one) is available.
   static bool IsEncryptionAvailable();
-#endif  // defined(OS_LINUX) && !defined(OS_CHROMEOS)
+#endif  // (defined(OS_LINUX) && !defined(OS_CHROMEOS)) || defined(OS_BSD)
 
   // Encrypt a string16. The output (second argument) is really an array of
   // bytes, but we're passing it back as a std::string.
@@ -74,7 +74,8 @@ class OSCrypt {
   DISALLOW_IMPLICIT_CONSTRUCTORS(OSCrypt);
 };
 
-#if defined(OS_LINUX) && !defined(OS_CHROMEOS) && defined(UNIT_TEST)
+#if ((defined(OS_LINUX) && !defined(OS_CHROMEOS)) || defined(OS_BSD)) && \
+    defined(UNIT_TEST)
 // For unit testing purposes, inject methods to be used.
 // |get_key_storage_mock| provides the desired |KeyStorage| implementation.
 // If the provider returns |nullptr|, a hardcoded password will be used.
@@ -87,6 +88,6 @@ void UseMockKeyStorageForTesting(KeyStorageLinux* (*get_key_storage_mock)(),
 // Clears any caching and most lazy initialisations performed by the production
 // code. Should be used after any test which required a password.
 void ClearCacheForTesting();
-#endif  // defined(OS_LINUX) && !defined(OS_CHROMEOS) && defined(UNIT_TEST)
+#endif  // ((defined(OS_LINUX) && !defined(OS_CHROMEOS)) || defined(OS_BSD)) && defined(UNIT_TEST)
 
 #endif  // COMPONENTS_OS_CRYPT_OS_CRYPT_H_
diff --git components/policy/BUILD.gn components/policy/BUILD.gn
index 3e00ac2bf7bc..625b8e89d7e1 100644
--- components/policy/BUILD.gn
+++ components/policy/BUILD.gn
@@ -16,6 +16,7 @@ assert(!is_ios, "Policy should not be referenced on iOS")
 gen_policy_templates_common = true
 gen_policy_templates_win = is_win
 gen_policy_templates_linux = is_linux
+gen_policy_templates_bsd = is_bsd
 gen_policy_templates_android = is_android
 gen_policy_templates_mac = is_mac
 
@@ -173,6 +174,10 @@ grit("grit_policy_templates") {
     outputs += policy_templates_linux_outputs
     defines += [ "gen_policy_templates_linux" ]
   }
+  if (gen_policy_templates_bsd) {
+    outputs += policy_templates_linux_outputs
+    defines += [ "gen_policy_templates_bsd" ]
+  }
   if (gen_policy_templates_mac) {
     outputs += policy_templates_mac_outputs
     defines += [
diff --git components/policy/tools/generate_policy_source.py components/policy/tools/generate_policy_source.py
index 3cc47d954f33..cba9b8b140a4 100755
--- components/policy/tools/generate_policy_source.py
+++ components/policy/tools/generate_policy_source.py
@@ -6,7 +6,7 @@
 '''python %prog [options] platform chromium_os_flag template
 
 platform specifies which platform source is being generated for
-  and can be one of (win, mac, linux)
+  and can be one of (win, mac, linux, freebsd, dragonfly)
 chromium_os_flag should be 1 if this is a Chromium OS build
 template is the path to a .json policy template file.'''
 
@@ -103,7 +103,7 @@ class PolicyDetails:
       if platform.startswith('chrome.'):
         platform_sub = platform[7:]
         if platform_sub == '*':
-          self.platforms.extend(['win', 'mac', 'linux'])
+          self.platforms.extend(['win', 'mac', 'linux', 'freebsd', 'dragonfly'])
         else:
           self.platforms.append(platform_sub)
       else:
diff --git components/startup_metric_utils/browser/startup_metric_utils.cc components/startup_metric_utils/browser/startup_metric_utils.cc
index 8d9e4669e7c6..d272b73d6907 100644
--- components/startup_metric_utils/browser/startup_metric_utils.cc
+++ components/startup_metric_utils/browser/startup_metric_utils.cc
@@ -493,7 +493,8 @@ void AddStartupEventsForTelemetry()
 // RecordBrowserMainMessageLoopStart, the time since last startup is also logged
 // to a histogram suffixed with the startup temperature.
 void RecordTimeSinceLastStartup(PrefService* pref_service) {
-#if defined(OS_MACOSX) || defined(OS_WIN) || defined(OS_LINUX)
+#if defined(OS_MACOSX) || defined(OS_WIN) || defined(OS_LINUX) || \
+    defined(OS_BSD)
   DCHECK(pref_service);
 
   // Get the timestamp of the current startup.
@@ -522,7 +523,7 @@ void RecordTimeSinceLastStartup(PrefService* pref_service) {
   // Write the timestamp of the current startup in |pref_service|.
   pref_service->SetInt64(prefs::kLastStartupTimestamp,
                          process_start_time.ToInternalValue());
-#endif  // defined(OS_MACOSX) || defined(OS_WIN) || defined(OS_LINUX)
+#endif  // defined(OS_MACOSX) || defined(OS_WIN) || defined(OS_LINUX) || defined(OS_BSD)
 }
 
 // Logs the Startup.SameVersionStartupCount histogram. Relies on |pref_service|
diff --git components/storage_monitor/BUILD.gn components/storage_monitor/BUILD.gn
index c8559d2c99d4..7faec282500a 100644
--- components/storage_monitor/BUILD.gn
+++ components/storage_monitor/BUILD.gn
@@ -76,6 +76,16 @@ static_library("storage_monitor") {
       "udev_util_linux.h",
     ]
   }
+  if (is_bsd) {
+    sources -= [
+      "mtab_watcher_linux.cc",
+      "mtab_watcher_linux.h",
+      "storage_monitor_linux.cc",
+      "storage_monitor_linux.h",
+      "udev_util_linux.cc",
+      "udev_util_linux.h",
+    ]
+  }
 
   if (is_chromeos) {
     sources -= [
diff --git components/storage_monitor/storage_monitor.cc components/storage_monitor/storage_monitor.cc
index beb45fd2c332..4b6f5dd4dbca 100644
--- components/storage_monitor/storage_monitor.cc
+++ components/storage_monitor/storage_monitor.cc
@@ -52,7 +52,9 @@ void StorageMonitor::ReceiverImpl::MarkInitialized() {
 // static
 void StorageMonitor::Create() {
   delete g_storage_monitor;
+#if !defined(OS_BSD)
   g_storage_monitor = CreateInternal();
+#endif
 }
 
 // static
diff --git components/sync/base/get_session_name.cc components/sync/base/get_session_name.cc
index 1d3aebdcbb05..9f334d85854a 100644
--- components/sync/base/get_session_name.cc
+++ components/sync/base/get_session_name.cc
@@ -15,7 +15,7 @@
 
 #if defined(OS_CHROMEOS)
 #include "chromeos/system/devicetype.h"
-#elif defined(OS_LINUX)
+#elif defined(OS_LINUX) || defined(OS_BSD)
 #include "components/sync/base/get_session_name_linux.h"
 #elif defined(OS_IOS)
 #include "components/sync/base/get_session_name_ios.h"
@@ -51,7 +51,7 @@ std::string GetSessionNameSynchronously() {
       session_name = "Chromebook";
       break;
   }
-#elif defined(OS_LINUX)
+#elif defined(OS_LINUX) || defined(OS_BSD)
   session_name = internal::GetHostname();
 #elif defined(OS_IOS)
   session_name = internal::GetComputerName();
diff --git components/sync/base/get_session_name_linux.cc components/sync/base/get_session_name_linux.cc
index b7e0b4426c0b..169754f04dc9 100644
--- components/sync/base/get_session_name_linux.cc
+++ components/sync/base/get_session_name_linux.cc
@@ -4,8 +4,13 @@
 
 #include "components/sync/base/get_session_name_linux.h"
 
+#include "build/build_config.h"
+
 #include <limits.h>  // for HOST_NAME_MAX
 #include <unistd.h>  // for gethostname()
+#if defined(OS_DRAGONFLY)
+#define HOST_NAME_MAX _POSIX_HOST_NAME_MAX
+#endif
 
 #include "base/linux_util.h"
 
diff --git components/sync/driver/sync_util.cc components/sync/driver/sync_util.cc
index 6b812813265a..774317f7352d 100644
--- components/sync/driver/sync_util.cc
+++ components/sync/driver/sync_util.cc
@@ -37,6 +37,8 @@ std::string GetSystemString(bool is_tablet) {
   system = "FREEBSD ";
 #elif defined(OS_OPENBSD)
   system = "OPENBSD ";
+#elif defined(OS_DRAGONFLY)
+  system = "DRAGONFLY ";
 #elif defined(OS_MACOSX)
   system = "MAC ";
 #endif
diff --git components/tracing/common/process_metrics_memory_dump_provider.cc components/tracing/common/process_metrics_memory_dump_provider.cc
index 829f47e76e6d..5c08c85f66f8 100644
--- components/tracing/common/process_metrics_memory_dump_provider.cc
+++ components/tracing/common/process_metrics_memory_dump_provider.cc
@@ -200,7 +200,7 @@ std::unique_ptr<base::ProcessMetrics> CreateProcessMetrics(
     base::ProcessId process) {
   if (process == base::kNullProcessId)
     return base::ProcessMetrics::CreateCurrentProcessMetrics();
-#if defined(OS_LINUX) || defined(OS_ANDROID)
+#if defined(OS_LINUX) || defined(OS_ANDROID) || defined(OS_BSD)
   // Just pass ProcessId instead of handle since they are the same in linux and
   // android.
   return base::ProcessMetrics::CreateProcessMetrics(process);
@@ -209,7 +209,7 @@ std::unique_ptr<base::ProcessMetrics> CreateProcessMetrics(
   // additional information like ProcessHandle or port provider.
   NOTREACHED();
   return std::unique_ptr<base::ProcessMetrics>();
-#endif  // defined(OS_LINUX) || defined(OS_ANDROID)
+#endif  // defined(OS_LINUX) || defined(OS_ANDROID) || defined(OS_BSD)
 }
 
 }  // namespace
@@ -250,6 +250,14 @@ bool ProcessMetricsMemoryDumpProvider::DumpProcessMemoryMaps(
 }
 #endif  // defined(OS_LINUX) || defined(OS_ANDROID)
 
+#if defined(OS_BSD)
+bool ProcessMetricsMemoryDumpProvider::DumpProcessMemoryMaps(
+    const base::trace_event::MemoryDumpArgs& args,
+    base::trace_event::ProcessMemoryDump* pmd) {
+  return false;
+}
+#endif	// defined(OS_BSD)
+
 #if defined(OS_WIN)
 bool ProcessMetricsMemoryDumpProvider::DumpProcessMemoryMaps(
     const base::trace_event::MemoryDumpArgs& args,
diff --git components/update_client/update_query_params.cc components/update_client/update_query_params.cc
index 7b576e585b25..42a776a0018e 100644
--- components/update_client/update_query_params.cc
+++ components/update_client/update_query_params.cc
@@ -35,12 +35,14 @@ const char kOs[] =
     "linux";
 #elif defined(OS_OPENBSD)
     "openbsd";
+#elif defined(OS_DRAGONFLY)
+    "dragonfly";
 #else
 #error "unknown os"
 #endif
 
 const char kArch[] =
-#if defined(__amd64__) || defined(_WIN64)
+#if defined(__amd64__) || defined(__x86_64__) || defined(_WIN64)
     "x64";
 #elif defined(__i386__) || defined(_WIN32)
     "x86";
diff --git components/version_info/version_info.cc components/version_info/version_info.cc
index b12ad0ff687c..8f250d746083 100644
--- components/version_info/version_info.cc
+++ components/version_info/version_info.cc
@@ -53,6 +53,8 @@ std::string GetOSType() {
   return "Linux";
 #elif defined(OS_FREEBSD)
   return "FreeBSD";
+#elif defined(OS_DRAGONFLY)
+  return "DragonFly";
 #elif defined(OS_OPENBSD)
   return "OpenBSD";
 #elif defined(OS_SOLARIS)
diff --git content/app/content_main_runner.cc content/app/content_main_runner.cc
index a677c9d2c6df..d33a7d5d37ad 100644
--- content/app/content_main_runner.cc
+++ content/app/content_main_runner.cc
@@ -127,7 +127,7 @@
 namespace content {
 extern int GpuMain(const content::MainFunctionParams&);
 #if BUILDFLAG(ENABLE_PLUGINS)
-#if !defined(OS_LINUX)
+#if !defined(OS_LINUX) && !defined(OS_BSD)
 extern int PluginMain(const content::MainFunctionParams&);
 #endif
 extern int PpapiPluginMain(const MainFunctionParams&);
@@ -189,7 +189,7 @@ void InitializeV8IfNeeded(
     return;
 
 #if defined(V8_USE_EXTERNAL_STARTUP_DATA)
-#if defined(OS_POSIX) && !defined(OS_MACOSX)
+#if defined(OS_POSIX) && !defined(OS_MACOSX) && !defined(OS_DRAGONFLY)
   base::FileDescriptorStore& file_descriptor_store =
       base::FileDescriptorStore::GetInstance();
   base::MemoryMappedFile::Region region;
@@ -214,7 +214,7 @@ void InitializeV8IfNeeded(
     gin::V8Initializer::LoadV8Snapshot();
     gin::V8Initializer::LoadV8Natives();
 #endif  // !CHROME_MULTIPLE_DLL_BROWSER
-#endif  // OS_POSIX && !OS_MACOSX
+#endif  // OS_POSIX && !OS_MACOSX && !OS_DRAGONFLY
 #endif  // V8_USE_EXTERNAL_STARTUP_DATA
 }
 
@@ -286,7 +286,8 @@ struct MainFunction {
   int (*function)(const MainFunctionParams&);
 };
 
-#if defined(OS_POSIX) && !defined(OS_MACOSX) && !defined(OS_ANDROID)
+#if defined(OS_POSIX) && !defined(OS_MACOSX) && !defined(OS_ANDROID) && \
+    !defined(OS_DRAGONFLY)
 // On platforms that use the zygote, we have a special subset of
 // subprocesses that are launched via the zygote.  This function
 // fills in some process-launching bits around ZygoteMain().
@@ -347,7 +348,7 @@ int RunZygote(const MainFunctionParams& main_function_params,
   NOTREACHED() << "Unknown zygote process type: " << process_type;
   return 1;
 }
-#endif  // defined(OS_POSIX) && !defined(OS_MACOSX) && !defined(OS_ANDROID)
+#endif  // defined(OS_POSIX) && !defined(OS_MACOSX) && !defined(OS_ANDROID) && !defined(OS_DRAGONFLY)
 
 static void RegisterMainThreadFactories() {
 #if !defined(CHROME_MULTIPLE_DLL_BROWSER) && !defined(CHROME_MULTIPLE_DLL_CHILD)
@@ -413,7 +414,8 @@ int RunNamedProcessTypeMain(
     }
   }
 
-#if defined(OS_POSIX) && !defined(OS_MACOSX) && !defined(OS_ANDROID)
+#if defined(OS_POSIX) && !defined(OS_MACOSX) && !defined(OS_ANDROID) && \
+    !defined(OS_DRAGONFLY)
   // Zygote startup is special -- see RunZygote comments above
   // for why we don't use ZygoteMain directly.
   if (process_type == switches::kZygoteProcess)
@@ -481,10 +483,10 @@ class ContentMainRunnerImpl : public ContentMainRunner {
         kFieldTrialDescriptor + base::GlobalDescriptors::kBaseDescriptor);
 #endif  // !OS_ANDROID
 
-#if defined(OS_LINUX) || defined(OS_OPENBSD)
+#if defined(OS_LINUX) || defined(OS_BSD)
     g_fds->Set(kCrashDumpSignal,
                kCrashDumpSignal + base::GlobalDescriptors::kBaseDescriptor);
-#endif  // OS_LINUX || OS_OPENBSD
+#endif  // OS_LINUX || OS_BSD
 
 #endif  // !OS_WIN
 
diff --git content/browser/BUILD.gn content/browser/BUILD.gn
index eb28c5841877..6d1557178ba3 100644
--- content/browser/BUILD.gn
+++ content/browser/BUILD.gn
@@ -1544,6 +1544,20 @@ source_set("browser") {
     "zygote_host/zygote_host_impl_linux.h",
   ]
 
+  if (is_bsd) {
+    sources -= [
+      "memory/swap_metrics_observer_linux.cc",
+      "memory/swap_metrics_observer_linux.h",
+      "renderer_host/render_sandbox_host_linux.cc",
+      "renderer_host/sandbox_ipc_linux.cc",
+      "../zygote/zygote_linux.cc",
+      "../zygote/zygote_main_linux.cc",
+      "zygote_host/zygote_communication_linux.cc",
+      "zygote_host/zygote_handle_linux.cc",
+      "zygote_host/zygote_host_impl_linux.cc",
+    ]
+  }
+
   if (toolkit_views) {
     deps += [ "//ui/events" ]
   }
@@ -1554,7 +1568,7 @@ source_set("browser") {
       "memory/memory_monitor_chromeos.cc",
       "memory/memory_monitor_chromeos.h",
     ]
-  } else {
+  } else if (!is_bsd) {
     sources += [
       "memory/memory_monitor_linux.cc",
       "memory/memory_monitor_linux.h",
@@ -1633,7 +1647,7 @@ source_set("browser") {
 
   # Desktop screen capture implementations, conditionally built depending on
   # the available implementations for each platform.
-  if (is_linux || is_mac || is_win) {
+  if (is_linux || is_mac || is_win || is_bsd) {
     defines += [ "ENABLE_SCREEN_CAPTURE=1" ]
     sources += [
       "media/capture/cursor_renderer.cc",
@@ -1821,7 +1835,7 @@ source_set("browser") {
     }
   }
 
-  if (is_linux && use_aura) {
+  if ((is_linux || is_bsd) && use_aura) {
     deps += [ "//build/linux:fontconfig" ]
   }
 
@@ -1830,7 +1844,7 @@ source_set("browser") {
     deps += [ "//ui/gfx/x" ]
   }
 
-  if (is_linux && !is_chromeos && use_x11 &&
+  if (((is_linux && !is_chromeos) || is_bsd) && use_x11 &&
       (target_cpu == "x86" || target_cpu == "x64")) {
     deps += [ "//third_party/swiftshader" ]
   }
@@ -2111,11 +2125,11 @@ source_set("browser") {
     ]
   }
 
-  if (is_linux && use_dbus) {
+  if ((is_linux || is_bsd) && use_dbus) {
     deps += [ "//dbus" ]
   }
 
-  if (is_linux) {
+  if (is_linux || is_bsd) {
     deps += [ "//third_party/boringssl" ]
   }
 
diff --git content/browser/accessibility/ax_platform_position.cc content/browser/accessibility/ax_platform_position.cc
index cf01ea9c69ed..22d2518cc717 100644
--- content/browser/accessibility/ax_platform_position.cc
+++ content/browser/accessibility/ax_platform_position.cc
@@ -104,7 +104,8 @@ int AXPlatformPosition::MaxTextOffset() const {
 // contents.
 int AXPlatformPosition::MaxTextOffsetInParent() const {
 #if defined(OS_WIN) || \
-    (defined(OS_LINUX) && defined(USE_X11) && !defined(OS_CHROMEOS))
+    ((defined(OS_LINUX) || defined(OS_BSD)) && defined(USE_X11) && \
+    !defined(OS_CHROMEOS))
   if (IsNullPosition())
     return INVALID_OFFSET;
   if (GetAnchor()->IsTextOnlyObject())
diff --git content/browser/accessibility/browser_accessibility.h content/browser/accessibility/browser_accessibility.h
index 1d25cc4129f5..6d88ae61f7b8 100644
--- content/browser/accessibility/browser_accessibility.h
+++ content/browser/accessibility/browser_accessibility.h
@@ -42,7 +42,8 @@
 #define PLATFORM_HAS_NATIVE_ACCESSIBILITY_IMPL 1
 #endif
 
-#if defined(OS_LINUX) && defined(USE_X11) && !defined(OS_CHROMEOS)
+#if (defined(OS_LINUX) || defined(OS_BSD)) && defined(USE_X11) && \
+    !defined(OS_CHROMEOS)
 #define PLATFORM_HAS_NATIVE_ACCESSIBILITY_IMPL 1
 #endif
 
diff --git content/browser/accessibility/browser_accessibility_manager.h content/browser/accessibility/browser_accessibility_manager.h
index 3f7c5ca0007a..a933a1a54bb5 100644
--- content/browser/accessibility/browser_accessibility_manager.h
+++ content/browser/accessibility/browser_accessibility_manager.h
@@ -36,7 +36,8 @@ class BrowserAccessibilityManager;
 class BrowserAccessibilityManagerAndroid;
 #elif defined(OS_WIN)
 class BrowserAccessibilityManagerWin;
-#elif defined(OS_LINUX) && !defined(OS_CHROMEOS) && defined(USE_X11)
+#elif ((defined(OS_LINUX) && !defined(OS_CHROMEOS)) || defined(OS_BSD)) && \
+      defined(USE_X11)
 class BrowserAccessibilityManagerAuraLinux;
 #elif defined(OS_MACOSX)
 class BrowserAccessibilityManagerMac;
@@ -257,7 +258,8 @@ class CONTENT_EXPORT BrowserAccessibilityManager : public ui::AXTreeDelegate {
   BrowserAccessibilityManagerAndroid* ToBrowserAccessibilityManagerAndroid();
 #endif
 
-#if defined(OS_LINUX) && !defined(OS_CHROMEOS) && defined(USE_X11)
+#if ((defined(OS_LINUX) && !defined(OS_CHROMEOS)) || defined(OS_BSD)) && \
+    defined(USE_X11)
   BrowserAccessibilityManagerAuraLinux*
       ToBrowserAccessibilityManagerAuraLinux();
 #endif
diff --git content/browser/browser_main_loop.cc content/browser/browser_main_loop.cc
index 8936b05f7037..005ec4c88fec 100644
--- content/browser/browser_main_loop.cc
+++ content/browser/browser_main_loop.cc
@@ -69,7 +69,9 @@
 #include "content/browser/loader_delegate_impl.h"
 #include "content/browser/media/media_internals.h"
 #include "content/browser/memory/memory_coordinator_impl.h"
+#if !defined(OS_BSD)
 #include "content/browser/memory/swap_metrics_observer.h"
+#endif
 #include "content/browser/net/browser_online_state_observer.h"
 #include "content/browser/renderer_host/media/media_stream_manager.h"
 #include "content/browser/renderer_host/render_process_host_impl.h"
@@ -177,7 +179,7 @@
 #include "media/device_monitors/device_monitor_mac.h"
 #endif
 
-#if defined(OS_POSIX) && !defined(OS_MACOSX)
+#if defined(OS_POSIX) && !defined(OS_MACOSX) && !defined(OS_DRAGONFLY)
 #include "content/browser/renderer_host/render_sandbox_host_linux.h"
 #include "content/browser/zygote_host/zygote_host_impl_linux.h"
 
@@ -185,7 +187,7 @@
 #include "content/browser/zygote_host/zygote_communication_linux.h"
 #include "content/public/browser/zygote_handle_linux.h"
 #endif  // !defined(OS_ANDROID)
-#endif  // defined(OS_POSIX) && !defined(OS_MACOSX)
+#endif  // defined(OS_POSIX) && !defined(OS_MACOSX) && !defined(OS_DRAGONFLY)
 
 
 #if BUILDFLAG(ENABLE_PLUGINS)
@@ -219,7 +221,8 @@
 namespace content {
 namespace {
 
-#if defined(OS_POSIX) && !defined(OS_MACOSX) && !defined(OS_ANDROID)
+#if defined(OS_POSIX) && !defined(OS_MACOSX) && !defined(OS_ANDROID) && \
+    !defined(OS_DRAGONFLY)
 void SetupSandbox(const base::CommandLine& parsed_command_line) {
   TRACE_EVENT0("startup", "SetupSandbox");
   // RenderSandboxHostLinux needs to be initialized even if the sandbox and
@@ -567,7 +570,8 @@ void BrowserMainLoop::Init() {
 void BrowserMainLoop::EarlyInitialization() {
   TRACE_EVENT0("startup", "BrowserMainLoop::EarlyInitialization");
 
-#if defined(OS_POSIX) && !defined(OS_MACOSX) && !defined(OS_ANDROID)
+#if defined(OS_POSIX) && !defined(OS_MACOSX) && !defined(OS_ANDROID) && \
+    !defined(OS_DRAGONFLY)
   // No thread should be created before this call, as SetupSandbox()
   // will end-up using fork().
   SetupSandbox(parsed_command_line_);
@@ -682,10 +686,12 @@ void BrowserMainLoop::PostMainMessageLoopStart() {
     TRACE_EVENT0("startup", "BrowserMainLoop::Subsystem:HighResTimerManager");
     hi_res_timer_manager_.reset(new base::HighResolutionTimerManager);
   }
+#if !defined(OS_BSD)
   {
     TRACE_EVENT0("startup", "BrowserMainLoop::Subsystem:NetworkChangeNotifier");
     network_change_notifier_.reset(net::NetworkChangeNotifier::Create());
   }
+#endif
   {
     TRACE_EVENT0("startup", "BrowserMainLoop::Subsystem:MediaFeatures");
     media::InitializeMediaLibrary();
@@ -1621,9 +1627,11 @@ void BrowserMainLoop::InitializeMemoryManagementComponent() {
     }
   }
 
+#if !defined(OS_BSD)
   auto* swap_metrics_observer = SwapMetricsObserver::GetInstance();
   if (swap_metrics_observer)
     swap_metrics_observer->Start();
+#endif
 }
 
 bool BrowserMainLoop::InitializeToolkit() {
diff --git content/browser/child_process_launcher_helper_linux.cc content/browser/child_process_launcher_helper_linux.cc
index 0b2387d7a694..a74b56915d88 100644
--- content/browser/child_process_launcher_helper_linux.cc
+++ content/browser/child_process_launcher_helper_linux.cc
@@ -7,12 +7,16 @@
 #include "content/browser/child_process_launcher.h"
 #include "content/browser/child_process_launcher_helper.h"
 #include "content/browser/child_process_launcher_helper_posix.h"
+#if !defined(OS_DRAGONFLY)
 #include "content/browser/renderer_host/render_sandbox_host_linux.h"
 #include "content/browser/zygote_host/zygote_communication_linux.h"
 #include "content/browser/zygote_host/zygote_host_impl_linux.h"
 #include "content/common/sandbox_linux/sandbox_linux.h"
+#endif
 #include "content/public/browser/content_browser_client.h"
+#if !defined(OS_DRAGONFLY)
 #include "content/public/browser/zygote_handle_linux.h"
+#endif
 #include "content/public/common/content_client.h"
 #include "content/public/common/content_switches.h"
 #include "content/public/common/result_codes.h"
@@ -47,11 +51,13 @@ void ChildProcessLauncherHelper::BeforeLaunchOnLauncherThread(
       files_to_register.GetMappingWithIDAdjustment(
           base::GlobalDescriptors::kBaseDescriptor);
 
+#if !defined(OS_DRAGONFLY)
   if (GetProcessType() == switches::kRendererProcess) {
     const int sandbox_fd =
         RenderSandboxHostLinux::GetInstance()->GetRendererSocket();
     fds_to_map->push_back(std::make_pair(sandbox_fd, GetSandboxFD()));
   }
+#endif
 
   options->environ = delegate_->GetEnvironment();
   // fds_to_remap will de deleted in AfterLaunchOnLauncherThread() below.
@@ -66,6 +72,7 @@ ChildProcessLauncherHelper::LaunchProcessOnLauncherThread(
     int* launch_result) {
   *is_synchronous_launch = true;
 
+#if !defined(OS_DRAGONFLY)
   ZygoteHandle zygote_handle =
       base::CommandLine::ForCurrentProcess()->HasSwitch(switches::kNoZygote)
           ? nullptr
@@ -82,6 +89,7 @@ ChildProcessLauncherHelper::LaunchProcessOnLauncherThread(
     process.zygote = zygote_handle;
     return process;
   }
+#endif
 
   Process process;
   process.process = base::LaunchProcess(*command_line(), options);
@@ -100,10 +108,12 @@ base::TerminationStatus ChildProcessLauncherHelper::GetTerminationStatus(
     const ChildProcessLauncherHelper::Process& process,
     bool known_dead,
     int* exit_code) {
+#if !defined(OS_DRAGONFLY)
   if (process.zygote) {
     return process.zygote->GetTerminationStatus(
         process.process.Handle(), known_dead, exit_code);
   }
+#endif
   if (known_dead) {
     return base::GetKnownDeadTerminationStatus(
         process.process.Handle(), exit_code);
@@ -122,13 +132,17 @@ void ChildProcessLauncherHelper::ForceNormalProcessTerminationSync(
     ChildProcessLauncherHelper::Process process) {
   process.process.Terminate(RESULT_CODE_NORMAL_EXIT, false);
   // On POSIX, we must additionally reap the child.
+#if !defined(OS_DRAGONFLY)
   if (process.zygote) {
     // If the renderer was created via a zygote, we have to proxy the reaping
     // through the zygote process.
     process.zygote->EnsureProcessTerminated(process.process.Handle());
   } else {
+#endif
     base::EnsureProcessTerminated(std::move(process.process));
+#if !defined(OS_DRAGONFLY)
   }
+#endif
 }
 
 void ChildProcessLauncherHelper::SetProcessPriorityOnLauncherThread(
diff --git content/browser/download/base_file.cc content/browser/download/base_file.cc
index 7c05f8deac39..5719c97450af 100644
--- content/browser/download/base_file.cc
+++ content/browser/download/base_file.cc
@@ -387,7 +387,8 @@ DownloadInterruptReason BaseFile::LogInterruptReason(
   return reason;
 }
 
-#if defined(OS_WIN) || defined(OS_MACOSX) || defined(OS_LINUX)
+#if defined(OS_WIN) || defined(OS_MACOSX) || defined(OS_LINUX) || \
+    defined(OS_BSD)
 
 namespace {
 
@@ -470,7 +471,7 @@ DownloadInterruptReason BaseFile::AnnotateWithSourceInformation(
   }
   return DOWNLOAD_INTERRUPT_REASON_FILE_FAILED;
 }
-#else  // !OS_WIN && !OS_MACOSX && !OS_LINUX
+#else  // !OS_WIN && !OS_MACOSX && !OS_LINUX && !OS_BSD
 DownloadInterruptReason BaseFile::AnnotateWithSourceInformation(
     const std::string& client_guid,
     const GURL& source_url,
diff --git content/browser/download/download_manager_impl.cc content/browser/download/download_manager_impl.cc
index 02c7f12da9fe..171f7268b00a 100644
--- content/browser/download/download_manager_impl.cc
+++ content/browser/download/download_manager_impl.cc
@@ -55,7 +55,7 @@
 #include "storage/browser/blob/blob_url_request_job_factory.h"
 #include "url/origin.h"
 
-#if defined(OS_LINUX) && !defined(OS_CHROMEOS)
+#if (defined(OS_LINUX) && !defined(OS_CHROMEOS)) || defined(OS_BSD)
 #include "base/nix/xdg_util.h"
 #endif
 
@@ -178,7 +178,7 @@ class DownloadItemFactoryImpl : public DownloadItemFactory {
   }
 };
 
-#if defined(OS_LINUX) && !defined(OS_CHROMEOS)
+#if (defined(OS_LINUX) && !defined(OS_CHROMEOS)) || defined(OS_BSD)
 base::FilePath GetTemporaryDownloadDirectory() {
   std::unique_ptr<base::Environment> env(base::Environment::Create());
   return base::nix::GetXDGDirectory(env.get(), "XDG_DATA_HOME", ".local/share");
@@ -370,7 +370,7 @@ void DownloadManagerImpl::StartDownloadWithId(
   }
 
   base::FilePath default_download_directory;
-#if defined(OS_LINUX) && !defined(OS_CHROMEOS)
+#if (defined(OS_LINUX) && !defined(OS_CHROMEOS)) || defined(OS_BSD)
   // TODO(thomasanderson): Remove this when all Linux distros with
   // versions of GTK lower than 3.14.7 are no longer supported.  This
   // should happen when support for Ubuntu Trusty and Debian Jessie
diff --git content/browser/gpu/gpu_data_manager_impl_private.cc content/browser/gpu/gpu_data_manager_impl_private.cc
index 8cf07545a660..fa535d55cce6 100644
--- content/browser/gpu/gpu_data_manager_impl_private.cc
+++ content/browser/gpu/gpu_data_manager_impl_private.cc
@@ -438,7 +438,7 @@ bool GpuDataManagerImplPrivate::GpuAccessAllowed(
     // strings even if all features are blacklisted. If all GPU features are
     // disabled, the GPU process will only initialize GL bindings, create a GL
     // context, and collect full GPU info.
-#if !defined(OS_LINUX)
+#if !defined(OS_LINUX) && !defined(OS_BSD)
     if (reason) {
       *reason = "All GPU features are blacklisted.";
     }
diff --git content/browser/gpu/gpu_data_manager_impl_private.h content/browser/gpu/gpu_data_manager_impl_private.h
index d78a7ebd359a..86e6b8b2bf2e 100644
--- content/browser/gpu/gpu_data_manager_impl_private.h
+++ content/browser/gpu/gpu_data_manager_impl_private.h
@@ -152,7 +152,7 @@ class CONTENT_EXPORT GpuDataManagerImplPrivate {
                            UnblockOtherDomainFrom3DAPIs);
   FRIEND_TEST_ALL_PREFIXES(GpuDataManagerImplPrivateTest,
                            UnblockThisDomainFrom3DAPIs);
-#if defined(OS_LINUX)
+#if defined(OS_LINUX) || defined(OS_BSD)
   FRIEND_TEST_ALL_PREFIXES(GpuDataManagerImplPrivateTest,
                            SetGLStrings);
   FRIEND_TEST_ALL_PREFIXES(GpuDataManagerImplPrivateTest,
diff --git content/browser/gpu/gpu_feature_checker_impl.cc content/browser/gpu/gpu_feature_checker_impl.cc
index 1e3f5c3c900d..dfa31c3ebcb2 100644
--- content/browser/gpu/gpu_feature_checker_impl.cc
+++ content/browser/gpu/gpu_feature_checker_impl.cc
@@ -39,7 +39,7 @@ void GpuFeatureCheckerImpl::CheckGpuFeatureAvailability() {
   CHECK(BrowserThread::CurrentlyOn(BrowserThread::UI));
 
   bool finalized = true;
-#if defined(OS_LINUX)
+#if defined(OS_LINUX) || defined(OS_BSD)
   // On Windows and Mac, so far we can always make the final WebGL blacklisting
   // decision based on partial GPU info; on Linux, we need to launch the GPU
   // process to collect full GPU info and make the final decision.
diff --git content/browser/gpu/gpu_internals_ui.cc content/browser/gpu/gpu_internals_ui.cc
index 45f2f6d2745f..5d6ab0506a9b 100644
--- content/browser/gpu/gpu_internals_ui.cc
+++ content/browser/gpu/gpu_internals_ui.cc
@@ -43,7 +43,7 @@
 #include "third_party/skia/include/core/SkMilestone.h"
 #include "ui/gl/gpu_switching_manager.h"
 
-#if defined(OS_LINUX) && defined(USE_X11)
+#if (defined(OS_LINUX) || defined(OS_BSD)) && defined(USE_X11)
 #include <X11/Xlib.h>
 #endif
 #if defined(OS_WIN)
@@ -51,7 +51,7 @@
 #include "ui/gfx/win/physical_size.h"
 #endif
 
-#if defined(OS_LINUX) && defined(USE_X11)
+#if (defined(OS_LINUX) || defined(OS_BSD)) && defined(USE_X11)
 #include "ui/base/x/x11_util.h"       // nogncheck
 #include "ui/gfx/x/x11_atom_cache.h"  // nogncheck
 #endif
@@ -206,7 +206,7 @@ base::DictionaryValue* GpuInfoAsDictionaryValue() {
                                              gpu_info.gl_ws_version));
   basic_info->Append(NewDescriptionValuePair("Window system binding extensions",
                                              gpu_info.gl_ws_extensions));
-#if defined(OS_LINUX) && defined(USE_X11)
+#if (defined(OS_LINUX) || defined(OS_BSD)) && defined(USE_X11)
   basic_info->Append(NewDescriptionValuePair("Window manager",
                                              ui::GuessWindowManagerName()));
   {
diff --git content/browser/media/media_internals.cc content/browser/media/media_internals.cc
index def2b61f270c..aa670bdf021e 100644
--- content/browser/media/media_internals.cc
+++ content/browser/media/media_internals.cc
@@ -917,7 +917,7 @@ void MediaInternals::UpdateVideoCaptureDeviceCapabilities(
     device_dict->SetString("name", descriptor.GetNameAndModel());
     device_dict->Set("formats", format_list);
 #if defined(OS_WIN) || defined(OS_MACOSX) || defined(OS_LINUX) || \
-    defined(OS_ANDROID)
+    defined(OS_ANDROID) || defined(OS_BSD)
     device_dict->SetString("captureApi", descriptor.GetCaptureApiTypeString());
 #endif
     video_capture_capabilities_cached_data_.Append(std::move(device_dict));
diff --git content/browser/memory/memory_monitor.cc content/browser/memory/memory_monitor.cc
index a9e168457df9..54011f1d18ed 100644
--- content/browser/memory/memory_monitor.cc
+++ content/browser/memory/memory_monitor.cc
@@ -22,7 +22,7 @@ void MemoryMonitorDelegate::GetSystemMemoryInfo(
   base::GetSystemMemoryInfo(mem_info);
 }
 
-#if defined(OS_MACOSX)
+#if defined(OS_MACOSX) || defined(OS_BSD)
 // TODO(bashi,bcwhite): Remove when memory monitor for mac is available.
 std::unique_ptr<MemoryMonitor> CreateMemoryMonitor() {
   NOTREACHED();
diff --git content/browser/ppapi_plugin_process_host.cc content/browser/ppapi_plugin_process_host.cc
index 47e41376f530..fcb3dea13fa6 100644
--- content/browser/ppapi_plugin_process_host.cc
+++ content/browser/ppapi_plugin_process_host.cc
@@ -38,9 +38,9 @@
 #include "ppapi/proxy/ppapi_messages.h"
 #include "ui/base/ui_base_switches.h"
 
-#if defined(OS_POSIX)
+#if defined(OS_POSIX) && !defined(OS_DRAGONFLY)
 #include "content/public/browser/zygote_handle_linux.h"
-#endif  // defined(OS_POSIX)
+#endif  // defined(OS_POSIX) && !defined(OS_DRAGONFLY)
 
 #if defined(OS_WIN)
 #include "base/win/windows_version.h"
@@ -59,8 +59,8 @@ class PpapiPluginSandboxedProcessLauncherDelegate
     : public content::SandboxedProcessLauncherDelegate {
  public:
   explicit PpapiPluginSandboxedProcessLauncherDelegate(bool is_broker)
-#if (defined(OS_POSIX) && !defined(OS_MACOSX) && !defined(OS_ANDROID)) || \
-    defined(OS_WIN)
+#if (defined(OS_POSIX) && !defined(OS_MACOSX) && !defined(OS_ANDROID) && \
+     !defined(OS_DRAGONFLY)) || defined(OS_WIN)
       : is_broker_(is_broker)
 #endif
   {
@@ -106,7 +106,8 @@ class PpapiPluginSandboxedProcessLauncherDelegate
     return true;
   }
 
-#elif defined(OS_POSIX) && !defined(OS_MACOSX) && !defined(OS_ANDROID)
+#elif defined(OS_POSIX) && !defined(OS_MACOSX) && !defined(OS_ANDROID) && \
+      !defined(OS_DRAGONFLY)
   ZygoteHandle GetZygote() override {
     const base::CommandLine& browser_command_line =
         *base::CommandLine::ForCurrentProcess();
@@ -123,8 +124,8 @@ class PpapiPluginSandboxedProcessLauncherDelegate
   }
 
  private:
-#if (defined(OS_POSIX) && !defined(OS_MACOSX) && !defined(OS_ANDROID)) || \
-    defined(OS_WIN)
+#if (defined(OS_POSIX) && !defined(OS_MACOSX) && !defined(OS_ANDROID) && \
+     !defined(OS_DRAGONFLY)) || defined(OS_WIN)
   bool is_broker_;
 #endif
 
diff --git content/browser/renderer_host/media/in_process_video_capture_device_launcher.cc content/browser/renderer_host/media/in_process_video_capture_device_launcher.cc
index d1675476653e..c290b4334edb 100644
--- content/browser/renderer_host/media/in_process_video_capture_device_launcher.cc
+++ content/browser/renderer_host/media/in_process_video_capture_device_launcher.cc
@@ -233,7 +233,8 @@ void InProcessVideoCaptureDeviceLauncher::DoStartTabCaptureOnDeviceThread(
   DCHECK(device_task_runner_->BelongsToCurrentThread());
 
   std::unique_ptr<media::VideoCaptureDevice> video_capture_device;
-#if defined(OS_LINUX) || defined(OS_MACOSX) || defined(OS_WIN)
+#if defined(OS_LINUX) || defined(OS_MACOSX) || defined(OS_WIN) || \
+    defined(OS_BSD)
   video_capture_device = WebContentsVideoCaptureDevice::Create(id);
 #endif
 
@@ -264,7 +265,8 @@ void InProcessVideoCaptureDeviceLauncher::DoStartDesktopCaptureOnDeviceThread(
   }
 
   if (desktop_id.type == DesktopMediaID::TYPE_WEB_CONTENTS) {
-#if defined(OS_LINUX) || defined(OS_MACOSX) || defined(OS_WIN)
+#if defined(OS_LINUX) || defined(OS_MACOSX) || defined(OS_WIN) || \
+    defined(OS_BSD)
     video_capture_device = WebContentsVideoCaptureDevice::Create(id);
     IncrementDesktopCaptureCounter(TAB_VIDEO_CAPTURER_CREATED);
     if (desktop_id.audio_share) {
diff --git content/browser/renderer_host/render_message_filter.cc content/browser/renderer_host/render_message_filter.cc
index 08fb0ced3450..41abd7dafcdc 100644
--- content/browser/renderer_host/render_message_filter.cc
+++ content/browser/renderer_host/render_message_filter.cc
@@ -85,6 +85,8 @@
 
 #if defined(OS_LINUX)
 #include "base/linux_util.h"
+#endif
+#if defined(OS_LINUX) || defined(OS_DRAGONFLY)
 #include "base/threading/platform_thread.h"
 #endif
 
@@ -161,7 +163,7 @@ bool RenderMessageFilter::OnMessageReceived(const IPC::Message& message) {
 #endif
     IPC_MESSAGE_HANDLER_DELAY_REPLY(ChildProcessHostMsg_HasGpuProcess,
                                     OnHasGpuProcess)
-#if defined(OS_LINUX)
+#if defined(OS_LINUX) || defined(OS_DRAGONFLY)
     IPC_MESSAGE_HANDLER(ChildProcessHostMsg_SetThreadPriority,
                         OnSetThreadPriority)
 #endif
@@ -270,6 +272,20 @@ void RenderMessageFilter::OnSetThreadPriority(base::PlatformThreadId ns_tid,
       base::Bind(&RenderMessageFilter::SetThreadPriorityOnFileThread, this,
                  ns_tid, priority));
 }
+#elif defined(OS_DRAGONFLY)
+void RenderMessageFilter::SetThreadPriorityOnFileThread(
+    base::PlatformThreadId ns_tid,
+    base::ThreadPriority priority) {
+  base::PlatformThread::SetThreadPriority(ns_tid, priority);
+}
+
+void RenderMessageFilter::OnSetThreadPriority(base::PlatformThreadId ns_tid,
+                                              base::ThreadPriority priority) {
+  BrowserThread::PostTask(
+      BrowserThread::FILE_USER_BLOCKING, FROM_HERE,
+      base::Bind(&RenderMessageFilter::SetThreadPriorityOnFileThread, this,
+                 ns_tid, priority));
+}
 #endif
 
 void RenderMessageFilter::OnCacheableMetadataAvailable(
diff --git content/browser/renderer_host/render_message_filter.h content/browser/renderer_host/render_message_filter.h
index e44481f1942e..b3ebbf039518 100644
--- content/browser/renderer_host/render_message_filter.h
+++ content/browser/renderer_host/render_message_filter.h
@@ -123,7 +123,7 @@ class CONTENT_EXPORT RenderMessageFilter
                                 bool has_gpu);
   void OnResolveProxy(const GURL& url, IPC::Message* reply_msg);
 
-#if defined(OS_LINUX)
+#if defined(OS_LINUX) || defined(OS_DRAGONFLY)
   void SetThreadPriorityOnFileThread(base::PlatformThreadId ns_tid,
                                      base::ThreadPriority priority);
   void OnSetThreadPriority(base::PlatformThreadId ns_tid,
diff --git content/browser/renderer_host/render_process_host_impl.cc content/browser/renderer_host/render_process_host_impl.cc
index 7db804cc0fc2..8859b34a0e62 100644
--- content/browser/renderer_host/render_process_host_impl.cc
+++ content/browser/renderer_host/render_process_host_impl.cc
@@ -226,9 +226,9 @@
 #include "content/browser/mach_broker_mac.h"
 #endif
 
-#if defined(OS_POSIX)
+#if defined(OS_POSIX) && !defined(OS_DRAGONFLY)
 #include "content/public/browser/zygote_handle_linux.h"
-#endif  // defined(OS_POSIX)
+#endif  // defined(OS_POSIX) && !defined(OS_DRAGONFLY)
 
 #if defined(USE_OZONE)
 #include "ui/ozone/public/ozone_switches.h"
@@ -415,7 +415,8 @@ class RendererSandboxedProcessLauncherDelegate
     return GetContentClient()->browser()->PreSpawnRenderer(policy);
   }
 
-#elif defined(OS_POSIX) && !defined(OS_MACOSX) && !defined(OS_ANDROID)
+#elif defined(OS_POSIX) && !defined(OS_MACOSX) && !defined(OS_ANDROID) && \
+      !defined(OS_DRAGONFLY)
   ZygoteHandle GetZygote() override {
     const base::CommandLine& browser_command_line =
         *base::CommandLine::ForCurrentProcess();
diff --git content/browser/renderer_host/render_view_host_impl.cc content/browser/renderer_host/render_view_host_impl.cc
index e7f5f36de829..78db60804299 100644
--- content/browser/renderer_host/render_view_host_impl.cc
+++ content/browser/renderer_host/render_view_host_impl.cc
@@ -146,7 +146,7 @@ void GetPlatformSpecificPrefs(RendererPreferences* prefs) {
       display::win::ScreenWin::GetSystemMetricsInDIP(SM_CYVSCROLL);
   prefs->arrow_bitmap_width_horizontal_scroll_bar_in_dips =
       display::win::ScreenWin::GetSystemMetricsInDIP(SM_CXHSCROLL);
-#elif defined(OS_LINUX)
+#elif defined(OS_LINUX) || defined(OS_BSD)
   prefs->system_font_family_name = gfx::Font().GetFontName();
 #endif
 }
diff --git content/browser/renderer_host/render_widget_host_view_aura.cc content/browser/renderer_host/render_widget_host_view_aura.cc
index e32783644331..e3b446042863 100644
--- content/browser/renderer_host/render_widget_host_view_aura.cc
+++ content/browser/renderer_host/render_widget_host_view_aura.cc
@@ -112,11 +112,12 @@
 #include "ui/gfx/gdi_util.h"
 #endif
 
-#if defined(OS_LINUX) && !defined(OS_CHROMEOS) && defined(USE_X11)
+#if ((defined(OS_LINUX) && !defined(OS_CHROMEOS)) || defined(OS_BSD)) && \
+    defined(USE_X11)
 #include "content/browser/accessibility/browser_accessibility_auralinux.h"
 #endif
 
-#if defined(OS_LINUX) && !defined(OS_CHROMEOS)
+#if (defined(OS_LINUX) && !defined(OS_CHROMEOS)) || defined(OS_BSD)
 #include "ui/base/ime/linux/text_edit_command_auralinux.h"
 #include "ui/base/ime/linux/text_edit_key_bindings_delegate_auralinux.h"
 #endif
@@ -630,7 +631,8 @@ gfx::NativeViewAccessible RenderWidgetHostViewAura::GetNativeViewAccessible() {
       host_->GetOrCreateRootBrowserAccessibilityManager();
   if (manager)
     return ToBrowserAccessibilityWin(manager->GetRoot())->GetCOM();
-#elif defined(OS_LINUX) && !defined(OS_CHROMEOS) && defined(USE_X11)
+#elif ((defined(OS_LINUX) && !defined(OS_CHROMEOS)) || defined(OS_BSD)) && \
+      defined(USE_X11)
   BrowserAccessibilityManager* manager =
       host_->GetOrCreateRootBrowserAccessibilityManager();
   if (manager)
@@ -2055,7 +2057,7 @@ bool RenderWidgetHostViewAura::NeedsInputGrab() {
 }
 
 bool RenderWidgetHostViewAura::NeedsMouseCapture() {
-#if defined(OS_LINUX) && !defined(OS_CHROMEOS)
+#if (defined(OS_LINUX) && !defined(OS_CHROMEOS)) || defined(OS_BSD)
   return NeedsInputGrab();
 #endif
   return false;
@@ -2263,7 +2265,7 @@ void RenderWidgetHostViewAura::ForwardKeyboardEventWithLatencyInfo(
   if (!target_host)
     return;
 
-#if defined(OS_LINUX) && !defined(OS_CHROMEOS)
+#if (defined(OS_LINUX) && !defined(OS_CHROMEOS)) || defined(OS_BSD)
   ui::TextEditKeyBindingsDelegateAuraLinux* keybinding_delegate =
       ui::GetTextEditKeyBindingsDelegate();
   std::vector<ui::TextEditCommandAuraLinux> commands;
diff --git content/browser/renderer_host/render_widget_host_view_event_handler.cc content/browser/renderer_host/render_widget_host_view_event_handler.cc
index 0401ce699cc8..e80d25659fef 100644
--- content/browser/renderer_host/render_widget_host_view_event_handler.cc
+++ content/browser/renderer_host/render_widget_host_view_event_handler.cc
@@ -573,7 +573,7 @@ bool RenderWidgetHostViewEventHandler::CanRendererHandleEvent(
   if (event->type() == ui::ET_MOUSE_EXITED) {
     if (mouse_locked || selection_popup)
       return false;
-#if defined(OS_WIN) || defined(OS_LINUX)
+#if defined(OS_WIN) || defined(OS_LINUX) || defined(OS_BSD)
     // Don't forward the mouse leave message which is received when the context
     // menu is displayed by the page. This confuses the page and causes state
     // changes.
diff --git content/browser/utility_process_host_impl.cc content/browser/utility_process_host_impl.cc
index baafcdeb8828..6f3596631637 100644
--- content/browser/utility_process_host_impl.cc
+++ content/browser/utility_process_host_impl.cc
@@ -44,9 +44,10 @@
 #include "services/service_manager/public/cpp/interface_provider.h"
 #include "ui/base/ui_base_switches.h"
 
-#if defined(OS_POSIX) && !defined(OS_ANDROID) && !defined(OS_MACOSX)
+#if defined(OS_POSIX) && !defined(OS_ANDROID) && !defined(OS_MACOSX) && \
+    !defined(OS_DRAGONFLY)
 #include "content/public/browser/zygote_handle_linux.h"
-#endif  // defined(OS_POSIX) && !defined(OS_ANDROID) && !defined(OS_MACOSX)
+#endif  // defined(OS_POSIX) && !defined(OS_ANDROID) && !defined(OS_MACOSX) && !defined(OS_DRAGONFLY)
 
 #if defined(OS_WIN)
 #include "sandbox/win/src/sandbox_policy.h"
@@ -68,10 +69,10 @@ class UtilitySandboxedProcessLauncherDelegate
         launch_elevated_(launch_elevated)
 #elif defined(OS_POSIX)
         env_(env)
-#if !defined(OS_MACOSX) && !defined(OS_ANDROID)
+#if !defined(OS_MACOSX) && !defined(OS_ANDROID) && !defined(OS_DRAGONFLY)
         ,
         no_sandbox_(no_sandbox)
-#endif  // !defined(OS_MACOSX)  && !defined(OS_ANDROID)
+#endif  // !defined(OS_MACOSX)  && !defined(OS_ANDROID) && !defined(OS_DRAGONFLY)
 #endif  // OS_WIN
   {}
 
@@ -100,7 +101,7 @@ class UtilitySandboxedProcessLauncherDelegate
 
 #elif defined(OS_POSIX)
 
-#if !defined(OS_MACOSX) && !defined(OS_ANDROID)
+#if !defined(OS_MACOSX) && !defined(OS_ANDROID) && !defined(OS_DRAGONFLY)
   ZygoteHandle GetZygote() override {
     if (no_sandbox_ || !exposed_dir_.empty())
       return nullptr;
@@ -121,9 +122,9 @@ class UtilitySandboxedProcessLauncherDelegate
   bool launch_elevated_;
 #elif defined(OS_POSIX)
   base::EnvironmentMap env_;
-#if !defined(OS_MACOSX) && !defined(OS_ANDROID)
+#if !defined(OS_MACOSX) && !defined(OS_ANDROID) && !defined(OS_DRAGONFLY)
   bool no_sandbox_;
-#endif  // !defined(OS_MACOSX) && !defined(OS_ANDROID)
+#endif  // !defined(OS_MACOSX) && !defined(OS_ANDROID) && !defined(OS_DRAGONFLY)
 #endif  // OS_WIN
 };
 
diff --git content/child/child_process.cc content/child/child_process.cc
index d3f557e1bdbd..7e15c81d19d4 100644
--- content/child/child_process.cc
+++ content/child/child_process.cc
@@ -130,7 +130,7 @@ void ChildProcess::ReleaseProcess() {
     main_thread_->OnProcessFinalRelease();
 }
 
-#if defined(OS_LINUX)
+#if defined(OS_LINUX) || defined(OS_DRAGONFLY)
 void ChildProcess::SetIOThreadPriority(
     base::ThreadPriority io_thread_priority) {
   main_thread_->SetThreadPriority(io_thread_.GetThreadId(), io_thread_priority);
diff --git content/child/child_process.h content/child/child_process.h
index d96e45909f5c..1ba9ec947366 100644
--- content/child/child_process.h
+++ content/child/child_process.h
@@ -79,7 +79,7 @@ class CONTENT_EXPORT ChildProcess {
   void AddRefProcess();
   void ReleaseProcess();
 
-#if defined(OS_LINUX)
+#if defined(OS_LINUX) || defined(OS_DRAGONFLY)
   void SetIOThreadPriority(base::ThreadPriority io_thread_priority);
 #endif
 
diff --git content/child/child_thread_impl.cc content/child/child_thread_impl.cc
index a349241e2a05..de93a434c7b9 100644
--- content/child/child_thread_impl.cc
+++ content/child/child_thread_impl.cc
@@ -685,7 +685,7 @@ std::unique_ptr<base::SharedMemory> ChildThreadImpl::AllocateSharedMemory(
   return base::MakeUnique<base::SharedMemory>(shared_buf, false);
 }
 
-#if defined(OS_LINUX)
+#if defined(OS_LINUX) || defined(OS_DRAGONFLY)
 void ChildThreadImpl::SetThreadPriority(base::PlatformThreadId id,
                                         base::ThreadPriority priority) {
   Send(new ChildProcessHostMsg_SetThreadPriority(id, priority));
diff --git content/child/child_thread_impl.h content/child/child_thread_impl.h
index a7e2cd2f2565..6ce30c01f3a1 100644
--- content/child/child_thread_impl.h
+++ content/child/child_thread_impl.h
@@ -108,7 +108,7 @@ class CONTENT_EXPORT ChildThreadImpl
   static std::unique_ptr<base::SharedMemory> AllocateSharedMemory(
       size_t buf_size);
 
-#if defined(OS_LINUX)
+#if defined(OS_LINUX) || defined(OS_DRAGONFLY)
   void SetThreadPriority(base::PlatformThreadId id,
                          base::ThreadPriority priority);
 #endif
diff --git content/common/BUILD.gn content/common/BUILD.gn
index 139a7dec5dee..525dada873a4 100644
--- content/common/BUILD.gn
+++ content/common/BUILD.gn
@@ -459,6 +459,22 @@ source_set("common") {
     deps += [ "//sandbox/mac:seatbelt" ]
   }
 
+  if (is_bsd) {
+    sources -= [
+      "quarantine/quarantine_linux.cc",
+      "sandbox_linux/bpf_cros_arm_gpu_policy_linux.cc",
+      "sandbox_linux/bpf_gpu_policy_linux.cc",
+      "sandbox_linux/bpf_ppapi_policy_linux.cc",
+      "sandbox_linux/bpf_renderer_policy_linux.cc",
+      "sandbox_linux/bpf_utility_policy_linux.cc",
+      "sandbox_linux/sandbox_bpf_base_policy_linux.cc",
+      "sandbox_linux/sandbox_debug_handling_linux.cc",
+      "sandbox_linux/sandbox_init_linux.cc",
+      "sandbox_linux/sandbox_linux.cc",
+      "sandbox_linux/sandbox_seccomp_bpf_linux.cc",
+    ]
+  }
+
   if (is_android) {
     deps += [
       "//content/public/android:common_aidl",
@@ -489,7 +505,7 @@ source_set("common") {
     sources -= [ "cursors/webcursor_aurax11.cc" ]
   }
 
-  if (is_linux) {
+  if (is_linux || is_bsd) {
     deps += [ "//build/linux:fontconfig" ]
   }
 
diff --git content/common/child_process_messages.h content/common/child_process_messages.h
index ea71aa769600..5a0acbc43faf 100644
--- content/common/child_process_messages.h
+++ content/common/child_process_messages.h
@@ -27,7 +27,7 @@
 #include "ui/gfx/ipc/gfx_param_traits.h"
 #include "ui/gfx/ipc/skia/gfx_skia_param_traits.h"
 
-#if defined(OS_LINUX)
+#if defined(OS_LINUX) || defined(OS_DRAGONFLY)
 #include "base/threading/platform_thread.h"
 #endif
 
@@ -76,7 +76,7 @@ IPC_STRUCT_TRAITS_BEGIN(tracked_objects::ProcessDataSnapshot)
   IPC_STRUCT_TRAITS_MEMBER(process_id)
 IPC_STRUCT_TRAITS_END()
 
-#if defined(OS_LINUX)
+#if defined(OS_LINUX) || defined(OS_DRAGONFLY)
 IPC_ENUM_TRAITS_MAX_VALUE(base::ThreadPriority,
                           base::ThreadPriority::REALTIME_AUDIO)
 #endif
@@ -172,7 +172,7 @@ IPC_SYNC_MESSAGE_CONTROL1_0(ChildProcessHostMsg_PreCacheFont,
 IPC_MESSAGE_CONTROL0(ChildProcessHostMsg_ReleaseCachedFonts)
 #endif  // defined(OS_WIN)
 
-#if defined(OS_LINUX)
+#if defined(OS_LINUX) || defined(OS_DRAGONFLY)
 // Asks the browser to change the priority of thread.
 IPC_MESSAGE_CONTROL2(ChildProcessHostMsg_SetThreadPriority,
                      base::PlatformThreadId,
diff --git content/common/content_switches_internal.cc content/common/content_switches_internal.cc
index 105a9d193205..96897aa37be6 100644
--- content/common/content_switches_internal.cc
+++ content/common/content_switches_internal.cc
@@ -27,7 +27,7 @@ const base::Feature kUseZoomForDsfEnabledByDefault {
 #endif
 
 bool IsUseZoomForDSFEnabledByDefault() {
-#if defined(OS_CHROMEOS) || defined(OS_LINUX)
+#if defined(OS_CHROMEOS) || defined(OS_LINUX) || defined(OS_BSD)
   return true;
 #elif defined(OS_WIN)
   return base::FeatureList::IsEnabled(kUseZoomForDsfEnabledByDefault);
diff --git content/common/view_messages.h content/common/view_messages.h
index 83ce210de430..d1bbe30994fa 100644
--- content/common/view_messages.h
+++ content/common/view_messages.h
@@ -245,7 +245,7 @@ IPC_STRUCT_TRAITS_BEGIN(content::RendererPreferences)
   IPC_STRUCT_TRAITS_MEMBER(plugin_fullscreen_allowed)
   IPC_STRUCT_TRAITS_MEMBER(use_video_overlay_for_embedded_encrypted_video)
   IPC_STRUCT_TRAITS_MEMBER(network_contry_iso)
-#if defined(OS_LINUX)
+#if defined(OS_LINUX) || defined(OS_BSD)
   IPC_STRUCT_TRAITS_MEMBER(system_font_family_name)
 #endif
 #if defined(OS_WIN)
diff --git content/public/common/content_switches.cc content/public/common/content_switches.cc
index 209f3d0afa9a..2f9abb300b43 100644
--- content/public/common/content_switches.cc
+++ content/public/common/content_switches.cc
@@ -999,7 +999,7 @@ const char kDisableVaapiAcceleratedVideoEncode[] =
     "disable-vaapi-accelerated-video-encode";
 #endif
 
-#if defined(OS_LINUX) && !defined(OS_CHROMEOS)
+#if (defined(OS_LINUX) && !defined(OS_CHROMEOS)) || defined(OS_BSD)
 // Allows sending text-to-speech requests to speech-dispatcher, a common
 // Linux speech service. Because it's buggy, the user must explicitly
 // enable it so that visiting a random webpage can't cause instability.
diff --git content/public/common/content_switches.h content/public/common/content_switches.h
index e6b18a820bf8..ea4d30bfafa7 100644
--- content/public/common/content_switches.h
+++ content/public/common/content_switches.h
@@ -291,7 +291,7 @@ CONTENT_EXPORT extern const char kDisablePanelFitting[];
 CONTENT_EXPORT extern const char kDisableVaapiAcceleratedVideoEncode[];
 #endif
 
-#if defined(OS_LINUX) && !defined(OS_CHROMEOS)
+#if (defined(OS_LINUX) && !defined(OS_CHROMEOS)) || defined(OS_BSD)
 CONTENT_EXPORT extern const char kEnableSpeechDispatcher[];
 #endif
 
diff --git content/public/common/renderer_preferences.h content/public/common/renderer_preferences.h
index 15d589abbf9d..72e7deaaae7f 100644
--- content/public/common/renderer_preferences.h
+++ content/public/common/renderer_preferences.h
@@ -131,7 +131,7 @@ struct CONTENT_EXPORT RendererPreferences {
   // Country iso of the mobile network for content detection purpose.
   std::string network_contry_iso;
 
-#if defined(OS_LINUX)
+#if defined(OS_LINUX) || defined(OS_BSD)
   std::string system_font_family_name;
 #endif
 
diff --git content/renderer/media/audio_device_factory.cc content/renderer/media/audio_device_factory.cc
index e83ca0fab545..e1e53aca10e0 100644
--- content/renderer/media/audio_device_factory.cc
+++ content/renderer/media/audio_device_factory.cc
@@ -26,7 +26,7 @@ namespace content {
 AudioDeviceFactory* AudioDeviceFactory::factory_ = NULL;
 
 namespace {
-#if defined(OS_WIN) || defined(OS_MACOSX) || \
+#if defined(OS_WIN) || defined(OS_MACOSX) || defined(OS_BSD) || \
     (defined(OS_LINUX) && !defined(OS_CHROMEOS))
 // Due to driver deadlock issues on Windows (http://crbug/422522) there is a
 // chance device authorization response is never received from the browser side.
diff --git content/renderer/media/webrtc/processed_local_audio_source.cc content/renderer/media/webrtc/processed_local_audio_source.cc
index 75b7d4a4b6c9..ee7fbe9703be 100644
--- content/renderer/media/webrtc/processed_local_audio_source.cc
+++ content/renderer/media/webrtc/processed_local_audio_source.cc
@@ -269,7 +269,7 @@ void ProcessedLocalAudioSource::Capture(const media::AudioBus* audio_bus,
                                         bool key_pressed) {
 #if defined(OS_WIN) || defined(OS_MACOSX)
   DCHECK_LE(volume, 1.0);
-#elif (defined(OS_LINUX) && !defined(OS_CHROMEOS)) || defined(OS_OPENBSD)
+#elif (defined(OS_LINUX) && !defined(OS_CHROMEOS)) || defined(OS_BSD)
   // We have a special situation on Linux where the microphone volume can be
   // "higher than maximum". The input volume slider in the sound preference
   // allows the user to set a scaling that is higher than 100%. It means that
diff --git content/renderer/render_thread_impl.cc content/renderer/render_thread_impl.cc
index 574acb32ff2a..175a18736391 100644
--- content/renderer/render_thread_impl.cc
+++ content/renderer/render_thread_impl.cc
@@ -220,7 +220,7 @@
 
 #if defined(OS_MACOSX)
 #include <malloc/malloc.h>
-#else
+#elif !defined(OS_DRAGONFLY)
 #include <malloc.h>
 #endif
 
@@ -912,7 +912,7 @@ void RenderThreadImpl::Init(
   GetConnector()->BindInterface(mojom::kBrowserServiceName,
                                 mojo::MakeRequest(&storage_partition_service_));
 
-#if defined(OS_LINUX)
+#if defined(OS_LINUX) || defined(OS_DRAGONFLY)
   ChildProcess::current()->SetIOThreadPriority(base::ThreadPriority::DISPLAY);
   ChildThreadImpl::current()->SetThreadPriority(
       categorized_worker_pool_->background_worker_thread_id(),
@@ -1112,7 +1112,7 @@ void RenderThreadImpl::InitializeCompositorThread() {
   compositor_task_runner_->PostTask(
       FROM_HERE,
       base::Bind(base::IgnoreResult(&ThreadRestrictions::SetIOAllowed), false));
-#if defined(OS_LINUX)
+#if defined(OS_LINUX) || defined(OS_DRAGONFLY)
   ChildThreadImpl::current()->SetThreadPriority(compositor_thread_->ThreadId(),
                                                 base::ThreadPriority::DISPLAY);
 #endif
@@ -1416,7 +1416,7 @@ media::GpuVideoAcceleratorFactories* RenderThreadImpl::GetGpuFactories() {
   const bool enable_video_accelerator =
       !cmd_line->HasSwitch(switches::kDisableAcceleratedVideoDecode);
   const bool enable_gpu_memory_buffer_video_frames =
-#if defined(OS_MACOSX) || defined(OS_LINUX)
+#if defined(OS_MACOSX) || defined(OS_LINUX) || defined(OS_BSD)
       !cmd_line->HasSwitch(switches::kDisableGpuMemoryBufferVideoFrames) &&
       !cmd_line->HasSwitch(switches::kDisableGpuCompositing) &&
       !gpu_channel_host->gpu_info().software_rendering;
@@ -1744,6 +1744,11 @@ static size_t GetMallocUsage() {
 }
 
 }  // namespace
+#elif defined(OS_DRAGONFLY)
+static size_t GetMallocUsage() {
+  /* Not available in DragonFly */
+  return 0;
+}
 #endif
 
 bool RenderThreadImpl::GetRendererMemoryMetrics(
diff --git content/renderer/renderer_main.cc content/renderer/renderer_main.cc
index 99ebfe02875e..729d80d327c4 100644
--- content/renderer/renderer_main.cc
+++ content/renderer/renderer_main.cc
@@ -163,7 +163,9 @@ int RendererMain(const MainFunctionParams& parameters) {
 
   base::PlatformThread::SetName("CrRendererMain");
 
+#if !defined(OS_DRAGONFLY)
   bool no_sandbox = parsed_command_line.HasSwitch(switches::kNoSandbox);
+#endif
 
   // Initialize histogram statistics gathering system.
   base::StatisticsRecorder::Initialize();
@@ -200,8 +202,10 @@ int RendererMain(const MainFunctionParams& parameters) {
                              std::move(renderer_scheduler));
 #endif
     bool run_loop = true;
+#if !defined(OS_DRAGONFLY)
     if (!no_sandbox)
       run_loop = platform.EnableSandbox();
+#endif
 #if defined(OS_POSIX) && !defined(OS_MACOSX)
     auto render_process = RenderProcessImpl::Create();
     RenderThreadImpl::Create(std::move(main_message_loop),
diff --git content/renderer/renderer_main_platform_delegate_linux.cc content/renderer/renderer_main_platform_delegate_linux.cc
index 5743abd8a4f0..d2bbfa8c048a 100644
--- content/renderer/renderer_main_platform_delegate_linux.cc
+++ content/renderer/renderer_main_platform_delegate_linux.cc
@@ -4,6 +4,7 @@
 
 #include "content/renderer/renderer_main_platform_delegate.h"
 
+#if !defined(OS_DRAGONFLY)
 #include <errno.h>
 #include <sys/stat.h>
 
@@ -13,6 +14,7 @@
 #include "content/common/sandbox_linux/sandbox_linux.h"
 #include "content/public/common/content_switches.h"
 #include "content/public/common/sandbox_init.h"
+#endif
 
 namespace content {
 
@@ -29,6 +31,9 @@ void RendererMainPlatformDelegate::PlatformUninitialize() {
 }
 
 bool RendererMainPlatformDelegate::EnableSandbox() {
+#if defined(OS_DRAGONFLY)
+  return false;
+#else
   // The setuid sandbox is started in the zygote process: zygote_main_linux.cc
   // https://chromium.googlesource.com/chromium/src/+/master/docs/linux_suid_sandbox.md
   //
@@ -61,6 +66,7 @@ bool RendererMainPlatformDelegate::EnableSandbox() {
 #endif  // __x86_64__
 
   return true;
+#endif
 }
 
 }  // namespace content
diff --git content/renderer/webscrollbarbehavior_impl_aura.cc content/renderer/webscrollbarbehavior_impl_aura.cc
index 2ef7f765c867..45a5dbfa31cb 100644
--- content/renderer/webscrollbarbehavior_impl_aura.cc
+++ content/renderer/webscrollbarbehavior_impl_aura.cc
@@ -14,7 +14,7 @@ bool WebScrollbarBehaviorImpl::ShouldCenterOnThumb(
     blink::WebPointerProperties::Button mouseButton,
     bool shiftKeyPressed,
     bool altKeyPressed) {
-#if (defined(OS_LINUX) && !defined(OS_CHROMEOS))
+#if (defined(OS_LINUX) && !defined(OS_CHROMEOS)) || defined(OS_BSD)
   if (mouseButton == blink::WebPointerProperties::Button::kMiddle)
     return true;
 #endif
@@ -29,7 +29,7 @@ bool WebScrollbarBehaviorImpl::ShouldSnapBackToDragOrigin(
 // Disable snapback on desktop Linux to better integrate with the desktop
 // behavior.  Typically, Linux apps do not implement scrollbar snapback (this is
 // true for at least GTK and QT apps).
-#if (defined(OS_LINUX) && !defined(OS_CHROMEOS))
+#if (defined(OS_LINUX) && !defined(OS_CHROMEOS)) || defined(OS_BSD)
   return false;
 #endif
 
diff --git content/shell/BUILD.gn content/shell/BUILD.gn
index 7ed41218bbff..8c5de3f4bbb9 100644
--- content/shell/BUILD.gn
+++ content/shell/BUILD.gn
@@ -297,7 +297,7 @@ static_library("content_shell_lib") {
     ]
   }
 
-  if (is_linux) {
+  if (is_linux || is_bsd) {
     deps += [
       "//build/linux:fontconfig",
       "//ui/gfx:test_support",
@@ -369,7 +369,7 @@ static_library("content_shell_lib") {
     ]
   }
 
-  if (is_linux) {
+  if (is_linux || is_bsd) {
     deps += [ "//third_party/freetype" ]
   }
 
@@ -541,7 +541,7 @@ if (is_android) {
       }
     }
 
-    if (is_linux && !is_component_build) {
+    if ((is_linux || is_bsd) && !is_component_build) {
       # Set rpath to find our own libfreetype even in a non-component build.
       configs += [ "//build/config/gcc:rpath_for_built_shared_libraries" ]
     }
@@ -795,7 +795,7 @@ group("content_shell_crash_test") {
       "//build/win:copy_cdb_to_output",
     ]
   }
-  if (is_posix && !is_android) {
+  if (is_posix && !is_android && !is_bsd) {
     data_deps += [
       "//breakpad:dump_syms($host_toolchain)",
       "//breakpad:minidump_stackwalk($host_toolchain)",
diff --git content/shell/browser/shell_browser_context.cc content/shell/browser/shell_browser_context.cc
index c0d111282480..7c51fb13b160 100644
--- content/shell/browser/shell_browser_context.cc
+++ content/shell/browser/shell_browser_context.cc
@@ -25,7 +25,7 @@
 
 #if defined(OS_WIN)
 #include "base/base_paths_win.h"
-#elif defined(OS_LINUX)
+#elif defined(OS_LINUX) || defined(OS_BSD)
 #include "base/nix/xdg_util.h"
 #elif defined(OS_MACOSX)
 #include "base/base_paths_mac.h"
@@ -101,7 +101,7 @@ void ShellBrowserContext::InitWhileIOAllowed() {
 #if defined(OS_WIN)
   CHECK(PathService::Get(base::DIR_LOCAL_APP_DATA, &path_));
   path_ = path_.Append(std::wstring(L"content_shell"));
-#elif defined(OS_LINUX)
+#elif defined(OS_LINUX) || defined(OS_BSD)
   std::unique_ptr<base::Environment> env(base::Environment::Create());
   base::FilePath config_dir(
       base::nix::GetXDGDirectory(env.get(),
diff --git content/shell/browser/shell_content_browser_client.cc content/shell/browser/shell_content_browser_client.cc
index 0aeb7e2af3fa..9c72cceaba91 100644
--- content/shell/browser/shell_content_browser_client.cc
+++ content/shell/browser/shell_content_browser_client.cc
@@ -52,7 +52,7 @@
 #include "content/shell/android/shell_descriptors.h"
 #endif
 
-#if defined(OS_POSIX) && !defined(OS_MACOSX)
+#if defined(OS_POSIX) && !defined(OS_MACOSX) && !defined(OS_DRAGONFLY)
 #include "base/debug/leak_annotations.h"
 #include "components/crash/content/app/breakpad_linux.h"
 #include "components/crash/content/browser/crash_handler_host_linux.h"
@@ -75,7 +75,8 @@ namespace {
 ShellContentBrowserClient* g_browser_client;
 bool g_swap_processes_for_redirect = false;
 
-#if defined(OS_POSIX) && !defined(OS_MACOSX) && !defined(OS_ANDROID)
+#if defined(OS_POSIX) && !defined(OS_MACOSX) && !defined(OS_ANDROID) && \
+    !defined(OS_DRAGONFLY)
 breakpad::CrashHandlerHostLinux* CreateCrashHandlerHost(
     const std::string& process_type) {
   base::FilePath dumps_path =
@@ -121,7 +122,7 @@ int GetCrashSignalFD(const base::CommandLine& command_line) {
 
   return -1;
 }
-#endif  // defined(OS_POSIX) && !defined(OS_MACOSX) && !defined(OS_ANDROID)
+#endif  // defined(OS_POSIX) && !defined(OS_MACOSX) && !defined(OS_ANDROID) && !defined(OS_DRAGONFLY)
 
 }  // namespace
 
diff --git crypto/nss_util.cc crypto/nss_util.cc
index 5ed2fa06740b..9575f2b79344 100644
--- crypto/nss_util.cc
+++ crypto/nss_util.cc
@@ -20,7 +20,7 @@
 #include "base/threading/thread_task_runner_handle.h"
 #include "crypto/nss_util_internal.h"
 
-#if defined(OS_OPENBSD)
+#if defined(OS_OPENBSD) || defined(OS_DRAGONFLY)
 #include <sys/mount.h>
 #include <sys/param.h>
 #endif
@@ -154,6 +154,10 @@ void UseLocalCacheOfNSSDatabaseIfNFS(const base::FilePath& database_dir) {
   struct statfs buf;
   if (statfs(database_dir.value().c_str(), &buf) == 0)
     db_on_nfs = (strcmp(buf.f_fstypename, MOUNT_NFS) == 0);
+#elif defined(OS_DRAGONFLY)
+  struct statfs buf;
+  if (statfs(database_dir.value().c_str(), &buf) == 0)
+    db_on_nfs = (strcmp(buf.f_fstypename, "nfs") == 0);
 #else
   NOTIMPLEMENTED();
 #endif
diff --git device/BUILD.gn device/BUILD.gn
index 458c5ebb771f..c215ab072922 100644
--- device/BUILD.gn
+++ device/BUILD.gn
@@ -115,7 +115,7 @@ test("device_unittests") {
   # HID and Serial:
   # Android doesn't compile.
   # Linux, requires udev.
-  if (!is_linux_without_udev && !is_android) {
+  if (!is_linux_without_udev && !is_android && !is_bsd) {
     sources += [
       "hid/hid_connection_unittest.cc",
       "hid/hid_device_filter_unittest.cc",
@@ -177,9 +177,13 @@ test("device_unittests") {
   }
 
   # UsbContext is a libusb-specific object.
-  if (is_mac || is_win) {
+  if (is_mac || is_win || current_os == "dragonfly") {
     sources += [ "usb/usb_context_unittest.cc" ]
+  }
+  if (is_mac || is_win) {
     deps += [ "//third_party/libusb" ]
+  } else if (current_os == "dragonfly") {
+    configs += [ "//build/config/linux:libusb" ]
   }
 
   if (is_android) {
diff --git device/gamepad/gamepad_provider.cc device/gamepad/gamepad_provider.cc
index d56910bd458c..1a95481d5ca8 100644
--- device/gamepad/gamepad_provider.cc
+++ device/gamepad/gamepad_provider.cc
@@ -147,7 +147,7 @@ void GamepadProvider::Initialize(std::unique_ptr<GamepadDataFetcher> fetcher) {
     monitor->AddDevicesChangedObserver(this);
 
   polling_thread_.reset(new base::Thread("Gamepad polling thread"));
-#if defined(OS_LINUX)
+#if defined(OS_LINUX) || defined(OS_BSD)
   // On Linux, the data fetcher needs to watch file descriptors, so the message
   // loop needs to be a libevent loop.
   const base::MessageLoop::Type kMessageLoopType = base::MessageLoop::TYPE_IO;
diff --git device/geolocation/BUILD.gn device/geolocation/BUILD.gn
index 51b12846c8e3..c58f287db3af 100644
--- device/geolocation/BUILD.gn
+++ device/geolocation/BUILD.gn
@@ -90,7 +90,7 @@ component("geolocation") {
   if (is_android) {
     sources -= [ "wifi_data_provider_common.cc" ]
   }
-  if (is_chromeos || (is_linux && !use_dbus)) {
+  if (is_chromeos || (is_linux && !use_dbus) || is_bsd) {
     sources -= [ "wifi_data_provider_linux.cc" ]
   }
   if (is_linux && use_dbus) {
@@ -196,7 +196,7 @@ source_set("unittests") {
     "//testing/gtest",
   ]
 
-  if (is_linux) {
+  if (is_linux || is_bsd) {
     if (use_dbus) {
       deps += [ "//dbus:test_support" ]
     } else {
diff --git device/geolocation/location_arbitrator.cc device/geolocation/location_arbitrator.cc
index 444262686f0c..aa36bbec6639 100644
--- device/geolocation/location_arbitrator.cc
+++ device/geolocation/location_arbitrator.cc
@@ -182,7 +182,7 @@ LocationArbitrator::NewNetworkLocationProvider(
 
 std::unique_ptr<LocationProvider>
 LocationArbitrator::NewSystemLocationProvider() {
-#if defined(OS_WIN) || defined(OS_MACOSX) || defined(OS_LINUX)
+#if defined(OS_WIN) || defined(OS_MACOSX) || defined(OS_LINUX) || defined(OS_BSD)
   return nullptr;
 #else
   return device::NewSystemLocationProvider();
diff --git device/hid/BUILD.gn device/hid/BUILD.gn
index 6a95817206c8..520c8184995a 100644
--- device/hid/BUILD.gn
+++ device/hid/BUILD.gn
@@ -56,6 +56,12 @@ source_set("hid") {
     deps += [ "//device/udev_linux" ]
   }
 
+  if (is_bsd) {
+    sources -= [
+      "hid_connection_linux.cc",
+    ]
+  }
+
   if (is_chromeos) {
     deps += [ "//chromeos" ]
   }
diff --git device/sensors/data_fetcher_shared_memory.h device/sensors/data_fetcher_shared_memory.h
index c1a92bc5637b..8f399cc49bef 100644
--- device/sensors/data_fetcher_shared_memory.h
+++ device/sensors/data_fetcher_shared_memory.h
@@ -41,7 +41,8 @@ class DEVICE_SENSOR_EXPORT DataFetcherSharedMemory
   bool Start(ConsumerType consumer_type, void* buffer) override;
   bool Stop(ConsumerType consumer_type) override;
 
-#if defined(OS_LINUX) || defined(OS_MACOSX) || defined(OS_WIN)
+#if defined(OS_LINUX) || defined(OS_MACOSX) || defined(OS_WIN) ||	\
+    defined(OS_BSD)
 #if !defined(OS_CHROMEOS)
   DeviceMotionHardwareBuffer* motion_buffer_ = nullptr;
   DeviceOrientationHardwareBuffer* orientation_buffer_ = nullptr;
diff --git device/serial/BUILD.gn device/serial/BUILD.gn
index 2881619c6778..7bbf0772ee54 100644
--- device/serial/BUILD.gn
+++ device/serial/BUILD.gn
@@ -6,7 +6,7 @@ import("//build/config/features.gni")
 import("//mojo/public/tools/bindings/mojom.gni")
 
 # Library works only on desktop platforms.
-assert(is_win || is_linux || is_mac)
+assert(is_win || is_linux || is_mac || is_bsd)
 
 config("platform_support") {
   visibility = [ ":serial" ]
@@ -67,6 +67,12 @@ static_library("serial") {
       "IOKit.framework",
     ]
   }
+  if (is_bsd) {
+    sources -= [
+      "serial_device_enumerator_linux.cc",
+      "serial_device_enumerator_linux.h",
+    ]
+  }
 }
 
 static_library("test_support") {
diff --git device/serial/serial_io_handler_posix.cc device/serial/serial_io_handler_posix.cc
index 704a4bf076b3..9a182141f6f8 100644
--- device/serial/serial_io_handler_posix.cc
+++ device/serial/serial_io_handler_posix.cc
@@ -65,10 +68,12 @@ bool BitrateToSpeedConstant(int bitrate, speed_t* speed) {
     BITRATE_TO_SPEED_CASE(57600)
     BITRATE_TO_SPEED_CASE(115200)
     BITRATE_TO_SPEED_CASE(230400)
+#if !defined(OS_DRAGONFLY)
     BITRATE_TO_SPEED_CASE(460800)
     BITRATE_TO_SPEED_CASE(576000)
     BITRATE_TO_SPEED_CASE(921600)
 #endif
+#endif
     default:
       return false;
   }
diff --git device/usb/BUILD.gn device/usb/BUILD.gn
index 83ff8c1140bc..a1fda5ad945a 100644
--- device/usb/BUILD.gn
+++ device/usb/BUILD.gn
@@ -85,7 +85,13 @@ static_library("usb") {
     deps += [ ":jni_headers" ]
   }
 
-  if (is_win || is_mac) {
+  if (is_bsd) {
+    sources -= [
+      "usb_device_linux.cc",
+    ]
+  }
+
+  if (is_win || is_mac || is_bsd) {
     sources += [
       "usb_context.cc",
       "usb_context.h",
@@ -99,7 +105,11 @@ static_library("usb") {
       "usb_service_impl.h",
     ]
 
-    deps += [ "//third_party/libusb" ]
+    if (current_os == "dragonfly") {
+      configs += [ "//build/config/linux:libusb" ]
+    } else {
+      deps += [ "//third_party/libusb" ]
+    }
   }
 
   if (is_win) {
diff --git device/usb/usb_context.cc device/usb/usb_context.cc
index 6959fab01dc9..a4261dfac01f 100644
--- device/usb/usb_context.cc
+++ device/usb/usb_context.cc
@@ -9,8 +9,12 @@
 #include "base/macros.h"
 #include "base/threading/simple_thread.h"
 #include "device/usb/usb_error.h"
+#if defined(OS_DRAGONFLY)
+#include "libusb.h"
+#else
 #include "third_party/libusb/src/libusb/interrupt.h"
 #include "third_party/libusb/src/libusb/libusb.h"
+#endif
 
 namespace device {
 
@@ -58,7 +62,9 @@ void UsbContext::UsbEventHandler::Run() {
 
 void UsbContext::UsbEventHandler::Stop() {
   base::subtle::Release_Store(&running_, 0);
+#if !defined(OS_DRAGONFLY)
   libusb_interrupt_handle_event(context_);
+#endif
 }
 
 UsbContext::UsbContext(PlatformUsbContext context) : context_(context) {
diff --git device/usb/usb_context_unittest.cc device/usb/usb_context_unittest.cc
index 1ad9426f7d02..053f0e70c731 100644
--- device/usb/usb_context_unittest.cc
+++ device/usb/usb_context_unittest.cc
@@ -7,7 +7,11 @@
 #include "build/build_config.h"
 #include "device/usb/usb_context.h"
 #include "testing/gtest/include/gtest/gtest.h"
+#if defined(OS_DRAGONFLY)
+#include "libusb.h"
+#else
 #include "third_party/libusb/src/libusb/libusb.h"
+#endif
 
 namespace device {
 
diff --git device/usb/usb_device_handle_impl.cc device/usb/usb_device_handle_impl.cc
index e8b5b4244fa7..e0415cab888f 100644
--- device/usb/usb_device_handle_impl.cc
+++ device/usb/usb_device_handle_impl.cc
@@ -25,7 +25,11 @@
 #include "device/usb/usb_error.h"
 #include "device/usb/usb_service.h"
 #include "net/base/io_buffer.h"
+#if defined(OS_DRAGONFLY)
+#include <libusb.h>
+#else
 #include "third_party/libusb/src/libusb/libusb.h"
+#endif
 
 namespace device {
 
diff --git device/usb/usb_device_handle_impl.h device/usb/usb_device_handle_impl.h
index 1322e192f0b0..b458490dc098 100644
--- device/usb/usb_device_handle_impl.h
+++ device/usb/usb_device_handle_impl.h
@@ -18,7 +18,11 @@
 #include "base/memory/ref_counted.h"
 #include "base/threading/thread_checker.h"
 #include "device/usb/usb_device_handle.h"
+#if defined(OS_DRAGONFLY)
+#include "libusb.h"
+#else
 #include "third_party/libusb/src/libusb/libusb.h"
+#endif
 
 namespace base {
 class SequencedTaskRunner;
diff --git device/usb/usb_device_impl.cc device/usb/usb_device_impl.cc
index bdda9ca9ee31..8144a9a504c9 100644
--- device/usb/usb_device_impl.cc
+++ device/usb/usb_device_impl.cc
@@ -24,10 +24,63 @@
 #include "device/usb/usb_device_handle_impl.h"
 #include "device/usb/usb_error.h"
 #include "device/usb/usb_service.h"
+#if defined(OS_DRAGONFLY)
+#include <libusb.h>
+#else
 #include "third_party/libusb/src/libusb/libusb.h"
+#endif
 
 namespace device {
 
+namespace {
+
+void ConvertConfigDescriptor(const libusb_config_descriptor* platform_config,
+                             UsbConfigDescriptor* configuration) {
+  for (size_t i = 0; i < platform_config->bNumInterfaces; ++i) {
+    const struct libusb_interface* platform_interface =
+        &platform_config->interface[i];
+    for (int j = 0; j < platform_interface->num_altsetting; ++j) {
+      const struct libusb_interface_descriptor* platform_alt_setting =
+          &platform_interface->altsetting[j];
+      UsbInterfaceDescriptor interface(
+          platform_alt_setting->bInterfaceNumber,
+          platform_alt_setting->bAlternateSetting,
+          platform_alt_setting->bInterfaceClass,
+          platform_alt_setting->bInterfaceSubClass,
+          platform_alt_setting->bInterfaceProtocol);
+
+      interface.endpoints.reserve(platform_alt_setting->bNumEndpoints);
+      for (size_t k = 0; k < platform_alt_setting->bNumEndpoints; ++k) {
+        const struct libusb_endpoint_descriptor* platform_endpoint =
+            &platform_alt_setting->endpoint[k];
+        UsbEndpointDescriptor endpoint(platform_endpoint->bEndpointAddress,
+                                       platform_endpoint->bmAttributes,
+                                       platform_endpoint->wMaxPacketSize,
+                                       platform_endpoint->bInterval);
+        endpoint.extra_data.assign(
+            platform_endpoint->extra,
+            platform_endpoint->extra + platform_endpoint->extra_length);
+
+        interface.endpoints.push_back(endpoint);
+      }
+
+      interface.extra_data.assign(
+          platform_alt_setting->extra,
+          platform_alt_setting->extra + platform_alt_setting->extra_length);
+
+      configuration->interfaces.push_back(interface);
+    }
+  }
+
+  configuration->extra_data.assign(
+      platform_config->extra,
+      platform_config->extra + platform_config->extra_length);
+
+  configuration->AssignFirstInterfaceNumbers();
+}
+
+}  // namespace
+
 UsbDeviceImpl::UsbDeviceImpl(scoped_refptr<UsbContext> context,
                              PlatformUsbDevice platform_device,
                              const libusb_device_descriptor& descriptor)
@@ -69,18 +122,25 @@ void UsbDeviceImpl::ReadAllConfigurations() {
   libusb_device_descriptor device_descriptor;
   int rv = libusb_get_device_descriptor(platform_device_, &device_descriptor);
   if (rv == LIBUSB_SUCCESS) {
-    for (uint8_t i = 0; i < device_descriptor.bNumConfigurations; ++i) {
-      unsigned char* buffer;
-      rv = libusb_get_raw_config_descriptor(platform_device_, i, &buffer);
-      if (rv < 0) {
+    uint8_t num_configurations = device_descriptor.bNumConfigurations;
+    descriptor_.configurations.reserve(num_configurations);
+    for (uint8_t i = 0; i < num_configurations; ++i) {
+      libusb_config_descriptor* platform_config;
+      rv = libusb_get_config_descriptor(platform_device_, i, &platform_config);
+      if (rv != LIBUSB_SUCCESS) {
         USB_LOG(EVENT) << "Failed to get config descriptor: "
                        << ConvertPlatformUsbErrorToString(rv);
         continue;
       }
 
-      if (!descriptor_.Parse(std::vector<uint8_t>(buffer, buffer + rv)))
-        USB_LOG(EVENT) << "Config descriptor index " << i << " was corrupt.";
-      free(buffer);
+      UsbConfigDescriptor config_descriptor(
+          platform_config->bConfigurationValue,
+          (platform_config->bmAttributes & 0x40) != 0,
+          (platform_config->bmAttributes & 0x20) != 0,
+          platform_config->MaxPower * 2);
+      ConvertConfigDescriptor(platform_config, &config_descriptor);
+      descriptor_.configurations.push_back(config_descriptor);
+      libusb_free_config_descriptor(platform_config);
     }
   } else {
     USB_LOG(EVENT) << "Failed to get device descriptor: "
@@ -89,15 +149,17 @@ void UsbDeviceImpl::ReadAllConfigurations() {
 }
 
 void UsbDeviceImpl::RefreshActiveConfiguration() {
-  uint8_t config_value;
-  int rv = libusb_get_active_config_value(platform_device_, &config_value);
+  libusb_config_descriptor* platform_config;
+  int rv =
+      libusb_get_active_config_descriptor(platform_device_, &platform_config);
   if (rv != LIBUSB_SUCCESS) {
-    USB_LOG(EVENT) << "Failed to get active configuration: "
+    USB_LOG(EVENT) << "Failed to get config descriptor: "
                    << ConvertPlatformUsbErrorToString(rv);
     return;
   }
 
-  ActiveConfigurationChanged(config_value);
+  ActiveConfigurationChanged(platform_config->bConfigurationValue);
+  libusb_free_config_descriptor(platform_config);
 }
 
 void UsbDeviceImpl::OpenOnBlockingThread(
diff --git device/usb/usb_error.cc device/usb/usb_error.cc
index 9fadb162edea..584ecdfbbf88 100644
--- device/usb/usb_error.cc
+++ device/usb/usb_error.cc
@@ -4,7 +4,11 @@
 
 #include "device/usb/usb_error.h"
 
+#if defined(OS_DRAGONFLY)
+#include "libusb.h"
+#else
 #include "third_party/libusb/src/libusb/libusb.h"
+#endif
 
 namespace device {
 
diff --git device/usb/usb_service_impl.cc device/usb/usb_service_impl.cc
index 13cb14c95e3a..e419beb309cf 100644
--- device/usb/usb_service_impl.cc
+++ device/usb/usb_service_impl.cc
@@ -27,7 +27,11 @@
 #include "device/usb/usb_error.h"
 #include "device/usb/webusb_descriptors.h"
 #include "net/base/io_buffer.h"
+#if defined(OS_DRAGONFLY)
+#include "libusb.h"
+#else
 #include "third_party/libusb/src/libusb/libusb.h"
+#endif
 
 #if defined(OS_WIN)
 #define INITGUID
diff --git device/usb/usb_service_impl.h device/usb/usb_service_impl.h
index 0014dd31ff0b..1037144fd700 100644
--- device/usb/usb_service_impl.h
+++ device/usb/usb_service_impl.h
@@ -15,7 +15,11 @@
 #include "build/build_config.h"
 #include "device/usb/usb_context.h"
 #include "device/usb/usb_device_impl.h"
+#if defined(OS_DRAGONFLY)
+#include "libusb.h"
+#else
 #include "third_party/libusb/src/libusb/libusb.h"
+#endif
 
 #if defined(OS_WIN)
 #include "base/scoped_observer.h"
diff --git extensions/browser/api/networking_private/BUILD.gn extensions/browser/api/networking_private/BUILD.gn
index 274c5347b15c..b5fb2c64bbb5 100644
--- extensions/browser/api/networking_private/BUILD.gn
+++ extensions/browser/api/networking_private/BUILD.gn
@@ -40,7 +40,7 @@ source_set("networking_private") {
     if (use_dbus) {
       deps += [ "//dbus" ]
     }
-  } else if (is_win || is_mac) {
+  } else if (is_win || is_mac || is_bsd) {
     sources += [
       "networking_private_event_router_nonchromeos.cc",
       "networking_private_service_client.cc",
diff --git extensions/browser/api/serial/serial_api.cc extensions/browser/api/serial/serial_api.cc
index d7326aa005ec..befbded7c3c0 100644
--- extensions/browser/api/serial/serial_api.cc
+++ extensions/browser/api/serial/serial_api.cc
@@ -86,11 +86,13 @@ bool SerialGetDevicesFunction::Prepare() {
 void SerialGetDevicesFunction::Work() {
   DCHECK_CURRENTLY_ON(BrowserThread::FILE);
 
+#if !defined(OS_DRAGONFLY)
   std::unique_ptr<device::SerialDeviceEnumerator> enumerator =
       device::SerialDeviceEnumerator::Create();
   std::vector<device::serial::DeviceInfoPtr> devices = enumerator->GetDevices();
   results_ = serial::GetDevices::Results::Create(
       mojo::ConvertTo<std::vector<serial::DeviceInfo>>(devices));
+#endif
 }
 
 SerialConnectFunction::SerialConnectFunction() {
diff --git extensions/browser/browser_context_keyed_service_factories.cc extensions/browser/browser_context_keyed_service_factories.cc
index b230e314c3a4..cfa2616b1e3c 100644
--- extensions/browser/browser_context_keyed_service_factories.cc
+++ extensions/browser/browser_context_keyed_service_factories.cc
@@ -78,7 +78,8 @@ void EnsureBrowserContextKeyedServiceFactoriesBuilt() {
 #if defined(OS_CHROMEOS)
   NetworkingConfigServiceFactory::GetInstance();
 #endif
-#if defined(OS_LINUX) || defined(OS_WIN) || defined(OS_MACOSX)
+#if defined(OS_LINUX) || defined(OS_WIN) || defined(OS_MACOSX) || \
+    defined(OS_BSD)
   NetworkingPrivateEventRouterFactory::GetInstance();
 #endif
   PowerAPI::GetFactoryInstance();
diff --git extensions/common/api/runtime.json extensions/common/api/runtime.json
index 893ffc0fd9a9..fe0d940d0021 100644
--- extensions/common/api/runtime.json
+++ extensions/common/api/runtime.json
@@ -66,7 +66,8 @@
         "id": "PlatformOs",
         "type": "string",
         "description": "The operating system chrome is running on.",
-        "enum": ["mac", "win", "android", "cros", "linux", "openbsd"]
+        "enum": ["mac", "win", "android", "cros", "linux", "openbsd",
+                 "freebsd", "dragonfly"]
       },
       {
         "id": "PlatformArch",
diff --git extensions/shell/browser/shell_runtime_api_delegate.cc extensions/shell/browser/shell_runtime_api_delegate.cc
index ec04668efca1..a51971cec0b5 100644
--- extensions/shell/browser/shell_runtime_api_delegate.cc
+++ extensions/shell/browser/shell_runtime_api_delegate.cc
@@ -45,6 +45,8 @@ bool ShellRuntimeAPIDelegate::GetPlatformInfo(PlatformInfo* info) {
   info->os = api::runtime::PLATFORM_OS_CROS;
 #elif defined(OS_LINUX)
   info->os = api::runtime::PLATFORM_OS_LINUX;
+#elif defined(OS_DRAGONFLY)
+  info->os = api::runtime::PLATFORM_OS_DRAGONFLY;
 #endif
   return true;
 }
diff --git gpu/BUILD.gn gpu/BUILD.gn
index 7c7ebc58c609..75247de610c5 100644
--- gpu/BUILD.gn
+++ gpu/BUILD.gn
@@ -96,7 +96,7 @@ test("command_buffer_gles2_tests") {
     libs += [ "android" ]
     deps += [ "//ui/android:ui_java" ]
   }
-  if (is_linux && !is_component_build) {
+  if ((is_linux || is_bsd) && !is_component_build) {
     configs += [ "//build/config/gcc:rpath_for_built_shared_libraries" ]
   }
 }
@@ -325,7 +325,7 @@ test("gpu_unittests") {
     sources += [ "ipc/client/gpu_memory_buffer_impl_io_surface_unittest.cc" ]
   }
 
-  if (is_linux) {
+  if (is_linux || is_bsd) {
     sources += [ "ipc/client/gpu_memory_buffer_impl_native_pixmap_unittest.cc" ]
   }
 
@@ -425,7 +425,7 @@ fuzzer_test("gpu_fuzzer") {
   libfuzzer_options = [ "max_len=16384" ]
 }
 
-if (is_linux) {
+if (is_linux || is_bsd) {
   fuzzer_test("gpu_angle_fuzzer") {
     sources = [
       "command_buffer/tests/fuzzer_main.cc",
diff --git gpu/config/BUILD.gn gpu/config/BUILD.gn
index 1a980afd8b20..287bceb4d4b1 100644
--- gpu/config/BUILD.gn
+++ gpu/config/BUILD.gn
@@ -144,7 +144,7 @@ source_set("config_sources") {
       ]
     }
   }
-  if (is_linux || is_mac) {
+  if (is_linux || is_mac || is_bsd) {
     deps += [ "//third_party/angle:angle_gpu_info_util" ]
   }
 }
diff --git gpu/config/gpu_control_list.cc gpu/config/gpu_control_list.cc
index 334ea2a1390c..bc66801ecbe4 100644
--- gpu/config/gpu_control_list.cc
+++ gpu/config/gpu_control_list.cc
@@ -206,7 +206,7 @@ bool GpuControlList::More::GLVersionInfoMismatch(
 GpuControlList::GLType GpuControlList::More::GetDefaultGLType() {
 #if defined(OS_CHROMEOS)
   return kGLTypeGL;
-#elif defined(OS_LINUX) || defined(OS_OPENBSD)
+#elif defined(OS_LINUX) || defined(OS_BSD)
   return kGLTypeGL;
 #elif defined(OS_MACOSX)
   return kGLTypeGL;
@@ -621,7 +621,7 @@ GpuControlList::OsType GpuControlList::GetOsType() {
   return kOsWin;
 #elif defined(OS_ANDROID)
   return kOsAndroid;
-#elif defined(OS_LINUX) || defined(OS_OPENBSD)
+#elif defined(OS_LINUX) || defined(OS_BSD)
   return kOsLinux;
 #elif defined(OS_MACOSX)
   return kOsMacosx;
diff --git gpu/gles2_conform_support/BUILD.gn gpu/gles2_conform_support/BUILD.gn
index ca9e1a3de1b4..04cf5600c608 100644
--- gpu/gles2_conform_support/BUILD.gn
+++ gpu/gles2_conform_support/BUILD.gn
@@ -60,7 +60,7 @@ executable("gles2_conform_support") {
     "//gpu/gles2_conform_support/egl",
     "//ui/gl",
   ]
-  if (is_linux) {
+  if (is_linux || is_bsd) {
     sources += [
       "native/egl_native_aura.cc",
       "native/egl_native_x11.cc",
diff --git gpu/ipc/service/BUILD.gn gpu/ipc/service/BUILD.gn
index e2091c1dcf99..abe80fcb0bb0 100644
--- gpu/ipc/service/BUILD.gn
+++ gpu/ipc/service/BUILD.gn
@@ -112,11 +112,15 @@ target(link_target_type, "ipc_service_sources") {
     ]
     libs += [ "android" ]
   }
+  if (is_linux || is_bsd) {
+    sources += [
+      "image_transport_surface_linux.cc",
+    ]
+  }
   if (is_linux) {
     sources += [
       "gpu_memory_buffer_factory_native_pixmap.cc",
       "gpu_memory_buffer_factory_native_pixmap.h",
-      "image_transport_surface_linux.cc",
     ]
   }
   if (use_x11) {
diff --git gpu/tools/compositor_model_bench/BUILD.gn gpu/tools/compositor_model_bench/BUILD.gn
index 114b7d1d0cb9..2dea79468c4e 100644
--- gpu/tools/compositor_model_bench/BUILD.gn
+++ gpu/tools/compositor_model_bench/BUILD.gn
@@ -4,7 +4,7 @@
 
 import("//build/config/ui.gni")
 
-if (is_linux && !is_chromeos && current_cpu != "arm" && use_x11) {
+if (((is_linux && !is_chromeos) || is_bsd) && current_cpu != "arm" && use_x11) {
   executable("compositor_model_bench") {
     sources = [
       "compositor_model_bench.cc",
diff --git headless/lib/headless_content_main_delegate.cc headless/lib/headless_content_main_delegate.cc
index 386a15ebd203..eee91dd48581 100644
--- headless/lib/headless_content_main_delegate.cc
+++ headless/lib/headless_content_main_delegate.cc
@@ -233,7 +233,8 @@ int HeadlessContentMainDelegate::RunProcess(
 }
 #endif  // !defined(CHROME_MULTIPLE_DLL_CHILD)
 
-#if !defined(OS_MACOSX) && defined(OS_POSIX) && !defined(OS_ANDROID)
+#if !defined(OS_MACOSX) && defined(OS_POSIX) && !defined(OS_ANDROID) && \
+    !defined(OS_DRAGONFLY)
 void HeadlessContentMainDelegate::ZygoteForked() {
   const base::CommandLine& command_line(
       *base::CommandLine::ForCurrentProcess());
diff --git headless/lib/headless_content_main_delegate.h headless/lib/headless_content_main_delegate.h
index eb8cd61eea60..1612abed75f7 100644
--- headless/lib/headless_content_main_delegate.h
+++ headless/lib/headless_content_main_delegate.h
@@ -44,7 +44,8 @@ class HEADLESS_EXPORT HeadlessContentMainDelegate
 
   HeadlessBrowserImpl* browser() const { return browser_.get(); }
 
-#if !defined(OS_MACOSX) && defined(OS_POSIX) && !defined(OS_ANDROID)
+#if !defined(OS_MACOSX) && defined(OS_POSIX) && !defined(OS_ANDROID) && \
+    !defined(OS_DRAGONFLY)
   void ZygoteForked() override;
 #endif
 
diff --git headless/lib/headless_macros.h headless/lib/headless_macros.h
index 4b7bedb7a9ca..22e10b2c9e7c 100644
--- headless/lib/headless_macros.h
+++ headless/lib/headless_macros.h
@@ -5,7 +5,7 @@
 #ifndef HEADLESS_LIB_HEADLESS_MACROS_H_
 #define HEADLESS_LIB_HEADLESS_MACROS_H_
 
-#if defined(OS_POSIX) && !defined(OS_MACOSX)
+#if defined(OS_POSIX) && !defined(OS_MACOSX) && !defined(OS_BSD)
 #define HEADLESS_USE_BREAKPAD
 #endif  // defined(OS_POSIX) && !defined(OS_MACOSX)
 
diff --git ipc/ipc_message_utils.cc ipc/ipc_message_utils.cc
index 8179cd4dfb2a..7e63b3768596 100644
--- ipc/ipc_message_utils.cc
+++ ipc/ipc_message_utils.cc
@@ -419,7 +419,7 @@ void ParamTraits<unsigned int>::Log(const param_type& p, std::string* l) {
   l->append(base::UintToString(p));
 }
 
-#if defined(OS_WIN) || defined(OS_LINUX) || \
+#if defined(OS_WIN) || defined(OS_LINUX) || defined(OS_BSD) || \
     (defined(OS_ANDROID) && defined(ARCH_CPU_64_BITS))
 void ParamTraits<long>::Log(const param_type& p, std::string* l) {
   l->append(base::Int64ToString(static_cast<int64_t>(p)));
diff --git ipc/ipc_message_utils.h ipc/ipc_message_utils.h
index 84324ebaf417..71febab4d91b 100644
--- ipc/ipc_message_utils.h
+++ ipc/ipc_message_utils.h
@@ -211,7 +211,7 @@ struct ParamTraits<unsigned int> {
 //   3) Android 64 bit also has int64_t typedef'd to long.
 // Since we want to support Android 32<>64 bit IPC, as long as we don't have
 // these traits for 32 bit ARM then that'll catch any errors.
-#if defined(OS_WIN) || defined(OS_LINUX) || \
+#if defined(OS_WIN) || defined(OS_LINUX) || defined(OS_BSD) || \
     (defined(OS_ANDROID) && defined(ARCH_CPU_64_BITS))
 template <>
 struct ParamTraits<long> {
diff --git mash/BUILD.gn mash/BUILD.gn
index c4fc6dbda9ef..dba9db6813f1 100644
--- mash/BUILD.gn
+++ mash/BUILD.gn
@@ -75,7 +75,7 @@ catalog("catalog") {
     ]
   }
 
-  if (is_linux && !is_android) {
+  if ((is_linux && !is_android) || is_bsd) {
     standalone_services += [ "//components/font_service:manifest" ]
   }
 
diff --git media/audio/BUILD.gn media/audio/BUILD.gn
index 3f0660a0a685..aa08fe4e4a7a 100644
--- media/audio/BUILD.gn
+++ media/audio/BUILD.gn
@@ -219,7 +219,7 @@ source_set("audio") {
     deps += [ "//media/base/android:media_jni_headers" ]
   }
 
-  if (is_linux) {
+  if (is_linux || is_bsd) {
     sources += [ "linux/audio_manager_linux.cc" ]
   }
 
diff --git media/audio/alsa/audio_manager_alsa.cc media/audio/alsa/audio_manager_alsa.cc
index 33fc0b2ddb91..7a7af7e6b5d1 100644
--- media/audio/alsa/audio_manager_alsa.cc
+++ media/audio/alsa/audio_manager_alsa.cc
@@ -131,7 +131,9 @@ void AudioManagerAlsa::GetAlsaAudioDevices(StreamType type,
   int card = -1;
 
   // Loop through the sound cards to get ALSA device hints.
+#if defined(OS_LINUX)
   while (!wrapper_->CardNext(&card) && card >= 0) {
+#endif
     void** hints = NULL;
     int error = wrapper_->DeviceNameHint(card, kPcmInterfaceName, &hints);
     if (!error) {
@@ -143,7 +145,9 @@ void AudioManagerAlsa::GetAlsaAudioDevices(StreamType type,
       DLOG(WARNING) << "GetAlsaAudioDevices: unable to get device hints: "
                     << wrapper_->StrError(error);
     }
+#if defined(OS_LINUX)
   }
+#endif
 }
 
 void AudioManagerAlsa::GetAlsaDevicesInfo(AudioManagerAlsa::StreamType type,
@@ -225,7 +229,11 @@ bool AudioManagerAlsa::IsAlsaDeviceAvailable(
     // goes through software conversion if needed (e.g. incompatible
     // sample rate).
     // TODO(joi): Should we prefer "hw" instead?
+#if defined(OS_LINUX)
     static const char kDeviceTypeDesired[] = "plughw";
+#else
+    static const char kDeviceTypeDesired[] = "plug";
+#endif
     return strncmp(kDeviceTypeDesired,
                    device_name,
                    arraysize(kDeviceTypeDesired) - 1) == 0;
@@ -249,7 +257,9 @@ bool AudioManagerAlsa::HasAnyAlsaAudioDevice(
   // Loop through the sound cards.
   // Don't use snd_device_name_hint(-1,..) since there is a access violation
   // inside this ALSA API with libasound.so.2.0.0.
+#if defined(OS_LINUX)
   while (!wrapper_->CardNext(&card) && (card >= 0) && !has_device) {
+#endif
     int error = wrapper_->DeviceNameHint(card, kPcmInterfaceName, &hints);
     if (!error) {
       for (void** hint_iter = hints; *hint_iter != NULL; hint_iter++) {
@@ -273,7 +283,9 @@ bool AudioManagerAlsa::HasAnyAlsaAudioDevice(
       DLOG(WARNING) << "HasAnyAudioDevice: unable to get device hints: "
                     << wrapper_->StrError(error);
     }
+#if defined(OS_LINUX)
   }
+#endif
 
   return has_device;
 }
diff --git media/audio/audio_manager.cc media/audio/audio_manager.cc
index 87a2b121e5ca..530bcf6fe2a4 100644
--- media/audio/audio_manager.cc
+++ media/audio/audio_manager.cc
@@ -94,7 +94,7 @@ class AudioManagerHelper : public base::PowerObserver {
   }
 #endif
 
-#if defined(OS_LINUX)
+#if defined(OS_LINUX) || defined(OS_DRAGONFLY) || defined(OS_FREEBSD)
   void set_app_name(const std::string& app_name) { app_name_ = app_name; }
   const std::string& app_name() const { return app_name_; }
 #endif
@@ -228,7 +228,7 @@ class AudioManagerHelper : public base::PowerObserver {
   std::unique_ptr<base::win::ScopedCOMInitializer> com_initializer_for_testing_;
 #endif
 
-#if defined(OS_LINUX)
+#if defined(OS_LINUX) || defined(OS_DRAGONFLY) || defined(OS_FREEBSD)
   std::string app_name_;
 #endif
 
@@ -312,7 +312,7 @@ void AudioManager::StartHangMonitorIfNeeded(
   GetHelper()->StartHangTimer(std::move(task_runner));
 }
 
-#if defined(OS_LINUX)
+#if defined(OS_LINUX) || defined(OS_DRAGONFLY) || defined(OS_FREEBSD)
 // static
 void AudioManager::SetGlobalAppName(const std::string& app_name) {
   GetHelper()->set_app_name(app_name);
diff --git media/audio/audio_manager.h media/audio/audio_manager.h
index f92651ed0627..f6bb3d500bf0 100644
--- media/audio/audio_manager.h
+++ media/audio/audio_manager.h
@@ -69,7 +69,7 @@ class MEDIA_EXPORT AudioManager {
   static void StartHangMonitorIfNeeded(
       scoped_refptr<base::SingleThreadTaskRunner> task_runner);
 
-#if defined(OS_LINUX)
+#if defined(OS_LINUX) || defined(OS_DRAGONFLY) || defined(OS_FREEBSD)
   // Sets the name of the audio source as seen by external apps. Only actually
   // used with PulseAudio as of this writing.
   static void SetGlobalAppName(const std::string& app_name);
diff --git media/base/BUILD.gn media/base/BUILD.gn
index 19e9acc7db3b..c32b38f81f41 100644
--- media/base/BUILD.gn
+++ media/base/BUILD.gn
@@ -318,7 +318,7 @@ target(link_target_type, "base") {
     allow_circular_includes_from += [ "//media/base/android" ]
   }
 
-  if (is_linux && use_x11) {
+  if ((is_linux || is_bsd) && use_x11) {
     configs += [
       "//build/config/linux:x11",
       "//build/config/linux:xext",
@@ -344,7 +344,7 @@ target(link_target_type, "base") {
     defines += [ "DISABLE_USER_INPUT_MONITOR" ]
   }
 
-  if (is_linux || is_win) {
+  if (is_linux || is_win || is_bsd) {
     sources += [
       "keyboard_event_counter.cc",
       "keyboard_event_counter.h",
@@ -513,7 +513,7 @@ source_set("unit_tests") {
     ]
   }
 
-  if (is_linux || is_win) {
+  if (is_linux || is_win || is_bsd) {
     sources += [ "keyboard_event_counter_unittest.cc" ]
   }
 }
diff --git media/base/media_switches.cc media/base/media_switches.cc
index c612c4a36d97..2b440f892066 100644
--- media/base/media_switches.cc
+++ media/base/media_switches.cc
@@ -26,7 +26,8 @@ const char kDisableMediaSuspend[] = "disable-media-suspend";
 const char kReportVp9AsAnUnsupportedMimeType[] =
     "report-vp9-as-an-unsupported-mime-type";
 
-#if defined(OS_LINUX) || defined(OS_FREEBSD) || defined(OS_SOLARIS)
+#if defined(OS_LINUX) || defined(OS_FREEBSD) || defined(OS_SOLARIS) || \
+    defined(OS_DRAGONFLY)
 // The Alsa device to use when opening an audio input stream.
 const char kAlsaInputDevice[] = "alsa-input-device";
 // The Alsa device to use when opening an audio stream.
diff --git media/base/media_switches.h media/base/media_switches.h
index 6ef4f301cbb0..82211bfda5bb 100644
--- media/base/media_switches.h
+++ media/base/media_switches.h
@@ -30,7 +30,8 @@ MEDIA_EXPORT extern const char kDisableMediaSuspend[];
 
 MEDIA_EXPORT extern const char kReportVp9AsAnUnsupportedMimeType[];
 
-#if defined(OS_LINUX) || defined(OS_FREEBSD) || defined(OS_SOLARIS)
+#if defined(OS_LINUX) || defined(OS_FREEBSD) || defined(OS_SOLARIS) || \
+    defined(OS_DRAGONFLY)
 MEDIA_EXPORT extern const char kAlsaInputDevice[];
 MEDIA_EXPORT extern const char kAlsaOutputDevice[];
 #endif
diff --git media/capture/BUILD.gn media/capture/BUILD.gn
index e220cba7a273..e3ad5379a696 100644
--- media/capture/BUILD.gn
+++ media/capture/BUILD.gn
@@ -186,6 +186,16 @@ component("capture_lib") {
       "video/blob_utils.h",
     ]
   }
+  if (is_bsd) {
+    sources -= [
+      "video/linux/v4l2_capture_delegate.cc",
+      "video/linux/v4l2_capture_delegate.h",
+      "video/linux/video_capture_device_factory_linux.cc",
+      "video/linux/video_capture_device_factory_linux.h",
+      "video/linux/video_capture_device_linux.cc",
+      "video/linux/video_capture_device_linux.h",
+    ]
+  }
 }
 
 test("capture_unittests") {
diff --git media/capture/video/fake_video_capture_device_factory.cc media/capture/video/fake_video_capture_device_factory.cc
index cba70d49f822..5e498e1dd063 100644
--- media/capture/video/fake_video_capture_device_factory.cc
+++ media/capture/video/fake_video_capture_device_factory.cc
@@ -192,7 +192,8 @@ void FakeVideoCaptureDeviceFactory::GetDeviceDescriptors(
   for (const auto& entry : devices_config_) {
     device_descriptors->emplace_back(
         base::StringPrintf("fake_device_%d", entry_index), entry.device_id,
-#if defined(OS_LINUX)
+#if defined(OS_LINUX) || defined(OS_BSD)
+	/* TODO(ivadasz): DragonFly will probably use a different API here. */
         VideoCaptureApi::LINUX_V4L2_SINGLE_PLANE
 #elif defined(OS_MACOSX)
         VideoCaptureApi::MACOSX_AVFOUNDATION
diff --git media/capture/video/video_capture_device_factory.cc media/capture/video/video_capture_device_factory.cc
index b4065a6a9df3..6f8174ae0461 100644
--- media/capture/video/video_capture_device_factory.cc
+++ media/capture/video/video_capture_device_factory.cc
@@ -22,7 +22,12 @@ VideoCaptureDeviceFactory::CreateFactory(
       base::CommandLine::ForCurrentProcess();
   // Use a Fake or File Video Device Factory if the command line flags are
   // present, otherwise use the normal, platform-dependent, device factory.
+#if defined(OS_BSD)
+  /* No proper Video capture implementation is available for DragonFly yet. */
+  if (1) {
+#else
   if (command_line->HasSwitch(switches::kUseFakeDeviceForMediaStream)) {
+#endif
     if (command_line->HasSwitch(switches::kUseFileForFakeVideoCapture)) {
       return std::unique_ptr<VideoCaptureDeviceFactory>(
           new media::FileVideoCaptureDeviceFactory());
diff --git media/cast/BUILD.gn media/cast/BUILD.gn
index 1204b1f6fd68..6b9eead7e3a6 100644
--- media/cast/BUILD.gn
+++ media/cast/BUILD.gn
@@ -361,7 +361,7 @@ test("cast_unittests") {
   }
 }
 
-if (is_win || is_mac || (is_linux && !is_chromeos)) {
+if (is_win || is_mac || (is_linux && !is_chromeos) || is_bsd) {
   # This is a target for the collection of cast development tools.  They are
   # not built/linked into the Chromium browser.
   group("testing_tools") {
@@ -416,7 +416,7 @@ if (is_win || is_mac || (is_linux && !is_chromeos)) {
       "//ui/gfx/geometry",
     ]
 
-    if (is_linux && !is_chromeos && use_x11) {
+    if (((is_linux && !is_chromeos) || is_bsd) && use_x11) {
       sources += [
         "test/linux_output_window.cc",
         "test/linux_output_window.h",
@@ -513,13 +513,13 @@ if (is_win || is_mac || (is_linux && !is_chromeos)) {
       "//net",
     ]
   }
-} else {  # !(is_win || is_mac || (is_linux && !is_chromeos))
+} else {  # !(is_win || is_mac || (is_linux && !is_chromeos) || is_bsd)
   # The testing tools are only built for the desktop platforms.
   group("testing_tools") {
   }
 }
 
-if (is_linux && !is_chromeos) {
+if ((is_linux && !is_chromeos) || is_bsd) {
   test("tap_proxy") {
     sources = [
       "test/utility/tap_proxy.cc",
diff --git mojo/edk/embedder/platform_channel_utils_posix.cc mojo/edk/embedder/platform_channel_utils_posix.cc
index 689b6eec0dc9..a1ff97b1816b 100644
--- mojo/edk/embedder/platform_channel_utils_posix.cc
+++ mojo/edk/embedder/platform_channel_utils_posix.cc
@@ -36,7 +36,7 @@ bool IsRecoverableError() {
 
 bool GetPeerEuid(PlatformHandle handle, uid_t* peer_euid) {
   DCHECK(peer_euid);
-#if defined(OS_MACOSX) || defined(OS_OPENBSD) || defined(OS_FREEBSD)
+#if defined(OS_MACOSX) || defined(OS_BSD)
   uid_t socket_euid;
   gid_t socket_gid;
   if (getpeereid(handle.handle, &socket_euid, &socket_gid) < 0) {
diff --git net/BUILD.gn net/BUILD.gn
index 62145ac928a6..b39f7337af17 100644
--- net/BUILD.gn
+++ net/BUILD.gn
@@ -1752,6 +1752,23 @@ component("net") {
       }
     }
 
+    if (is_bsd) {
+      sources -= [
+        "base/address_tracker_linux.cc",
+        "base/address_tracker_linux.h",
+        "base/network_change_notifier_linux.cc",
+        "base/network_change_notifier_linux.h",
+        "base/network_interfaces_linux.cc",
+        "base/network_interfaces_linux.h",
+      ]
+      set_sources_assignment_filter([])
+      sources += [
+        "base/network_interfaces_mac.cc",
+        "base/network_interfaces_mac.h",
+      ]
+      set_sources_assignment_filter(sources_assignment_filter)
+    }
+
     if (!enable_built_in_dns) {
       sources -= [
         "dns/address_sorter_posix.cc",
@@ -2904,7 +2921,7 @@ if (!is_ios && !is_android) {
   }
 }
 
-if (is_linux || is_mac) {
+if (is_linux || is_mac || is_bsd) {
   executable("cachetool") {
     testonly = true
     sources = [
@@ -5020,7 +5037,7 @@ test("net_unittests") {
     ]
   }
 
-  if (is_desktop_linux) {
+  if (is_desktop_linux && !is_bsd) {
     deps += [ ":epoll_quic_tools" ]
   }
   if (is_linux) {
diff --git net/base/network_interfaces_mac.cc net/base/network_interfaces_mac.cc
index 8a6e482f0fa2..a86e2c5058b3 100644
--- net/base/network_interfaces_mac.cc
+++ net/base/network_interfaces_mac.cc
@@ -234,7 +234,7 @@ bool GetNetworkList(NetworkInterfaceList* networks, int policy) {
 
   std::unique_ptr<internal::IPAttributesGetterMac> ip_attributes_getter;
 
-#if !defined(OS_IOS)
+#if defined(OS_MACOSX) && !defined(OS_IOS)
   ip_attributes_getter.reset(new IPAttributesGetterMacImpl());
 #endif
 
diff --git net/dns/dns_config_service_posix.cc net/dns/dns_config_service_posix.cc
index c9c9d9231af0..22887448617f 100644
--- net/dns/dns_config_service_posix.cc
+++ net/dns/dns_config_service_posix.cc
@@ -138,11 +138,11 @@ ConfigParsePosixResult ReadDnsConfig(DnsConfig* config) {
     result = CONFIG_PARSE_POSIX_RES_INIT_FAILED;
   }
   // Prefer res_ndestroy where available.
-#if defined(OS_MACOSX) || defined(OS_FREEBSD)
+#if defined(OS_MACOSX) || defined(OS_FREEBSD) || defined(OS_DRAGONFLY)
   res_ndestroy(&res);
 #else
   res_nclose(&res);
-#endif  // defined(OS_MACOSX) || defined(OS_FREEBSD)
+#endif  // defined(OS_MACOSX) || defined(OS_FREEBSD) || defined(OS_DRAGONFLY)
 #endif  // defined(OS_OPENBSD)
 
 #if defined(OS_MACOSX) && !defined(OS_IOS)
@@ -472,7 +472,7 @@ ConfigParsePosixResult ConvertResStateToDnsConfig(const struct __res_state& res,
 
   dns_config->nameservers.clear();
 
-#if defined(OS_MACOSX) || defined(OS_FREEBSD)
+#if defined(OS_MACOSX) || defined(OS_FREEBSD) || defined(OS_DRAGONFLY)
   union res_sockaddr_union addresses[MAXNS];
   int nscount = res_getservers(const_cast<res_state>(&res), addresses, MAXNS);
   DCHECK_GE(nscount, 0);
@@ -511,7 +511,7 @@ ConfigParsePosixResult ConvertResStateToDnsConfig(const struct __res_state& res,
       return CONFIG_PARSE_POSIX_BAD_ADDRESS;
     dns_config->nameservers.push_back(ipe);
   }
-#else  // !(defined(OS_LINUX) || defined(OS_MACOSX) || defined(OS_FREEBSD))
+#else  // !(defined(OS_LINUX) || defined(OS_MACOSX) || defined(OS_FREEBSD)) || defined(OS_DRAGONFLY)
   DCHECK_LE(res.nscount, MAXNS);
   for (int i = 0; i < res.nscount; ++i) {
     IPEndPoint ipe;
@@ -522,7 +522,7 @@ ConfigParsePosixResult ConvertResStateToDnsConfig(const struct __res_state& res,
     }
     dns_config->nameservers.push_back(ipe);
   }
-#endif  // defined(OS_MACOSX) || defined(OS_FREEBSD)
+#endif  // defined(OS_MACOSX) || defined(OS_FREEBSD) || defined(OS_DRAGONFLY)
 
   dns_config->search.clear();
   for (int i = 0; (i < MAXDNSRCH) && res.dnsrch[i]; ++i) {
diff --git net/dns/dns_reloader.cc net/dns/dns_reloader.cc
index 5e9165e2d156..32bfc283a62a 100644
--- net/dns/dns_reloader.cc
+++ net/dns/dns_reloader.cc
@@ -7,6 +7,9 @@
 #if defined(OS_POSIX) && !defined(OS_MACOSX) && !defined(OS_OPENBSD) && \
     !defined(OS_ANDROID)
 
+#if defined(OS_DRAGONFLY)
+#include <netinet/in.h>
+#endif
 #include <resolv.h>
 
 #include "base/lazy_instance.h"
diff --git net/dns/dns_session.cc net/dns/dns_session.cc
index cdcd7ce0f497..d39b387de2c0 100644
--- net/dns/dns_session.cc
+++ net/dns/dns_session.cc
@@ -164,7 +164,7 @@ unsigned DnsSession::NextFirstServerIndex() {
 
 unsigned DnsSession::NextGoodServerIndex(unsigned server_index) {
   unsigned index = server_index;
-  base::Time oldest_server_failure(base::Time::Now());
+  base::Time oldest_server_failure;
   unsigned oldest_server_failure_index = 0;
 
   UMA_HISTOGRAM_BOOLEAN("AsyncDNS.ServerIsGood",
@@ -177,6 +177,8 @@ unsigned DnsSession::NextGoodServerIndex(unsigned server_index) {
     if (server_stats_[server_index]->last_failure_count < config_.attempts) {
       return index;
     }
+    if (oldest_server_failure.is_null())
+      oldest_server_failure = base::Time::Now();
     // Track oldest failed server.
     if (cur_server_failure < oldest_server_failure) {
       oldest_server_failure = cur_server_failure;
diff --git net/proxy/proxy_config_service_linux.cc net/proxy/proxy_config_service_linux.cc
index 52564b5ef508..b3c1dc979e1b 100644
--- net/proxy/proxy_config_service_linux.cc
+++ net/proxy/proxy_config_service_linux.cc
@@ -11,7 +11,9 @@
 #include <limits.h>
 #include <stdio.h>
 #include <stdlib.h>
+#if !defined(OS_BSD)
 #include <sys/inotify.h>
+#endif
 #include <unistd.h>
 
 #include <map>
@@ -855,6 +857,7 @@ bool SettingGetterImplGSettings::LoadAndCheckVersion(
 }
 #endif  // defined(USE_GIO)
 
+#if !defined(OS_BSD)
 // This is the KDE version that reads kioslaverc and simulates gconf.
 // Doing this allows the main Delegate code, as well as the unit tests
 // for it, to stay the same - and the settings map fairly well besides.
@@ -1348,6 +1351,7 @@ class SettingGetterImplKDE : public ProxyConfigServiceLinux::SettingGetter {
 
   DISALLOW_COPY_AND_ASSIGN(SettingGetterImplKDE);
 };
+#endif
 
 }  // namespace
 
@@ -1549,7 +1553,9 @@ ProxyConfigServiceLinux::Delegate::Delegate(
     case base::nix::DESKTOP_ENVIRONMENT_KDE3:
     case base::nix::DESKTOP_ENVIRONMENT_KDE4:
     case base::nix::DESKTOP_ENVIRONMENT_KDE5:
+#if !defined(OS_BSD)
       setting_getter_.reset(new SettingGetterImplKDE(env_var_getter_.get()));
+#endif
       break;
     case base::nix::DESKTOP_ENVIRONMENT_XFCE:
     case base::nix::DESKTOP_ENVIRONMENT_OTHER:
diff --git net/proxy/proxy_service.cc net/proxy/proxy_service.cc
index 4a21400ea503..98b17fbd9965 100644
--- net/proxy/proxy_service.cc
+++ net/proxy/proxy_service.cc
@@ -49,7 +49,7 @@
 #elif defined(OS_MACOSX)
 #include "net/proxy/proxy_config_service_mac.h"
 #include "net/proxy/proxy_resolver_mac.h"
-#elif defined(OS_LINUX) && !defined(OS_CHROMEOS)
+#elif (defined(OS_LINUX) && !defined(OS_CHROMEOS)) || defined(OS_BSD)
 #include "net/proxy/proxy_config_service_linux.h"
 #elif defined(OS_ANDROID)
 #include "net/proxy/proxy_config_service_android.h"
@@ -1535,7 +1535,7 @@ ProxyService::CreateSystemProxyConfigService(
              << "profile_io_data.cc::CreateProxyConfigService and this should "
              << "be used only for examples.";
   return base::WrapUnique(new UnsetProxyConfigService);
-#elif defined(OS_LINUX)
+#elif defined(OS_LINUX) || defined(OS_BSD)
   std::unique_ptr<ProxyConfigServiceLinux> linux_config_service(
       new ProxyConfigServiceLinux());
 
diff --git net/quic/platform/impl/quic_ip_address_impl.cc net/quic/platform/impl/quic_ip_address_impl.cc
index 961f5f125f49..98b0f214bcb5 100644
--- net/quic/platform/impl/quic_ip_address_impl.cc
+++ net/quic/platform/impl/quic_ip_address_impl.cc
@@ -14,6 +14,10 @@
 #include <netinet/in.h>
 #endif
 
+#if defined(OS_DRAGONFLY)
+#include <sys/socket.h>
+#endif
+
 using std::string;
 
 namespace net {
diff --git net/socket/tcp_socket_posix.cc net/socket/tcp_socket_posix.cc
index cc65cc8da1e5..0f0ff125ca37 100644
--- net/socket/tcp_socket_posix.cc
+++ net/socket/tcp_socket_posix.cc
@@ -39,6 +39,10 @@
 #define TCPI_OPT_SYN_DATA 32
 #endif
 
+#if defined(OS_DRAGONFLY)
+#define SOL_TCP IPPROTO_TCP
+#endif
+
 namespace net {
 
 namespace {
@@ -64,9 +68,14 @@ bool SetTCPKeepAlive(int fd, bool enable, int delay) {
   if (!enable)
     return true;
 
-#if defined(OS_LINUX) || defined(OS_ANDROID)
+#if defined(OS_LINUX) || defined(OS_ANDROID) || defined(OS_BSD)
   // Setting the keepalive interval varies by platform.
 
+#if defined(OS_DRAGONFLY)
+  // In DragonFly the delays are expected in milliseconds.
+  delay *= 1000;
+#endif
+
   // Set seconds until first TCP keep alive.
   if (setsockopt(fd, SOL_TCP, TCP_KEEPIDLE, &delay, sizeof(delay))) {
     PLOG(ERROR) << "Failed to set TCP_KEEPIDLE on fd: " << fd;
diff --git net/socket/udp_socket_posix.cc net/socket/udp_socket_posix.cc
index 66f037b40ec0..6922b74ff488 100644
--- net/socket/udp_socket_posix.cc
+++ net/socket/udp_socket_posix.cc
@@ -60,7 +60,7 @@ const int kBindRetries = 10;
 const int kPortStart = 1024;
 const int kPortEnd = 65535;
 
-#if defined(OS_MACOSX)
+#if defined(OS_MACOSX) || defined(OS_BSD)
 
 // Returns IPv4 address in network order.
 int GetIPv4AddressFromIndex(int socket, uint32_t index, uint32_t* address) {
@@ -759,7 +759,7 @@ int UDPSocketPosix::SetMulticastOptions() {
   if (multicast_interface_ != 0) {
     switch (addr_family_) {
       case AF_INET: {
-#if !defined(OS_MACOSX)
+#if !defined(OS_MACOSX) && !defined(OS_BSD)
         ip_mreqn mreq;
         mreq.imr_ifindex = multicast_interface_;
         mreq.imr_address.s_addr = htonl(INADDR_ANY);
@@ -834,7 +834,7 @@ int UDPSocketPosix::JoinGroup(const IPAddress& group_address) const {
       if (addr_family_ != AF_INET)
         return ERR_ADDRESS_INVALID;
 
-#if !defined(OS_MACOSX)
+#if !defined(OS_MACOSX) && !defined(OS_BSD)
       ip_mreqn mreq;
       mreq.imr_ifindex = multicast_interface_;
       mreq.imr_address.s_addr = htonl(INADDR_ANY);
diff --git net/tools/cert_verify_tool/verify_using_path_builder.cc net/tools/cert_verify_tool/verify_using_path_builder.cc
index 2426f61c1e59..9353adabbd13 100644
--- net/tools/cert_verify_tool/verify_using_path_builder.cc
+++ net/tools/cert_verify_tool/verify_using_path_builder.cc
@@ -28,7 +28,7 @@
 #include "net/url_request/url_request_context_builder.h"
 #include "net/url_request/url_request_context_getter.h"
 
-#if defined(OS_LINUX)
+#if defined(OS_LINUX) || defined(OS_BSD)
 #include "net/proxy/proxy_config.h"
 #include "net/proxy/proxy_config_service_fixed.h"
 #endif
@@ -145,7 +145,7 @@ void SetUpOnNetworkThread(std::unique_ptr<net::URLRequestContext>* context,
   // (similar to VERIFY_CERT_IO_ENABLED flag for CertVerifyProc).
   net::URLRequestContextBuilder url_request_context_builder;
   url_request_context_builder.set_user_agent(GetUserAgent());
-#if defined(OS_LINUX)
+#if defined(OS_LINUX) || defined(OS_BSD)
   // On Linux, use a fixed ProxyConfigService, since the default one
   // depends on glib.
   //
diff --git net/tools/get_server_time/get_server_time.cc net/tools/get_server_time/get_server_time.cc
index 75ca214f8a7a..3f67625fafdf 100644
--- net/tools/get_server_time/get_server_time.cc
+++ net/tools/get_server_time/get_server_time.cc
@@ -46,7 +46,7 @@
 
 #if defined(OS_MACOSX)
 #include "base/mac/scoped_nsautorelease_pool.h"
-#elif defined(OS_LINUX)
+#elif defined(OS_LINUX) || defined(OS_BSD)
 #include "net/proxy/proxy_config.h"
 #include "net/proxy/proxy_config_service_fixed.h"
 #endif
@@ -142,7 +142,7 @@ class PrintingLogObserver : public net::NetLog::ThreadSafeObserver {
 std::unique_ptr<net::URLRequestContext> BuildURLRequestContext(
     net::NetLog* net_log) {
   net::URLRequestContextBuilder builder;
-#if defined(OS_LINUX)
+#if defined(OS_LINUX) || defined(OS_BSD)
   // On Linux, use a fixed ProxyConfigService, since the default one
   // depends on glib.
   //
diff --git net/url_request/url_request_context_builder.cc net/url_request/url_request_context_builder.cc
index 3309974be90a..0fb6e307252c 100644
--- net/url_request/url_request_context_builder.cc
+++ net/url_request/url_request_context_builder.cc
@@ -435,7 +435,7 @@ std::unique_ptr<URLRequestContext> URLRequestContextBuilder::Build() {
   }
 
   if (!proxy_service_) {
-#if !defined(OS_LINUX) && !defined(OS_ANDROID)
+#if !defined(OS_LINUX) && !defined(OS_ANDROID) && !defined(OS_BSD)
     // TODO(willchan): Switch to using this code when
     // ProxyService::CreateSystemProxyConfigService()'s signature doesn't suck.
     if (!proxy_config_service_) {
@@ -443,7 +443,7 @@ std::unique_ptr<URLRequestContext> URLRequestContextBuilder::Build() {
           base::ThreadTaskRunnerHandle::Get().get(),
           context->GetFileTaskRunner());
     }
-#endif  // !defined(OS_LINUX) && !defined(OS_ANDROID)
+#endif  // !defined(OS_LINUX) && !defined(OS_ANDROID) && !defined(OS_BSD)
     proxy_service_ =
         CreateProxyService(std::move(proxy_config_service_), context.get(),
                            context->host_resolver(),
diff --git ppapi/shared_impl/private/net_address_private_impl.cc ppapi/shared_impl/private/net_address_private_impl.cc
index 750a5f90262b..202678b3f872 100644
--- ppapi/shared_impl/private/net_address_private_impl.cc
+++ ppapi/shared_impl/private/net_address_private_impl.cc
@@ -29,6 +29,10 @@
 #include <sys/types.h>
 #endif
 
+#if defined(OS_DRAGONFLY)
+#include <netinet/in.h>
+#endif
+
 #if defined(OS_MACOSX)
 // This is a bit evil, but it's standard operating procedure for |s6_addr|....
 #define s6_addr16 __u6_addr.__u6_addr16
diff --git printing/BUILD.gn printing/BUILD.gn
index eb1fb5abfa74..6dc53ef4d141 100644
--- printing/BUILD.gn
+++ printing/BUILD.gn
@@ -143,7 +143,7 @@ component("printing") {
   if (use_cups) {
     configs += [ ":cups" ]
 
-    if (is_linux) {
+    if (is_linux || is_bsd) {
       # rebase_path does not accept an empty string
       if (use_sysroot) {
         cups_sysroot = rebase_path(sysroot)
@@ -222,7 +222,7 @@ component("printing") {
       "printing_context_no_system_dialog.cc",
       "printing_context_no_system_dialog.h",
     ]
-  } else if (is_linux) {  # Non-ChromeOS Linux.
+  } else if (is_linux || is_bsd) {  # Non-ChromeOS Linux or BSD.
     sources += [
       "printed_document_linux.cc",
       "printing_context_linux.cc",
diff --git sdch/BUILD.gn sdch/BUILD.gn
index 1cab0b3568a5..4d1893fadf66 100644
--- sdch/BUILD.gn
+++ sdch/BUILD.gn
@@ -11,7 +11,7 @@ config("sdch_config") {
 # from a config and can't be on the target directly.
 config("sdch_warnings") {
   cflags = []
-  if (is_linux) {
+  if (is_linux || is_bsd) {
     # TODO(mostynb): remove this if open-vcdiff is ever updated for c++11:
     cflags += [ "-Wno-deprecated-declarations" ]
   }
@@ -59,7 +59,7 @@ static_library("sdch") {
     "//third_party/zlib",
   ]
 
-  if (is_linux || is_android) {
+  if (is_linux || is_bsd || is_android) {
     include_dirs = [ "linux" ]
   } else if (is_ios) {
     include_dirs = [ "ios" ]
diff --git services/catalog/public/cpp/manifest_parsing_util.cc services/catalog/public/cpp/manifest_parsing_util.cc
index 75a2e35534d0..8ef786aa32a4 100644
--- services/catalog/public/cpp/manifest_parsing_util.cc
+++ services/catalog/public/cpp/manifest_parsing_util.cc
@@ -14,6 +14,8 @@ namespace {
 bool IsValidPlatformName(const std::string& name) {
   return name == Store::kRequiredFilesKey_PlatformValue_Windows ||
          name == Store::kRequiredFilesKey_PlatformValue_Linux ||
+         name == Store::kRequiredFilesKey_PlatformValue_FreeBSD ||
+         name == Store::kRequiredFilesKey_PlatformValue_DragonFly ||
          name == Store::kRequiredFilesKey_PlatformValue_MacOSX ||
          name == Store::kRequiredFilesKey_PlatformValue_Android;
 }
@@ -23,6 +25,10 @@ bool IsCurrentPlatform(const std::string& name) {
   return name == Store::kRequiredFilesKey_PlatformValue_Windows;
 #elif defined(OS_LINUX)
   return name == Store::kRequiredFilesKey_PlatformValue_Linux;
+#elif defined(OS_FREEBSD)
+  return name == Store::kRequiredFilesKey_PlatformValue_FreeBSD;
+#elif defined(OS_DRAGONFLY)
+  return name == Store::kRequiredFilesKey_PlatformValue_DragonFly;
 #elif defined(OS_MACOSX)
   return name == Store::kRequiredFilesKey_PlatformValue_MacOSX;
 #elif defined(OS_ANDROID)
diff --git services/catalog/store.cc services/catalog/store.cc
index 7095312caff9..d554f3867317 100644
--- services/catalog/store.cc
+++ services/catalog/store.cc
@@ -29,6 +29,10 @@ const char Store::kRequiredFilesKey_PlatformValue_Windows[] = "windows";
 // static
 const char Store::kRequiredFilesKey_PlatformValue_Linux[] = "linux";
 // static
+const char Store::kRequiredFilesKey_PlatformValue_FreeBSD[] = "freebsd";
+// static
+const char Store::kRequiredFilesKey_PlatformValue_DragonFly[] = "dragonfly";
+// static
 const char Store::kRequiredFilesKey_PlatformValue_MacOSX[] = "macosx";
 // static
 const char Store::kRequiredFilesKey_PlatformValue_Android[] = "android";
diff --git services/catalog/store.h services/catalog/store.h
index 752c38d8d76e..c5d41402817e 100644
--- services/catalog/store.h
+++ services/catalog/store.h
@@ -31,6 +31,8 @@ class Store {
   static const char kRequiredFilesKey_PlatformKey[];
   static const char kRequiredFilesKey_PlatformValue_Windows[];
   static const char kRequiredFilesKey_PlatformValue_Linux[];
+  static const char kRequiredFilesKey_PlatformValue_FreeBSD[];
+  static const char kRequiredFilesKey_PlatformValue_DragonFly[];
   static const char kRequiredFilesKey_PlatformValue_MacOSX[];
   static const char kRequiredFilesKey_PlatformValue_Android[];
 };
diff --git services/device/battery/BUILD.gn services/device/battery/BUILD.gn
index 4f8a2a980f39..23c887466c37 100644
--- services/device/battery/BUILD.gn
+++ services/device/battery/BUILD.gn
@@ -51,7 +51,7 @@ if (!is_android) {
       ]
     }
 
-    if (is_linux && !is_chromeos) {
+    if ((is_linux && !is_chromeos) || is_bsd) {
       if (use_dbus) {
         configs += [ "//build/config/linux/dbus" ]
         deps += [ "//dbus" ]
diff --git services/device/time_zone_monitor/time_zone_monitor.cc services/device/time_zone_monitor/time_zone_monitor.cc
index 52e2a52eb28e..a638787b286e 100644
--- services/device/time_zone_monitor/time_zone_monitor.cc
+++ services/device/time_zone_monitor/time_zone_monitor.cc
@@ -31,7 +31,7 @@ void TimeZoneMonitor::NotifyClients() {
   std::unique_ptr<icu::TimeZone> new_zone(icu::TimeZone::createDefault());
 #else
   icu::TimeZone* new_zone = icu::TimeZone::detectHostTimeZone();
-#if defined(OS_LINUX)
+#if defined(OS_LINUX) || defined(OS_BSD)
   // We get here multiple times on Linux per a single tz change, but
   // want to update the ICU default zone and notify renderer only once.
   std::unique_ptr<icu::TimeZone> current_zone(icu::TimeZone::createDefault());
diff --git services/device/time_zone_monitor/time_zone_monitor_linux.cc services/device/time_zone_monitor/time_zone_monitor_linux.cc
index fe580fe486a1..39b509af8ec5 100644
--- services/device/time_zone_monitor/time_zone_monitor_linux.cc
+++ services/device/time_zone_monitor/time_zone_monitor_linux.cc
@@ -59,6 +59,9 @@ class TimeZoneMonitorLinuxImpl
         main_task_runner_(base::ThreadTaskRunnerHandle::Get()),
         file_task_runner_(file_task_runner),
         owner_(owner) {
+    }
+
+  void StartWatching() {
     DCHECK(main_task_runner_->RunsTasksInCurrentSequence());
     file_task_runner_->PostTask(
         FROM_HERE,
@@ -150,6 +153,9 @@ TimeZoneMonitorLinux::TimeZoneMonitorLinux(
   // changed.
   if (!getenv("TZ")) {
     impl_ = new TimeZoneMonitorLinuxImpl(this, file_task_runner);
+    if (impl_.get()) {
+      impl_->StartWatching();
+    }
   }
 }
 
diff --git services/service_manager/embedder/BUILD.gn services/service_manager/embedder/BUILD.gn
index 54bbbf3421d6..59b4c5fb9d23 100644
--- services/service_manager/embedder/BUILD.gn
+++ services/service_manager/embedder/BUILD.gn
@@ -29,6 +29,13 @@ component("embedder") {
     libs = [ "Foundation.framework" ]
   }
 
+  if (is_bsd) {
+    sources -= [
+      "set_process_title_linux.cc",
+      "set_process_title_linux.h",
+    ]
+  }
+
   deps = [
     "//base:base_static",
     "//base/allocator:features",
diff --git services/service_manager/embedder/main.cc services/service_manager/embedder/main.cc
index 8667ae76348b..26c2c523f56b 100644
--- services/service_manager/embedder/main.cc
+++ services/service_manager/embedder/main.cc
@@ -136,6 +136,7 @@ void SetupSignalHandlers() {
   CHECK_NE(SIG_ERR, signal(SIGPIPE, SIG_IGN));
 }
 
+#if !defined(OS_DRAGONFLY)
 void PopulateFDsFromCommandLine() {
   const std::string& shared_file_param =
       base::CommandLine::ForCurrentProcess()->GetSwitchValueASCII(
@@ -156,6 +157,7 @@ void PopulateFDsFromCommandLine() {
     base::FileDescriptorStore::GetInstance().Set(key, std::move(fd), region);
   }
 }
+#endif
 
 #endif  // defined(OS_POSIX) && !defined(OS_ANDROID)
 
@@ -371,11 +373,13 @@ int Main(const MainParams& params) {
 
   base::CommandLine::Init(argc, argv);
 
-#if defined(OS_POSIX)
+#if defined(OS_POSIX) && !defined(OS_DRAGONFLY)
   PopulateFDsFromCommandLine();
 #endif
 
+#if !defined(OS_DRAGONFLY)
   base::EnableTerminationOnHeapCorruption();
+#endif
 
   SetProcessTitleFromCommandLine(argv);
 #endif  // !defined(OS_ANDROID)
diff --git skia/BUILD.gn skia/BUILD.gn
index 07ff372a3b0c..4d1747be85b0 100644
--- skia/BUILD.gn
+++ skia/BUILD.gn
@@ -141,7 +141,7 @@ config("skia_library_config") {
   }
 
   # Settings for text blitting, chosen to approximate the system browser.
-  if (is_linux) {
+  if (is_linux || is_bsd) {
     defines += [
       "SK_GAMMA_EXPONENT=1.2",
       "SK_GAMMA_CONTRAST=0.2",
@@ -374,7 +374,7 @@ component("skia") {
     set_sources_assignment_filter(sources_assignment_filter)
   }
 
-  if (is_linux) {
+  if (is_linux || is_bsd) {
     sources += [
       "//third_party/skia/src/ports/SkFontConfigInterface.cpp",
       "//third_party/skia/src/ports/SkFontConfigInterface_direct.cpp",
@@ -383,7 +383,7 @@ component("skia") {
     ]
   }
 
-  if (is_linux || is_android) {
+  if (is_linux || is_android || is_bsd) {
     sources += [
       # Retain the files for the SkFontMgr_Android on linux to emulate android
       # fonts. See content/zygote/zygote_main_linux.cc
@@ -441,7 +441,7 @@ component("skia") {
     deps -= [ "//third_party:jpeg" ]
   }
 
-  if (is_linux) {
+  if (is_linux || is_bsd) {
     if (use_pango) {
       configs += [
         # libpng_config will be included automatically from deps.  We do this
@@ -715,7 +715,7 @@ test("skia_unittests") {
     ]
   }
 
-  if (is_linux) {
+  if (is_linux || is_bsd) {
     if (use_pango) {
       configs += [ "//build/config/linux/pangocairo" ]
     }
diff --git skia/ext/platform_canvas.h skia/ext/platform_canvas.h
index 5cf00d2f70fa..be25b4dff763 100644
--- skia/ext/platform_canvas.h
+++ skia/ext/platform_canvas.h
@@ -57,7 +57,8 @@ SK_API std::unique_ptr<SkCanvas> CreatePlatformCanvasWithSharedSection(
 SK_API HDC GetNativeDrawingContext(SkCanvas* canvas);
 
 #elif defined(__linux__) || defined(__FreeBSD__) || defined(__OpenBSD__) || \
-      defined(__sun) || defined(ANDROID) || defined(__APPLE__)
+      defined(__sun) || defined(ANDROID) || defined(__APPLE__) || \
+      defined(__DragonFly__)
   // Construct a canvas from the given memory region. The memory is not cleared
   // first. @data must be, at least, @height * StrideForWidth(@width) bytes.
 SK_API std::unique_ptr<SkCanvas> CreatePlatformCanvasWithPixels(
diff --git storage/browser/quota/quota_settings.cc storage/browser/quota/quota_settings.cc
index d428822d61c3..6c3fa32dddd5 100644
--- storage/browser/quota/quota_settings.cc
+++ storage/browser/quota/quota_settings.cc
@@ -78,7 +78,8 @@ base::Optional<storage::QuotaSettings> CalculateNominalDynamicSettings(
       1000 * kMBytes;
 #elif defined(OS_CHROMEOS)
       1000 * kMBytes;
-#elif defined(OS_WIN) || defined(OS_LINUX) || defined(OS_MACOSX)
+#elif defined(OS_WIN) || defined(OS_LINUX) || defined(OS_MACOSX) || \
+              defined(OS_BSD)
       10000 * kMBytes;
 #else
 #error "Port: Need to define an OS accomodation value for unknown OS."
diff --git third_party/WebKit/Source/bindings/core/v8/V8ScriptRunner.cpp third_party/WebKit/Source/bindings/core/v8/V8ScriptRunner.cpp
index c735b9132165..f4e2ae0b38fc 100644
--- third_party/WebKit/Source/bindings/core/v8/V8ScriptRunner.cpp
+++ third_party/WebKit/Source/bindings/core/v8/V8ScriptRunner.cpp
@@ -48,7 +48,7 @@
 
 #if OS(WIN)
 #include <malloc.h>
-#else
+#elif !OS(DRAGONFLY)
 #include <alloca.h>
 #endif
 
diff --git third_party/WebKit/Source/core/editing/EditingBehavior.cpp third_party/WebKit/Source/core/editing/EditingBehavior.cpp
index f9febd11323d..9b5caa4e0494 100644
--- third_party/WebKit/Source/core/editing/EditingBehavior.cpp
+++ third_party/WebKit/Source/core/editing/EditingBehavior.cpp
@@ -267,7 +267,7 @@ bool EditingBehavior::ShouldInsertCharacter(const KeyboardEvent& event) const {
   // unexpected behaviour
   if (ch < ' ')
     return false;
-#if OS(LINUX)
+#if OS(LINUX) || OS(BSD)
   // According to XKB map no keyboard combinations with ctrl key are mapped to
   // printable characters, however we need the filter as the DomKey/text could
   // contain printable characters.
diff --git third_party/WebKit/Source/core/layout/BUILD.gn third_party/WebKit/Source/core/layout/BUILD.gn
index 7f8d8e62d544..bd76a532b76e 100644
--- third_party/WebKit/Source/core/layout/BUILD.gn
+++ third_party/WebKit/Source/core/layout/BUILD.gn
@@ -465,7 +465,7 @@ blink_core_sources("layout") {
     sources += [ "LayoutThemeFontProviderDefault.cpp" ]
   }
 
-  if (is_linux) {
+  if (is_linux || is_bsd) {
     sources += [
       "LayoutThemeLinux.cpp",
       "LayoutThemeLinux.h",
diff --git third_party/WebKit/Source/platform/fonts/FontCache.cpp third_party/WebKit/Source/platform/fonts/FontCache.cpp
index 6153149d2623..e852b6d43508 100644
--- third_party/WebKit/Source/platform/fonts/FontCache.cpp
+++ third_party/WebKit/Source/platform/fonts/FontCache.cpp
@@ -63,9 +63,9 @@ using namespace WTF;
 
 namespace blink {
 
-#if !OS(WIN) && !OS(LINUX)
+#if !OS(WIN) && !OS(LINUX) && !OS(BSD)
 FontCache::FontCache() : purge_prevent_count_(0), font_manager_(nullptr) {}
-#endif  // !OS(WIN) && !OS(LINUX)
+#endif  // !OS(WIN) && !OS(LINUX) && !OS(BSD)
 
 typedef HashMap<unsigned,
                 std::unique_ptr<FontPlatformData>,
@@ -104,7 +104,7 @@ FontCache* FontCache::GetFontCache() {
 FontPlatformData* FontCache::SystemFontPlatformData(
     const FontDescription& font_description) {
   const AtomicString& family = FontCache::SystemFontFamily();
-#if OS(LINUX)
+#if OS(LINUX) || OS(BSD)
   if (family.IsEmpty() || family == FontFamilyNames::system_ui)
     return nullptr;
 #else
diff --git third_party/WebKit/Source/platform/fonts/FontCache.h third_party/WebKit/Source/platform/fonts/FontCache.h
index a10b9bd34d68..d75e2a7bd118 100644
--- third_party/WebKit/Source/platform/fonts/FontCache.h
+++ third_party/WebKit/Source/platform/fonts/FontCache.h
@@ -144,7 +144,7 @@ class PLATFORM_EXPORT FontCache {
 #else
   static const AtomicString& LegacySystemFontFamily();
 #endif
-#if OS(LINUX) || OS(ANDROID)
+#if OS(LINUX) || OS(ANDROID) || OS(BSD)
   static void SetSystemFontFamily(const AtomicString&);
 #endif
 
@@ -259,7 +259,7 @@ class PLATFORM_EXPORT FontCache {
                                    const FontFaceCreationParams&,
                                    CString& name);
 
-#if OS(ANDROID) || OS(LINUX)
+#if OS(ANDROID) || OS(LINUX) || OS(BSD)
   static AtomicString GetFamilyNameForCharacter(SkFontMgr*,
                                                 UChar32,
                                                 const FontDescription&,
diff --git third_party/WebKit/Source/platform/fonts/FontPlatformData.cpp third_party/WebKit/Source/platform/fonts/FontPlatformData.cpp
index a80015798a09..d4a2dfc9a48b 100644
--- third_party/WebKit/Source/platform/fonts/FontPlatformData.cpp
+++ third_party/WebKit/Source/platform/fonts/FontPlatformData.cpp
@@ -91,7 +91,7 @@ FontPlatformData::FontPlatformData(const FontPlatformData& source)
       synthetic_bold_(source.synthetic_bold_),
       synthetic_italic_(source.synthetic_italic_),
       orientation_(source.orientation_),
-#if OS(LINUX) || OS(ANDROID)
+#if OS(LINUX) || OS(ANDROID) || OS(BSD)
       style_(source.style_),
 #endif
       harf_buzz_face_(nullptr),
@@ -112,7 +112,7 @@ FontPlatformData::FontPlatformData(const FontPlatformData& src, float text_size)
       synthetic_bold_(src.synthetic_bold_),
       synthetic_italic_(src.synthetic_italic_),
       orientation_(src.orientation_),
-#if OS(LINUX) || OS(ANDROID)
+#if OS(LINUX) || OS(ANDROID) || OS(BSD)
       style_(FontRenderStyle::QuerySystem(family_,
                                           text_size_,
                                           typeface_->fontStyle())),
@@ -143,7 +143,7 @@ FontPlatformData::FontPlatformData(sk_sp<SkTypeface> tf,
       synthetic_bold_(synthetic_bold),
       synthetic_italic_(synthetic_italic),
       orientation_(orientation),
-#if OS(LINUX) || OS(ANDROID)
+#if OS(LINUX) || OS(ANDROID) || OS(BSD)
       style_(FontRenderStyle::QuerySystem(family_,
                                           text_size_,
                                           typeface_->fontStyle())),
@@ -188,7 +188,7 @@ const FontPlatformData& FontPlatformData::operator=(
   synthetic_italic_ = other.synthetic_italic_;
   harf_buzz_face_ = nullptr;
   orientation_ = other.orientation_;
-#if OS(LINUX) || OS(ANDROID)
+#if OS(LINUX) || OS(ANDROID) || OS(BSD)
   style_ = other.style_;
 #endif
 
@@ -212,7 +212,7 @@ bool FontPlatformData::operator==(const FontPlatformData& a) const {
          is_hash_table_deleted_value_ == a.is_hash_table_deleted_value_ &&
          synthetic_bold_ == a.synthetic_bold_ &&
          synthetic_italic_ == a.synthetic_italic_
-#if OS(LINUX) || OS(ANDROID)
+#if OS(LINUX) || OS(ANDROID) || OS(BSD)
          && style_ == a.style_
 #endif
          && orientation_ == a.orientation_;
diff --git third_party/WebKit/Source/platform/fonts/FontPlatformData.h third_party/WebKit/Source/platform/fonts/FontPlatformData.h
index d159487ca4f8..3b311ef4fa7a 100644
--- third_party/WebKit/Source/platform/fonts/FontPlatformData.h
+++ third_party/WebKit/Source/platform/fonts/FontPlatformData.h
@@ -47,9 +47,9 @@
 #include "platform/wtf/text/StringImpl.h"
 #include "third_party/skia/include/core/SkRefCnt.h"
 
-#if OS(LINUX) || OS(ANDROID)
+#if OS(LINUX) || OS(ANDROID) || OS(BSD)
 #include "platform/fonts/linux/FontRenderStyle.h"
-#endif  // OS(LINUX) || OS(ANDROID)
+#endif  // OS(LINUX) || OS(ANDROID) || OS(BSD)
 
 #if OS(MACOSX)
 OBJC_CLASS NSFont;
@@ -151,7 +151,7 @@ class PLATFORM_EXPORT FontPlatformData {
   PassRefPtr<OpenTypeVerticalData> VerticalData() const;
   PassRefPtr<SharedBuffer> OpenTypeTable(SkFontTableTag) const;
 
-#if OS(LINUX) || OS(ANDROID)
+#if OS(LINUX) || OS(ANDROID) || OS(BSD)
   // The returned styles are all actual styles without
   // FontRenderStyle::NoPreference.
   const FontRenderStyle& GetFontRenderStyle() const { return style_; }
@@ -181,7 +181,7 @@ class PLATFORM_EXPORT FontPlatformData {
   FontOrientation orientation_;
 
  private:
-#if OS(LINUX) || OS(ANDROID)
+#if OS(LINUX) || OS(ANDROID) || OS(BSD)
   FontRenderStyle style_;
 #endif
 
diff --git third_party/WebKit/Source/platform/fonts/SimpleFontData.cpp third_party/WebKit/Source/platform/fonts/SimpleFontData.cpp
index d422288b92e5..53512b68e1d7 100644
--- third_party/WebKit/Source/platform/fonts/SimpleFontData.cpp
+++ third_party/WebKit/Source/platform/fonts/SimpleFontData.cpp
@@ -51,7 +51,7 @@ namespace blink {
 const float kSmallCapsFontSizeMultiplier = 0.7f;
 const float kEmphasisMarkFontSizeMultiplier = 0.5f;
 
-#if OS(LINUX) || OS(ANDROID)
+#if OS(LINUX) || OS(ANDROID) || OS(BSD)
 // This is the largest VDMX table which we'll try to load and parse.
 static const size_t kMaxVDMXTableSize = 1024 * 1024;  // 1 MB
 #endif
@@ -106,7 +106,7 @@ void SimpleFontData::PlatformInit(bool subpixel_ascent_descent) {
   int vdmx_ascent = 0, vdmx_descent = 0;
   bool is_vdmx_valid = false;
 
-#if OS(LINUX) || OS(ANDROID)
+#if OS(LINUX) || OS(ANDROID) || OS(BSD)
   // Manually digging up VDMX metrics is only applicable when bytecode hinting
   // using FreeType.  With DirectWrite or CoreText, no bytecode hinting is ever
   // done.  This code should be pushed into FreeType (hinted font metrics).
@@ -155,7 +155,7 @@ void SimpleFontData::PlatformInit(bool subpixel_ascent_descent) {
       visual_overflow_inflation_for_ascent_ = 1;
     if (descent < metrics.fDescent) {
       visual_overflow_inflation_for_descent_ = 1;
-#if OS(LINUX) || OS(ANDROID)
+#if OS(LINUX) || OS(ANDROID) || OS(BSD)
       // When subpixel positioning is enabled, if the descent is rounded down,
       // the descent part of the glyph may be truncated when displayed in a
       // 'overflow: hidden' container.  To avoid that, borrow 1 unit from the
diff --git third_party/WebKit/Source/platform/fonts/skia/FontCacheSkia.cpp third_party/WebKit/Source/platform/fonts/skia/FontCacheSkia.cpp
index c9ea6884be37..faa8b4735ff6 100644
--- third_party/WebKit/Source/platform/fonts/skia/FontCacheSkia.cpp
+++ third_party/WebKit/Source/platform/fonts/skia/FontCacheSkia.cpp
@@ -68,7 +68,7 @@ AtomicString ToAtomicString(const SkString& str) {
   return AtomicString::FromUTF8(str.c_str(), str.size());
 }
 
-#if OS(ANDROID) || OS(LINUX)
+#if OS(ANDROID) || OS(LINUX) || OS(BSD)
 // Android special locale for retrieving the color emoji font
 // based on the proposed changes in UTR #51 for introducing
 // an Emoji script code:
@@ -249,7 +249,7 @@ sk_sp<SkTypeface> FontCache::CreateTypeface(
   }
 #endif
 
-#if OS(LINUX) || OS(WIN)
+#if OS(LINUX) || OS(WIN) || OS(BSD)
   // On linux if the fontManager has been overridden then we should be calling
   // the embedder provided font Manager rather than calling
   // SkTypeface::CreateFromName which may redirect the call to the default font
diff --git third_party/WebKit/Source/platform/wtf/Assertions.cpp third_party/WebKit/Source/platform/wtf/Assertions.cpp
index 58785d66aed2..4ddaaf828667 100644
--- third_party/WebKit/Source/platform/wtf/Assertions.cpp
+++ third_party/WebKit/Source/platform/wtf/Assertions.cpp
@@ -60,7 +60,8 @@
 #include <windows.h>
 #endif
 
-#if OS(MACOSX) || (OS(LINUX) && !defined(__UCLIBC__))
+#if OS(MACOSX) || (OS(LINUX) && !defined(__UCLIBC__)) || OS(DRAGONFLY) || \
+    OS(FREEBSD)
 #include <cxxabi.h>
 #include <dlfcn.h>
 #include <execinfo.h>
diff --git third_party/WebKit/Source/platform/wtf/Atomics.h third_party/WebKit/Source/platform/wtf/Atomics.h
index e7e4e23d6f84..429cd08ce924 100644
--- third_party/WebKit/Source/platform/wtf/Atomics.h
+++ third_party/WebKit/Source/platform/wtf/Atomics.h
@@ -176,7 +176,7 @@ ALWAYS_INLINE void AtomicSetOneToZero(int volatile* ptr) {
 #if defined(THREAD_SANITIZER)
 // The definitions below assume an LP64 data model. This is fine because
 // TSan is only supported on x86_64 Linux.
-#if CPU(64BIT) && OS(LINUX)
+#if CPU(64BIT) && (OS(LINUX) || OS(BSD))
 ALWAYS_INLINE void ReleaseStore(volatile int* ptr, int value) {
   __tsan_atomic32_store(ptr, value, __tsan_memory_order_release);
 }
diff --git third_party/WebKit/Source/platform/wtf/BUILD.gn third_party/WebKit/Source/platform/wtf/BUILD.gn
index 67fb512568a4..da612f33a33b 100644
--- third_party/WebKit/Source/platform/wtf/BUILD.gn
+++ third_party/WebKit/Source/platform/wtf/BUILD.gn
@@ -295,7 +295,7 @@ component("wtf") {
   if (is_android) {
     libs = [ "log" ]
   }
-  if (is_linux) {
+  if (is_linux || is_bsd) {
     libs = [ "dl" ]
   }
 
diff --git third_party/WebKit/Source/platform/wtf/ContainerAnnotations.h third_party/WebKit/Source/platform/wtf/ContainerAnnotations.h
index d0b7459d9a66..03b52ed300bc 100644
--- third_party/WebKit/Source/platform/wtf/ContainerAnnotations.h
+++ third_party/WebKit/Source/platform/wtf/ContainerAnnotations.h
@@ -10,7 +10,7 @@
 
 // TODO(ochang): Remove the CPU(X86_64) condition to enable this for X86 once
 // the crashes there have been fixed: http://crbug.com/461406
-#if defined(ADDRESS_SANITIZER) && OS(LINUX) && CPU(X86_64)
+#if defined(ADDRESS_SANITIZER) && (OS(LINUX) || OS(BSD)) && CPU(X86_64)
 #define ANNOTATE_CONTIGUOUS_CONTAINER
 #define ANNOTATE_NEW_BUFFER(buffer, capacity, newSize)                       \
   if (buffer) {                                                              \
diff --git third_party/WebKit/Source/platform/wtf/StackUtil.cpp third_party/WebKit/Source/platform/wtf/StackUtil.cpp
index c36eb24e4e08..e5e534e7721b 100644
--- third_party/WebKit/Source/platform/wtf/StackUtil.cpp
+++ third_party/WebKit/Source/platform/wtf/StackUtil.cpp
@@ -14,6 +14,8 @@
 #include <winnt.h>
 #elif defined(__GLIBC__)
 extern "C" void* __libc_stack_end;  // NOLINT
+#elif OS(DRAGONFLY)
+#include <pthread_np.h>
 #endif
 
 namespace WTF {
@@ -28,14 +30,14 @@ size_t GetUnderestimatedStackSize() {
 // FIXME: On Mac OSX and Linux, this method cannot estimate stack size
 // correctly for the main thread.
 
-#if defined(__GLIBC__) || OS(ANDROID) || OS(FREEBSD)
+#if defined(__GLIBC__) || OS(ANDROID) || OS(FREEBSD) || OS(DRAGONFLY)
   // pthread_getattr_np() can fail if the thread is not invoked by
   // pthread_create() (e.g., the main thread of webkit_unit_tests).
   // If so, a conservative size estimate is returned.
 
   pthread_attr_t attr;
   int error;
-#if OS(FREEBSD)
+#if OS(FREEBSD) || OS(DRAGONFLY)
   pthread_attr_init(&attr);
   error = pthread_attr_get_np(pthread_self(), &attr);
 #else
@@ -49,7 +51,7 @@ size_t GetUnderestimatedStackSize() {
     pthread_attr_destroy(&attr);
     return size;
   }
-#if OS(FREEBSD)
+#if OS(FREEBSD) || OS(DRAGONFLY)
   pthread_attr_destroy(&attr);
 #endif
 
@@ -95,10 +97,10 @@ size_t GetUnderestimatedStackSize() {
 }
 
 void* GetStackStart() {
-#if defined(__GLIBC__) || OS(ANDROID) || OS(FREEBSD)
+#if defined(__GLIBC__) || OS(ANDROID) || OS(FREEBSD) || OS(DRAGONFLY)
   pthread_attr_t attr;
   int error;
-#if OS(FREEBSD)
+#if OS(FREEBSD) || OS(DRAGONFLY)
   pthread_attr_init(&attr);
   error = pthread_attr_get_np(pthread_self(), &attr);
 #else
@@ -112,7 +114,7 @@ void* GetStackStart() {
     pthread_attr_destroy(&attr);
     return reinterpret_cast<uint8_t*>(base) + size;
   }
-#if OS(FREEBSD)
+#if OS(FREEBSD) || OS(DRAGONFLY)
   pthread_attr_destroy(&attr);
 #endif
 #if defined(__GLIBC__)
diff --git third_party/WebKit/Source/platform/wtf/ThreadingPthreads.cpp third_party/WebKit/Source/platform/wtf/ThreadingPthreads.cpp
index e813f3c999fd..cd3af4b8fc4f 100644
--- third_party/WebKit/Source/platform/wtf/ThreadingPthreads.cpp
+++ third_party/WebKit/Source/platform/wtf/ThreadingPthreads.cpp
@@ -57,6 +57,10 @@
 #include <unistd.h>
 #endif
 
+#if OS(DRAGONFLY)
+#include <pthread_np.h>
+#endif
+
 namespace WTF {
 
 namespace internal {
@@ -66,6 +70,8 @@ ThreadIdentifier CurrentThreadSyscall() {
   return pthread_mach_thread_np(pthread_self());
 #elif OS(LINUX)
   return syscall(__NR_gettid);
+#elif OS(FREEBSD) || defined(OS_DRAGONFLY)
+  return pthread_getthreadid_np();
 #elif OS(ANDROID)
   return gettid();
 #else
diff --git third_party/WebKit/Source/web/PopupMenuImpl.cpp third_party/WebKit/Source/web/PopupMenuImpl.cpp
index 6e837e7e2f7b..50c78f1a184e 100644
--- third_party/WebKit/Source/web/PopupMenuImpl.cpp
+++ third_party/WebKit/Source/web/PopupMenuImpl.cpp
@@ -156,7 +156,7 @@ class PopupMenuImpl::ItemIterationContext {
         is_in_group_(false),
         buffer_(buffer) {
     DCHECK(buffer_);
-#if OS(LINUX)
+#if OS(LINUX) || OS(BSD)
     // On other platforms, the <option> background color is the same as the
     // <select> background color. On Linux, that makes the <option>
     // background color very dark, so by default, try to use a lighter
diff --git third_party/boringssl/BUILD.gn third_party/boringssl/BUILD.gn
index ef900bce6a8a..80615002f31e 100644
--- third_party/boringssl/BUILD.gn
+++ third_party/boringssl/BUILD.gn
@@ -83,7 +83,7 @@ if (is_win && !is_msan) {
     } else if (current_cpu == "x64") {
       if (is_mac) {
         sources += crypto_sources_mac_x86_64
-      } else if (is_linux || is_android) {
+      } else if (is_linux || is_android || is_bsd) {
         sources += crypto_sources_linux_x86_64
       } else {
         public_configs = [ ":no_asm_config" ]
@@ -91,14 +91,14 @@ if (is_win && !is_msan) {
     } else if (current_cpu == "x86") {
       if (is_mac) {
         sources += crypto_sources_mac_x86
-      } else if (is_linux || is_android) {
+      } else if (is_linux || is_android || is_bsd) {
         sources += crypto_sources_linux_x86
       } else {
         public_configs = [ ":no_asm_config" ]
       }
-    } else if (current_cpu == "arm" && (is_linux || is_android)) {
+    } else if (current_cpu == "arm" && (is_linux || is_android || is_bsd)) {
       sources += crypto_sources_linux_arm
-    } else if (current_cpu == "arm64" && (is_linux || is_android)) {
+    } else if (current_cpu == "arm64" && (is_linux || is_android || is_bsd)) {
       sources += crypto_sources_linux_aarch64
     } else {
       public_configs = [ ":no_asm_config" ]
diff --git third_party/libxml/BUILD.gn third_party/libxml/BUILD.gn
index 625a408fa86e..7b16cee5f404 100644
--- third_party/libxml/BUILD.gn
+++ third_party/libxml/BUILD.gn
@@ -4,7 +4,7 @@
 
 # Define an "os_include" variable that points at the OS-specific generated
 # headers.  These were generated by running the configure script offline.
-if (is_linux || is_android || is_nacl || is_fuchsia) {
+if (is_linux || is_android || is_nacl || is_fuchsia || is_bsd) {
   os_include = "linux"
 } else if (is_mac || is_ios) {
   os_include = "mac"
@@ -60,7 +60,7 @@ config("libxml_warnings") {
       # used with certain preprocessor defines set.
       "-Wno-unused-function",
     ]
-  } else if (is_linux) {
+  } else if (is_linux || is_bsd) {
     cflags = [
       # gcc spits out a bunch of warnings about passing too many arguments to
       # __xmlSimpleError.
@@ -222,7 +222,7 @@ static_library("libxml") {
     "//third_party/zlib",
   ]
 
-  if (is_mac || is_ios || is_android || is_fuchsia) {
+  if (is_mac || is_ios || is_android || is_fuchsia || is_bsd) {
     # http://www.xmlsoft.org/threads.html says that this is required when using
     # libxml from several threads, which can possibly happen in chrome. On
     # linux, this is picked up by transitivity from pkg-config output from
diff --git third_party/libxslt/BUILD.gn third_party/libxslt/BUILD.gn
index 87e25a4e6987..91aad7497536 100644
--- third_party/libxslt/BUILD.gn
+++ third_party/libxslt/BUILD.gn
@@ -82,7 +82,7 @@ static_library("libxslt") {
   public_configs = [ ":libxslt_config" ]
 
   cflags = []
-  if (is_linux || is_android) {
+  if (is_linux || is_android || is_bsd) {
     include_dirs = [ "linux" ]
   } else if (is_win) {
     include_dirs = [ "win32" ]
diff --git third_party/opus/BUILD.gn third_party/opus/BUILD.gn
index eea0689d6d65..a569f20930e0 100644
--- third_party/opus/BUILD.gn
+++ third_party/opus/BUILD.gn
@@ -14,7 +14,8 @@ use_opus_arm_optimization = current_cpu == "arm"
 # If OPUS Run Time CPU Detections (RTCD) shall be used.
 # Based on the conditions in celt/arm/armcpu.c:
 # defined(_MSC_VER) || defined(__linux__).
-use_opus_rtcd = current_cpu == "arm" && (is_win || is_android || is_linux)
+use_opus_rtcd = current_cpu == "arm" && (is_win || is_android || is_linux ||
+                                         is_bsd)
 
 config("opus_config") {
   include_dirs = [ "src/include" ]
diff --git third_party/sqlite/BUILD.gn third_party/sqlite/BUILD.gn
index a5e030f11d1b..fdcd3de3b2f9 100644
--- third_party/sqlite/BUILD.gn
+++ third_party/sqlite/BUILD.gn
@@ -22,7 +22,7 @@ if (!use_system_sqlite) {
       # sqlite3Fts3InitTok).
       cflags += [ "-Wno-unused-function" ]
     }
-    if (is_linux) {
+    if (is_linux || is_bsd) {
       cflags += [
         # SQLite doesn"t believe in compiler warnings,
         # preferring testing.
@@ -160,7 +160,7 @@ if (!use_system_sqlite) {
       ":sqlite_warnings",
     ]
 
-    if (is_linux) {
+    if (is_linux || is_bsd) {
       libs = [ "dl" ]
     } else if (is_mac || is_ios) {
       libs = [
@@ -197,7 +197,7 @@ if (!use_system_sqlite) {
     public_configs = [ ":sqlite_export" ]
   }
 
-  if (is_linux) {
+  if (is_linux || is_bsd) {
     executable("sqlite_shell") {
       # So shell.c can find the correct sqlite3.h.
       include_dirs = [ "amalgamation" ]
diff --git third_party/usrsctp/BUILD.gn third_party/usrsctp/BUILD.gn
index 7e65a69cef48..741ac070ea38 100644
--- third_party/usrsctp/BUILD.gn
+++ third_party/usrsctp/BUILD.gn
@@ -112,6 +112,11 @@ static_library("usrsctp") {
       "__Userspace_os_Linux",
       "_GNU_SOURCE",
     ]
+  } else if (current_os == "dragonfly") {
+    defines += [
+      "__Userspace_os_DragonFly",
+      "HAVE_SYS_QUEUE_H",
+    ]
   } else if (is_mac || is_ios) {
     defines += [
       "HAVE_SA_LEN",
diff --git third_party/yasm/BUILD.gn third_party/yasm/BUILD.gn
index fe4e587f4397..123fb1b76347 100644
--- third_party/yasm/BUILD.gn
+++ third_party/yasm/BUILD.gn
@@ -57,14 +57,27 @@ if (is_debug) {
 if (current_toolchain == host_toolchain) {
   # Various files referenced by multiple targets.
   yasm_gen_include_dir = "$target_gen_dir/include"
-  config_makefile = "source/config/$host_os/Makefile"
+  # HACK for All BSD derivatives use openbsd include directory
+  if (is_bsd) {
+    config_makefile = "source/config/openbsd/Makefile"
+  } else {
+    config_makefile = "source/config/$host_os/Makefile"
+  }
   version_file = "version.mac"
 
   import("//build/compiled_action.gni")
 
   config("yasm_config") {
-    include_dirs = [
-      "source/config/$host_os",
+    if (is_bsd) {
+      include_dirs = [
+        "source/config/openbsd",
+      ]
+    } else {
+      include_dirs = [
+        "source/config/$host_os",
+      ]
+    }
+    include_dirs += [
       "source/patched-yasm",
     ]
     defines = [ "HAVE_CONFIG_H" ]
@@ -235,7 +248,7 @@ if (current_toolchain == host_toolchain) {
         # reg3264type in x86expr.c is unused.
         "-Wno-unused-local-typedef",
       ]
-    } else if (is_linux) {
+    } else if (is_linux || is_bsd) {
       cflags = [
         # dosexe_objfmt_output ignores the return value of ftruncate.
         "-Wno-unused-result",
diff --git third_party/zlib/contrib/minizip/ioapi.c third_party/zlib/contrib/minizip/ioapi.c
index 7f5c191b2afd..27c67ea4dfe3 100644
--- third_party/zlib/contrib/minizip/ioapi.c
+++ third_party/zlib/contrib/minizip/ioapi.c
@@ -14,7 +14,8 @@
         #define _CRT_SECURE_NO_WARNINGS
 #endif
 
-#if defined(__APPLE__) || defined(IOAPI_NO_64)
+#if defined(__APPLE__) || defined(__DragonFly__) || defined(__FreeBSD__) || \
+    defined(IOAPI_NO_64)
 // In darwin and perhaps other BSD variants off_t is a 64 bit value, hence no need for specific 64 bit functions
 #define FOPEN_FUNC(filename, mode) fopen(filename, mode)
 #define FTELLO_FUNC(stream) ftello(stream)
diff --git tools/battor_agent/BUILD.gn tools/battor_agent/BUILD.gn
index 1a7dc67c7a5c..96a8241acf7e 100644
--- tools/battor_agent/BUILD.gn
+++ tools/battor_agent/BUILD.gn
@@ -5,7 +5,7 @@
 import("//testing/test.gni")
 
 # Works only on desktop platforms.
-assert(is_win || is_linux || is_mac)
+assert(is_win || is_linux || is_mac || is_bsd)
 
 executable("battor_agent") {
   sources = [
diff --git tools/clang/scripts/update.py tools/clang/scripts/update.py
index 01dbb177bfb0..5b14a381f834 100755
--- tools/clang/scripts/update.py
+++ tools/clang/scripts/update.py
@@ -871,6 +871,10 @@ def main():
                       default=sys.platform.startswith('linux'))
   args = parser.parse_args()
 
+  if sys.platform.startswith('dragonfly'):
+    print 'Skipping Clang update on DragonFly'
+    return 0
+
   if args.lto_gold_plugin and not args.bootstrap:
     print '--lto-gold-plugin requires --bootstrap'
     return 1
diff --git tools/gn/args.cc tools/gn/args.cc
index 800996bd267b..85d8576bd60c 100644
--- tools/gn/args.cc
+++ tools/gn/args.cc
@@ -304,6 +304,12 @@ void Args::SetSystemVarsLocked(Scope* dest) const {
   os = "netbsd";
 #elif defined(OS_AIX)
   os = "aix";
+#elif defined(OS_FREEBSD)
+  os = "freebsd";
+#elif defined(OS_OPENBSD)
+  os = "openbsd";
+#elif defined(OS_DRAGONFLY)
+  os = "dragonfly";
 #else
   #error Unknown OS type.
 #endif
diff --git tools/gn/bootstrap/bootstrap.py tools/gn/bootstrap/bootstrap.py
index 6f2f5b126451..f2d99ef2e586 100755
--- tools/gn/bootstrap/bootstrap.py
+++ tools/gn/bootstrap/bootstrap.py
@@ -31,9 +31,14 @@ SRC_ROOT = os.path.dirname(os.path.dirname(GN_ROOT))
 
 is_win = sys.platform.startswith('win')
 is_linux = sys.platform.startswith('linux')
+is_freebsd = sys.platform.startswith('freebsd')
+is_netbsd = sys.platform.startswith('netbsd')
+is_openbsd = sys.platform.startswith('openbsd')
+is_dragonfly = sys.platform.startswith('dragonfly')
+is_bsd = is_freebsd or is_netbsd or is_openbsd or is_dragonfly
 is_mac = sys.platform.startswith('darwin')
 is_aix = sys.platform.startswith('aix')
-is_posix = is_linux or is_mac or is_aix
+is_posix = is_linux or is_mac or is_aix or is_bsd
 
 def check_call(cmd, **kwargs):
   logging.debug('Running: %s', ' '.join(cmd))
@@ -167,7 +172,7 @@ def build_gn_with_ninja_manually(tempdir, options):
   mkdir_p(root_gen_dir)
 
   write_buildflag_header_manually(root_gen_dir, 'base/allocator/features.h',
-      {'USE_ALLOCATOR_SHIM': 'true' if is_linux else 'false'})
+      {'USE_ALLOCATOR_SHIM': 'true' if is_linux or is_bsd else 'false'})
 
   write_buildflag_header_manually(root_gen_dir, 'base/debug/debugging_flags.h',
       {
@@ -341,7 +346,11 @@ def write_gn_ninja(path, root_gen_dir, options):
         '-pipe',
         '-fno-exceptions'
     ])
-    cflags_cc.extend(['-std=c++11', '-Wno-c++11-narrowing'])
+    # DragonFly is using GCC, so -Wno-narrowing is the right flag there.
+    if is_dragonfly:
+      cflags_cc.extend(['-std=c++11', '-Wno-narrowing'])
+    else:
+      cflags_cc.extend(['-std=c++11', '-Wno-c++11-narrowing'])
     if is_aix:
      cflags.extend(['-maix64'])
      ldflags.extend([ '-maix64 -Wl,-bbigtoc' ])
@@ -487,6 +496,7 @@ def write_gn_ninja(path, root_gen_dir, options):
       'base/sys_info.cc',
       'base/task_runner.cc',
       'base/task_scheduler/delayed_task_manager.cc',
+      'base/task_scheduler/environment_config.cc',
       'base/task_scheduler/post_task.cc',
       'base/task_scheduler/priority_queue.cc',
       'base/task_scheduler/scheduler_lock_impl.cc',
@@ -714,6 +724,44 @@ def write_gn_ninja(path, root_gen_dir, options):
         '-framework', 'Security',
     ])
 
+  if is_bsd:
+    libs.extend(['-lrt', '-lexecinfo'])
+    ldflags.extend(['-pthread'])
+
+    static_libraries['xdg_user_dirs'] = {
+        'sources': [
+            'base/third_party/xdg_user_dirs/xdg_user_dir_lookup.cc',
+        ],
+        'tool': 'cxx',
+    }
+    static_libraries['base']['sources'].extend([
+        'base/allocator/allocator_shim.cc',
+        'base/allocator/allocator_shim_default_dispatch_to_glibc.cc',
+        'base/memory/shared_memory_handle_posix.cc',
+        'base/memory/shared_memory_posix.cc',
+        'base/memory/shared_memory_tracker.cc',
+        'base/nix/xdg_util.cc',
+        'base/process/internal_linux.cc',
+        'base/process/memory_linux.cc',
+        'base/process/process_info_bsd.cc',
+        'base/strings/sys_string_conversions_posix.cc',
+    ])
+    static_libraries['libevent']['sources'].extend([
+        'base/third_party/libevent/kqueue.c',
+    ])
+
+  if is_dragonfly:
+    static_libraries['libevent']['include_dirs'].extend([
+        os.path.join(SRC_ROOT, 'base', 'third_party', 'libevent', 'freebsd')
+    ])
+    static_libraries['base']['sources'].extend([
+        'base/process/process_handle_freebsd.cc',
+        'base/process/process_iterator_freebsd.cc',
+        'base/process/process_metrics_freebsd.cc',
+        'base/sys_info_freebsd.cc',
+        'base/threading/platform_thread_dragonfly.cc',
+    ])
+
   if is_win:
     static_libraries['base']['sources'].extend([
         'base/base_paths_win.cc',
diff --git tools/grit/grit/format/policy_templates/policy_template_generator.py tools/grit/grit/format/policy_templates/policy_template_generator.py
index a0bacaf88519..991d358fb3af 100755
--- tools/grit/grit/format/policy_templates/policy_template_generator.py
+++ tools/grit/grit/format/policy_templates/policy_template_generator.py
@@ -81,7 +81,7 @@ class PolicyTemplateGenerator:
         product, platform = product_platform_part.split('.')
         if platform == '*':
           # e.g.: 'chrome.*:8-10'
-          platforms = ['linux', 'mac', 'win']
+          platforms = ['linux', 'mac', 'win', 'dragonfly']
         else:
           # e.g.: 'chrome.win:-10'
           platforms = [platform]
diff --git tools/grit/grit/format/policy_templates/writers/doc_writer.py tools/grit/grit/format/policy_templates/writers/doc_writer.py
index d5eedda201de..da6c335370dc 100755
--- tools/grit/grit/format/policy_templates/writers/doc_writer.py
+++ tools/grit/grit/format/policy_templates/writers/doc_writer.py
@@ -250,6 +250,7 @@ class DocWriter(xml_formatted_writer.XMLFormattedWriter):
     if self.IsPolicySupportedOnPlatform(policy, 'win'):
       self._AddListExampleWindows(examples, policy)
     if (self.IsPolicySupportedOnPlatform(policy, 'android') or
+        self.IsPolicySupportedOnPlatform(policy, 'dragonfly') or
         self.IsPolicySupportedOnPlatform(policy, 'linux')):
       self._AddListExampleAndroidLinux(examples, policy)
     if self.IsPolicySupportedOnPlatform(policy, 'mac'):
@@ -357,6 +358,7 @@ class DocWriter(xml_formatted_writer.XMLFormattedWriter):
     if self.IsPolicySupportedOnPlatform(policy, 'win'):
       self._AddDictionaryExampleWindows(examples, policy)
     if (self.IsPolicySupportedOnPlatform(policy, 'android') or
+        self.IsPolicySupportedOnPlatform(policy, 'dragonfly') or
         self.IsPolicySupportedOnPlatform(policy, 'linux')):
       self._AddDictionaryExampleAndroidLinux(examples, policy)
     if self.IsPolicySupportedOnPlatform(policy, 'mac'):
@@ -384,7 +386,8 @@ class DocWriter(xml_formatted_writer.XMLFormattedWriter):
       if self.IsPolicySupportedOnPlatform(policy, 'win'):
         value = '0x00000001' if example_value else '0x00000000'
         pieces.append(value + ' (Windows)')
-      if self.IsPolicySupportedOnPlatform(policy, 'linux'):
+      if self.IsPolicySupportedOnPlatform(policy, 'linux') or
+         self.IsPolicySupportedOnPlatform(policy, 'dragonfly'):
         value = 'true' if example_value else 'false'
         pieces.append(value + ' (Linux)')
       if self.IsPolicySupportedOnPlatform(policy, 'android'):
@@ -400,7 +403,8 @@ class DocWriter(xml_formatted_writer.XMLFormattedWriter):
       pieces = []
       if self.IsPolicySupportedOnPlatform(policy, 'win'):
         pieces.append('0x%08x (Windows)' % example_value)
-      if self.IsPolicySupportedOnPlatform(policy, 'linux'):
+      if self.IsPolicySupportedOnPlatform(policy, 'linux') or
+         self.IsPolicySupportedOnPlatform(policy, 'dragonfly'):
         pieces.append('%d (Linux)' % example_value)
       if self.IsPolicySupportedOnPlatform(policy, 'android'):
         pieces.append('%d (Android)' % example_value)
@@ -513,6 +517,7 @@ class DocWriter(xml_formatted_writer.XMLFormattedWriter):
             key_name + '\\' + policy['name'],
             ['.monospace'])
       if (self.IsPolicySupportedOnPlatform(policy, 'linux') or
+          self.IsPolicySupportedOnPlatform(policy, 'dragonfly') or
           self.IsPolicySupportedOnPlatform(policy, 'mac')):
         self._AddPolicyAttribute(
             dl,
@@ -543,6 +548,7 @@ class DocWriter(xml_formatted_writer.XMLFormattedWriter):
       self._AddParagraphs(dd, policy['arc_support'])
     if (self.IsPolicySupportedOnPlatform(policy, 'win') or
         self.IsPolicySupportedOnPlatform(policy, 'linux') or
+        self.IsPolicySupportedOnPlatform(policy, 'dragonfly') or
         self.IsPolicySupportedOnPlatform(policy, 'android') or
         self.IsPolicySupportedOnPlatform(policy, 'mac')):
       # Don't add an example for ChromeOS-only policies.
@@ -686,6 +692,7 @@ class DocWriter(xml_formatted_writer.XMLFormattedWriter):
       'win': 'Windows',
       'mac': 'Mac',
       'linux': 'Linux',
+      'dragonfly': 'DragonFly',
       'chrome_os': self.config['os_name'],
       'android': 'Android',
       'ios': 'iOS',
diff --git tools/grit/grit/node/base.py tools/grit/grit/node/base.py
index a40794b159dd..b4a4cd51dbcd 100755
--- tools/grit/grit/node/base.py
+++ tools/grit/grit/node/base.py
@@ -472,12 +472,15 @@ class Node(object):
         value = target_platform == 'android'
       elif name == 'is_ios':
         value = target_platform == 'ios'
+      elif name == 'is_dragonfly':
+        value = 'dragonfly' in target_platform
       elif name == 'is_bsd':
-        value = 'bsd' in target_platform
+        value = ('dragonfly' in target_platform or
+                 'bsd' in target_platform)
       elif name == 'is_posix':
         value = (target_platform in ('darwin', 'linux2', 'linux3', 'sunos5',
                                      'android', 'ios')
-                 or 'bsd' in target_platform)
+                 or 'bsd' in target_platform or 'dragonfly' in target_platform)
 
       elif name == 'pp_ifdef':
         def pp_ifdef(symbol):
diff --git tools/grit/grit_rule.gni tools/grit/grit_rule.gni
index 3db7a6c6b210..27e669e6164f 100644
--- tools/grit/grit_rule.gni
+++ tools/grit/grit_rule.gni
@@ -211,7 +211,7 @@ if (current_toolchain != host_toolchain) {
       "ios",
     ]
   }
-  if (is_linux) {
+  if (is_linux || is_bsd) {
     grit_defines += [
       "-t",
       "linux2",
@@ -338,7 +338,8 @@ template("grit") {
   # This config sets up flags needed for enable_resource_whitelist_generation.
   grit_config = target_name + "_grit_config"
   config(grit_config) {
-    if ((is_linux || is_android) && enable_resource_whitelist_generation) {
+    if ((is_linux || is_android || is_bsd) &&
+        enable_resource_whitelist_generation) {
       cflags = [
         "-Wunknown-pragmas",
         "-Wno-error=unknown-pragmas",
diff --git tools/traffic_annotation/auditor/BUILD.gn tools/traffic_annotation/auditor/BUILD.gn
index bd3606fb2f83..7ddd130a1da6 100644
--- tools/traffic_annotation/auditor/BUILD.gn
+++ tools/traffic_annotation/auditor/BUILD.gn
@@ -5,7 +5,7 @@
 import("//third_party/protobuf/proto_library.gni")
 
 # Works only on desktop platforms.
-assert(is_win || is_linux || is_mac)
+assert(is_win || is_linux || is_mac || is_bsd)
 
 proto_library("chrome_settings_full_runtime") {
   proto_out_dir = "/tools/traffic_annotation"
diff --git tools/variations/fieldtrial_to_struct.py tools/variations/fieldtrial_to_struct.py
index 970b0b3e2411..077c06b051de 100755
--- tools/variations/fieldtrial_to_struct.py
+++ tools/variations/fieldtrial_to_struct.py
@@ -116,7 +116,8 @@ def main(arguments):
   if not opts.platform:
     parser.error('You must specify a --platform.')
 
-  supported_platforms = ['android', 'chromeos', 'ios', 'linux', 'mac', 'win']
+  supported_platforms = ['android', 'chromeos', 'ios', 'linux', 'mac', 'win',
+                         'freebsd', 'dragonfly']
   if opts.platform not in supported_platforms:
     parser.error('\'%s\' is an unknown platform. Supported platforms: %s' %
         (opts.platform, supported_platforms))
diff --git tools/variations/fieldtrial_util.py tools/variations/fieldtrial_util.py
index 74de88eba76b..0f125545eee7 100644
--- tools/variations/fieldtrial_util.py
+++ tools/variations/fieldtrial_util.py
@@ -105,7 +105,8 @@ def main():
     print 'Usage: fieldtrial_util.py [config_path] [platform]'
     exit(-1)
 
-  supported_platforms = ['android', 'chromeos', 'ios', 'linux', 'mac', 'win']
+  supported_platforms = ['android', 'chromeos', 'ios', 'linux', 'mac', 'win',
+                         'freebsd', 'dragonfly']
   if sys.argv[2] not in supported_platforms:
     print ('\'%s\' is an unknown platform. Supported platforms: %s' %
         (sys.argv[2], supported_platforms))
diff --git ui/aura/BUILD.gn ui/aura/BUILD.gn
index e36d8c6a4f16..407ef3783eec 100644
--- ui/aura/BUILD.gn
+++ ui/aura/BUILD.gn
@@ -382,7 +382,7 @@ test("aura_unittests") {
     "//ui/gl:test_support",
   ]
 
-  if (is_linux) {
+  if (is_linux || is_bsd) {
     deps += [ "//third_party/mesa" ]
   }
 
diff --git ui/base/BUILD.gn ui/base/BUILD.gn
index 05cb33baac5c..7f420e1fbbd4 100644
--- ui/base/BUILD.gn
+++ ui/base/BUILD.gn
@@ -365,7 +365,7 @@ component("base") {
     sources -= [ "touch/touch_device_util.cc" ]
   } else if (is_ios) {
     sources += [ "touch/touch_device_ios.cc" ]
-  } else if (is_linux) {
+  } else if (is_linux || is_bsd) {
     sources += [ "touch/touch_device_linux.cc" ]
   } else {
     # Empty implementation for all other cases.
@@ -476,11 +476,11 @@ component("base") {
     ]
   }
 
-  if (!use_aura || !is_linux) {
+  if (!use_aura || (!is_linux && !is_bsd)) {
     sources -= [ "resource/resource_bundle_auralinux.cc" ]
   }
 
-  if (is_linux) {
+  if (is_linux || is_bsd) {
     deps += [ "//build/linux:fontconfig" ]
   }
 
@@ -498,7 +498,7 @@ component("base") {
     sources -= [ "idle/idle_linux.cc" ]
   }
 
-  if (is_chromeos || (use_aura && ((is_linux && !use_x11) || is_android))) {
+  if (is_chromeos || (use_aura && (((is_linux || is_bsd) && !use_x11) || is_android))) {
     sources += [
       "dragdrop/os_exchange_data_provider_aura.cc",
       "dragdrop/os_exchange_data_provider_aura.h",
@@ -841,7 +841,7 @@ test("ui_base_unittests") {
       "ime/win/imm32_manager_unittest.cc",
       "ime/win/tsf_input_scope_unittest.cc",
     ]
-    if (is_linux && use_aura && !is_chromeos) {
+    if ((is_linux || is_bsd) && use_aura && !is_chromeos) {
       sources += [ "ime/input_method_auralinux_unittest.cc" ]
     }
     if (use_x11) {
@@ -964,7 +964,7 @@ test("ui_base_unittests") {
     ]
   }
 
-  if (is_android || is_linux || is_mac || is_win) {
+  if (is_android || is_linux || is_mac || is_win || is_bsd) {
     # TODO(brettw): We should be able to depend on //ui/resources:ui_test_pak
     # instead of depending directly on the non-test .pak files, but depending
     # on ui_test_pak seems to have no effect.
@@ -977,7 +977,7 @@ test("ui_base_unittests") {
       "//third_party/mesa:osmesa",
     ]
   }
-  if (is_linux || is_win) {
+  if (is_linux || is_win || is_bsd) {
     data += [
       # TODO(brettw): Remove these two lines.
       "$root_out_dir/ui/en-US.pak",
diff --git ui/base/ime/BUILD.gn ui/base/ime/BUILD.gn
index 0eb784c567a6..6a6dec8df486 100644
--- ui/base/ime/BUILD.gn
+++ ui/base/ime/BUILD.gn
@@ -126,7 +126,7 @@ component("ime") {
     "//skia",
   ]
 
-  if (!use_aura || (!is_linux && !use_ozone)) {
+  if (!use_aura || (!is_linux && !use_ozone && !is_bsd)) {
     sources -= [
       "input_method_auralinux.cc",
       "input_method_auralinux.h",
@@ -140,7 +140,7 @@ component("ime") {
     ]
   }
 
-  if (!is_chromeos && is_linux) {
+  if ((!is_chromeos && is_linux) || is_bsd) {
     sources += [
       "linux/text_edit_command_auralinux.cc",
       "linux/text_edit_command_auralinux.h",
diff --git ui/base/ime/ime_engine_handler_interface.h ui/base/ime/ime_engine_handler_interface.h
index 242f1c781d70..489801c89844 100644
--- ui/base/ime/ime_engine_handler_interface.h
+++ ui/base/ime/ime_engine_handler_interface.h
@@ -142,7 +142,7 @@ class UI_BASE_IME_EXPORT IMEEngineHandlerInterface {
   // Hides the input view window (from API call).
   virtual void HideInputView() = 0;
 
-#elif defined(OS_LINUX) || defined(OS_WIN)
+#elif defined(OS_LINUX) || defined(OS_WIN) || defined(OS_BSD)
 
   // Get the id of the IME extension.
   virtual std::string GetExtensionId() const = 0;
diff --git ui/base/ime/input_method_factory.cc ui/base/ime/input_method_factory.cc
index 0859afff99b6..35da9d37b0d2 100644
--- ui/base/ime/input_method_factory.cc
+++ ui/base/ime/input_method_factory.cc
@@ -16,7 +16,8 @@
 #include "ui/base/ime/input_method_win.h"
 #elif defined(OS_MACOSX)
 #include "ui/base/ime/input_method_mac.h"
-#elif defined(USE_AURA) && defined(OS_LINUX) && defined(USE_X11)
+#elif defined(USE_AURA) && (defined(OS_LINUX) || defined(OS_BSD)) && \
+      defined(USE_X11)
 #include "ui/base/ime/input_method_auralinux.h"
 #elif defined(OS_ANDROID)
 #include "ui/base/ime/input_method_android.h"
@@ -60,7 +61,8 @@ std::unique_ptr<InputMethod> CreateInputMethod(
   return base::MakeUnique<InputMethodWin>(delegate, widget);
 #elif defined(OS_MACOSX)
   return base::MakeUnique<InputMethodMac>(delegate);
-#elif defined(USE_AURA) && defined(OS_LINUX) && defined(USE_X11)
+#elif defined(USE_AURA) && (defined(OS_LINUX) || defined(OS_BSD)) && \
+      defined(USE_X11)
   return base::MakeUnique<InputMethodAuraLinux>(delegate);
 #elif defined(OS_ANDROID)
   return base::MakeUnique<InputMethodAndroid>(delegate);
diff --git ui/base/ime/input_method_initializer.cc ui/base/ime/input_method_initializer.cc
index 1ac3c27aa46f..46775ae20e8d 100644
--- ui/base/ime/input_method_initializer.cc
+++ ui/base/ime/input_method_initializer.cc
@@ -8,14 +8,15 @@
 
 #if defined(OS_CHROMEOS)
 #include "ui/base/ime/ime_bridge.h"
-#elif defined(USE_AURA) && defined(OS_LINUX)
+#elif defined(USE_AURA) && (defined(OS_LINUX) || defined(OS_BSD))
 #include "base/logging.h"
 #include "ui/base/ime/linux/fake_input_method_context_factory.h"
 #endif
 
 namespace {
 
-#if !defined(OS_CHROMEOS) && defined(USE_AURA) && defined(OS_LINUX)
+#if !defined(OS_CHROMEOS) && defined(USE_AURA) && \
+    (defined(OS_LINUX) || defined(OS_BSD))
 const ui::LinuxInputMethodContextFactory* g_linux_input_method_context_factory;
 #endif
 
@@ -38,7 +39,7 @@ void ShutdownInputMethod() {
 void InitializeInputMethodForTesting() {
 #if defined(OS_CHROMEOS)
   IMEBridge::Initialize();
-#elif defined(USE_AURA) && defined(OS_LINUX)
+#elif defined(USE_AURA) && (defined(OS_LINUX) || defined(OS_BSD))
   if (!g_linux_input_method_context_factory)
     g_linux_input_method_context_factory = new FakeInputMethodContextFactory();
   const LinuxInputMethodContextFactory* factory =
@@ -54,7 +55,7 @@ void InitializeInputMethodForTesting() {
 void ShutdownInputMethodForTesting() {
 #if defined(OS_CHROMEOS)
   IMEBridge::Shutdown();
-#elif defined(USE_AURA) && defined(OS_LINUX)
+#elif defined(USE_AURA) && (defined(OS_LINUX) || defined(OS_BSD))
   const LinuxInputMethodContextFactory* factory =
       LinuxInputMethodContextFactory::instance();
   CHECK(!factory || factory == g_linux_input_method_context_factory)
diff --git ui/base/resource/resource_bundle.cc ui/base/resource/resource_bundle.cc
index 1a24b13c6108..eee56be09d6c 100644
--- ui/base/resource/resource_bundle.cc
+++ ui/base/resource/resource_bundle.cc
@@ -676,7 +676,8 @@ void ResourceBundle::ReloadFonts() {
 }
 
 ScaleFactor ResourceBundle::GetMaxScaleFactor() const {
-#if defined(OS_CHROMEOS) || defined(OS_WIN) || defined(OS_LINUX)
+#if defined(OS_CHROMEOS) || defined(OS_WIN) || defined(OS_LINUX) || \
+    defined(OS_BSD)
   return max_scale_factor_;
 #else
   return GetSupportedScaleFactors().back();
@@ -734,7 +735,7 @@ void ResourceBundle::InitSharedInstance(Delegate* delegate) {
     supported_scale_factors.push_back(SCALE_FACTOR_100P);
   }
 #elif defined(OS_MACOSX) || defined(OS_CHROMEOS) || defined(OS_LINUX) || \
-    defined(OS_WIN)
+    defined(OS_WIN) || defined(OS_BSD)
   supported_scale_factors.push_back(SCALE_FACTOR_200P);
 #endif
   ui::SetSupportedScaleFactors(supported_scale_factors);
diff --git ui/base/ui_features.gni ui/base/ui_features.gni
index 2dca6a502ca1..e141266fa982 100644
--- ui/base/ui_features.gni
+++ ui/base/ui_features.gni
@@ -15,4 +15,4 @@ declare_args() {
   has_native_accessibility = use_atk || is_win || is_mac
 }
 
-enable_hidpi = is_mac || is_win || is_linux
+enable_hidpi = is_mac || is_win || is_linux || is_bsd
diff --git ui/base/webui/web_ui_util.cc ui/base/webui/web_ui_util.cc
index 8b04a37c6d2b..f35b7ddcbc28 100644
--- ui/base/webui/web_ui_util.cc
+++ ui/base/webui/web_ui_util.cc
@@ -169,7 +169,8 @@ std::string GetFontFamily() {
 
 // TODO(dnicoara) Remove Ozone check when PlatformFont support is introduced
 // into Ozone: crbug.com/320050
-#if defined(OS_LINUX) && !defined(OS_CHROMEOS) && !defined(USE_OZONE)
+#if (defined(OS_LINUX) || defined(OS_BSD)) && !defined(OS_CHROMEOS) && \
+    !defined(USE_OZONE)
   font_family = ui::ResourceBundle::GetSharedInstance().GetFont(
       ui::ResourceBundle::BaseFont).GetFontName() + ", " + font_family;
 #endif
diff --git ui/compositor/BUILD.gn ui/compositor/BUILD.gn
index 83ca119945a8..f9c7a15cad62 100644
--- ui/compositor/BUILD.gn
+++ ui/compositor/BUILD.gn
@@ -216,7 +216,7 @@ test("compositor_unittests") {
     "//ui/gl",
     "//ui/resources",
   ]
-  if (is_linux) {
+  if (is_linux || is_bsd) {
     deps += [ "//third_party/mesa:osmesa" ]
   }
 }
diff --git ui/events/event_switches.cc ui/events/event_switches.cc
index d68f3bb675a9..fd6914eb1fef 100644
--- ui/events/event_switches.cc
+++ ui/events/event_switches.cc
@@ -17,7 +17,7 @@ const char kEnableScrollPrediction[] = "enable-scroll-prediction";
 const char kCompensateForUnstablePinchZoom[] =
     "compensate-for-unstable-pinch-zoom";
 
-#if defined(OS_LINUX)
+#if defined(OS_LINUX) || defined(OS_BSD)
 // Tells chrome to interpret events from these devices as touch events. Only
 // available with XInput 2 (i.e. X server 1.8 or above). The id's of the
 // devices can be retrieved from 'xinput list'.
diff --git ui/events/event_switches.h ui/events/event_switches.h
index 629de9d7c9e7..5069624263cc 100644
--- ui/events/event_switches.h
+++ ui/events/event_switches.h
@@ -14,7 +14,7 @@ namespace switches {
 EVENTS_BASE_EXPORT extern const char kEnableScrollPrediction[];
 EVENTS_BASE_EXPORT extern const char kCompensateForUnstablePinchZoom[];
 
-#if defined(OS_LINUX)
+#if defined(OS_LINUX) || defined(OS_BSD)
 EVENTS_BASE_EXPORT extern const char kTouchDevices[];
 #endif
 
diff --git ui/events/keycodes/dom/keycode_converter.cc ui/events/keycodes/dom/keycode_converter.cc
index 94792e57bbcb..4a232dd57de8 100644
--- ui/events/keycodes/dom/keycode_converter.cc
+++ ui/events/keycodes/dom/keycode_converter.cc
@@ -19,7 +19,7 @@ namespace {
 // and DOM Level 3 |code| strings.
 #if defined(OS_WIN)
 #define USB_KEYMAP(usb, evdev, xkb, win, mac, code, id) {usb, win, code}
-#elif defined(OS_LINUX)
+#elif defined(OS_LINUX) || defined(OS_BSD)
 #define USB_KEYMAP(usb, evdev, xkb, win, mac, code, id) {usb, xkb, code}
 #elif defined(OS_MACOSX)
 #define USB_KEYMAP(usb, evdev, xkb, win, mac, code, id) {usb, mac, code}
diff --git ui/gfx/BUILD.gn ui/gfx/BUILD.gn
index e78c050cbb34..76b48addbbca 100644
--- ui/gfx/BUILD.gn
+++ ui/gfx/BUILD.gn
@@ -362,7 +362,7 @@ component("gfx") {
   }
 
   # Linux.
-  if (is_linux) {
+  if (is_linux || is_bsd) {
     deps += [ "//build/linux:fontconfig" ]
   }
 
@@ -545,6 +545,13 @@ source_set("memory_buffer_sources") {
 
     deps += [ "//third_party/libdrm" ]
   }
+  if (is_bsd) {
+    sources -= [
+      "client_native_pixmap.h",
+      "client_native_pixmap_factory.cc",
+      "client_native_pixmap_factory.h",
+    ]
+  }
 }
 
 source_set("switches_sources") {
@@ -603,7 +610,7 @@ static_library("test_support") {
       "test/ui_cocoa_test_helper.mm",
     ]
   }
-  if (is_linux) {
+  if (is_linux || is_bsd) {
     deps += [ "//build/linux:fontconfig" ]
   }
 }
diff --git ui/gfx/canvas_skia.cc ui/gfx/canvas_skia.cc
index 916ff1caf1da..4ba22698b18a 100644
--- ui/gfx/canvas_skia.cc
+++ ui/gfx/canvas_skia.cc
@@ -200,7 +200,7 @@ void Canvas::DrawStringRectWithFlags(const base::string16& text,
     Range range = StripAcceleratorChars(flags, &adjusted_text);
     bool elide_text = ((flags & NO_ELLIPSIS) == 0);
 
-#if defined(OS_LINUX)
+#if defined(OS_LINUX) || defined(OS_BSD)
     // On Linux, eliding really means fading the end of the string. But only
     // for LTR text. RTL text is still elided (on the left) with "...".
     if (elide_text) {
diff --git ui/gfx/font_list.cc ui/gfx/font_list.cc
index 118f10e3dfc7..be24370d48c7 100644
--- ui/gfx/font_list.cc
+++ ui/gfx/font_list.cc
@@ -24,7 +24,7 @@ base::LazyInstance<scoped_refptr<gfx::FontListImpl>>::Leaky g_default_impl =
 bool g_default_impl_initialized = false;
 
 bool IsFontFamilyAvailable(const std::string& family, SkFontMgr* fontManager) {
-#if defined(OS_LINUX)
+#if defined(OS_LINUX) || defined(OS_BSD)
   sk_sp<SkTypeface> typeface(
       fontManager->legacyCreateTypeface(family.c_str(), SkFontStyle()));
   return typeface;
diff --git ui/gfx/font_render_params.h ui/gfx/font_render_params.h
index ade3672f493c..0a12097fda3e 100644
--- ui/gfx/font_render_params.h
+++ ui/gfx/font_render_params.h
@@ -107,13 +107,13 @@ GFX_EXPORT FontRenderParams GetFontRenderParams(
     const FontRenderParamsQuery& query,
     std::string* family_out);
 
-#if defined(OS_LINUX)
+#if defined(OS_LINUX) || defined(OS_BSD)
 // Clears GetFontRenderParams()'s cache. Intended to be called by tests that are
 // changing Fontconfig's configuration.
 GFX_EXPORT void ClearFontRenderParamsCacheForTest();
 #endif
 
-#if defined(OS_CHROMEOS) || defined(OS_LINUX) || \
+#if defined(OS_CHROMEOS) || defined(OS_LINUX) || defined(OS_BSD) || \
     (defined(OS_ANDROID) && BUILDFLAG(ENABLE_VR))
 // Gets the device scale factor to query the FontRenderParams.
 GFX_EXPORT float GetFontRenderParamsDeviceScaleFactor();
diff --git ui/gfx/native_pixmap_handle.cc ui/gfx/native_pixmap_handle.cc
index d13952dbce93..f6fc9142739c 100644
--- ui/gfx/native_pixmap_handle.cc
+++ ui/gfx/native_pixmap_handle.cc
@@ -4,7 +4,7 @@
 
 #include "ui/gfx/native_pixmap_handle.h"
 
-#if defined(OS_LINUX)
+#if defined(OS_LINUX) || defined(OS_BSD)
 #include "base/posix/eintr_wrapper.h"
 #endif
 
@@ -29,7 +29,7 @@ NativePixmapHandle::NativePixmapHandle(const NativePixmapHandle& other) =
 
 NativePixmapHandle::~NativePixmapHandle() {}
 
-#if defined(OS_LINUX)
+#if defined(OS_LINUX) || defined(OS_BSD)
 NativePixmapHandle CloneHandleForIPC(const NativePixmapHandle& handle) {
   NativePixmapHandle clone;
   std::vector<base::ScopedFD> scoped_fds;
@@ -46,6 +46,6 @@ NativePixmapHandle CloneHandleForIPC(const NativePixmapHandle& handle) {
   clone.planes = handle.planes;
   return clone;
 }
-#endif  // defined(OS_LINUX)
+#endif  // defined(OS_LINUX) || defined(OS_BSD)
 
 }  // namespace gfx
diff --git ui/gfx/native_pixmap_handle.h ui/gfx/native_pixmap_handle.h
index 827a7fef871b..482218f30860 100644
--- ui/gfx/native_pixmap_handle.h
+++ ui/gfx/native_pixmap_handle.h
@@ -13,7 +13,7 @@
 #include "build/build_config.h"
 #include "ui/gfx/gfx_export.h"
 
-#if defined(OS_LINUX)
+#if defined(OS_LINUX) || defined(OS_BSD)
 #include "base/file_descriptor_posix.h"
 #endif
 
@@ -46,14 +46,14 @@ struct GFX_EXPORT NativePixmapHandle {
 
   ~NativePixmapHandle();
 
-#if defined(OS_LINUX)
+#if defined(OS_LINUX) || defined(OS_BSD)
   // File descriptors for the underlying memory objects (usually dmabufs).
   std::vector<base::FileDescriptor> fds;
 #endif
   std::vector<NativePixmapPlane> planes;
 };
 
-#if defined(OS_LINUX)
+#if defined(OS_LINUX) || defined(OS_BSD)
 // Returns an instance of |handle| which can be sent over IPC. This duplicates
 // the file-handles, so that the IPC code take ownership of them, without
 // invalidating |handle|.
diff --git ui/gl/BUILD.gn ui/gl/BUILD.gn
index e8387a50bd53..1be8e65684cc 100644
--- ui/gl/BUILD.gn
+++ ui/gl/BUILD.gn
@@ -10,11 +10,12 @@ import("//ui/ozone/ozone.gni")
 import("//testing/test.gni")
 
 declare_args() {
-  enable_swiftshader = (is_win || (is_linux && !is_chromeos && use_x11)) &&
+  enable_swiftshader = (is_win || (is_linux && !is_chromeos && use_x11) ||
+                        (is_bsd && use_x11)) &&
                        (target_cpu == "x86" || target_cpu == "x64")
 }
 
-use_egl = is_win || is_android || is_linux
+use_egl = is_win || is_android || is_linux || is_bsd
 use_glx = use_x11 || ozone_platform_x11
 
 if (is_android) {
@@ -173,14 +174,14 @@ component("gl") {
       "gl_surface_egl.h",
     ]
 
-    if (is_linux) {
+    if (is_linux || is_bsd) {
       sources += [
         "gl_image_native_pixmap.cc",
         "gl_image_native_pixmap.h",
       ]
     }
   }
-  if (is_android || is_linux) {
+  if (is_android || is_linux || is_bsd) {
     sources += [
       "gl_implementation_osmesa.cc",
       "gl_implementation_osmesa.h",
diff --git ui/gl/sync_control_vsync_provider.cc ui/gl/sync_control_vsync_provider.cc
index f9dc5c56e47e..acdc183a6dfe 100644
--- ui/gl/sync_control_vsync_provider.cc
+++ ui/gl/sync_control_vsync_provider.cc
@@ -11,7 +11,7 @@
 #include "base/trace_event/trace_event.h"
 #include "build/build_config.h"
 
-#if defined(OS_LINUX)
+#if defined(OS_LINUX) || defined(OS_BSD)
 // These constants define a reasonable range for a calculated refresh interval.
 // Calculating refreshes out of this range will be considered a fatal error.
 const int64_t kMinVsyncIntervalUs = base::Time::kMicrosecondsPerSecond / 400;
@@ -26,7 +26,7 @@ const double kRelativeIntervalDifferenceThreshold = 0.05;
 namespace gl {
 
 SyncControlVSyncProvider::SyncControlVSyncProvider() : gfx::VSyncProvider() {
-#if defined(OS_LINUX)
+#if defined(OS_LINUX) || defined(OS_BSD)
   // On platforms where we can't get an accurate reading on the refresh
   // rate we fall back to the assumption that we're displaying 60 frames
   // per second.
@@ -39,7 +39,7 @@ SyncControlVSyncProvider::~SyncControlVSyncProvider() {}
 void SyncControlVSyncProvider::GetVSyncParameters(
     const UpdateVSyncCallback& callback) {
   TRACE_EVENT0("gpu", "SyncControlVSyncProvider::GetVSyncParameters");
-#if defined(OS_LINUX)
+#if defined(OS_LINUX) || defined(OS_BSD)
   base::TimeTicks timebase;
 
   // The actual clock used for the system time returned by glXGetSyncValuesOML
@@ -155,7 +155,7 @@ void SyncControlVSyncProvider::GetVSyncParameters(
   last_timebase_ = timebase;
   last_media_stream_counter_ = media_stream_counter;
   callback.Run(timebase, last_good_interval_);
-#endif  // defined(OS_LINUX)
+#endif  // defined(OS_LINUX) || defined(OS_BSD)
 }
 
 }  // namespace gl
diff --git ui/gl/sync_control_vsync_provider.h ui/gl/sync_control_vsync_provider.h
index 4ef76840b4e8..e85b401809e8 100644
--- ui/gl/sync_control_vsync_provider.h
+++ ui/gl/sync_control_vsync_provider.h
@@ -24,11 +24,11 @@ class SyncControlVSyncProvider : public gfx::VSyncProvider {
   void GetVSyncParameters(const UpdateVSyncCallback& callback) override;
 
   static constexpr bool IsSupported() {
-#if defined(OS_LINUX)
+#if defined(OS_LINUX) || defined(OS_BSD)
     return true;
 #else
     return false;
-#endif  // defined(OS_LINUX)
+#endif  // defined(OS_LINUX) || defined(OS_BSD)
   }
 
  protected:
@@ -39,7 +39,7 @@ class SyncControlVSyncProvider : public gfx::VSyncProvider {
   virtual bool GetMscRate(int32_t* numerator, int32_t* denominator) = 0;
 
  private:
-#if defined(OS_LINUX)
+#if defined(OS_LINUX) || defined(OS_BSD)
   base::TimeTicks last_timebase_;
   uint64_t last_media_stream_counter_ = 0;
   base::TimeDelta last_good_interval_;
@@ -50,7 +50,7 @@ class SyncControlVSyncProvider : public gfx::VSyncProvider {
   // from configuration change (monitor reconfiguration, moving windows
   // between monitors, suspend and resume, etc.).
   std::queue<base::TimeDelta> last_computed_intervals_;
-#endif  // defined(OS_LINUX)
+#endif  // defined(OS_LINUX) || defined(OS_BSD)
 
   DISALLOW_COPY_AND_ASSIGN(SyncControlVSyncProvider);
 };
diff --git ui/message_center/views/message_center_button_bar.cc ui/message_center/views/message_center_button_bar.cc
index 5b8ef31ce980..af1398269276 100644
--- ui/message_center/views/message_center_button_bar.cc
+++ ui/message_center/views/message_center_button_bar.cc
@@ -73,7 +73,7 @@ MessageCenterButtonBar::MessageCenterButtonBar(
     const base::string16& title)
     : message_center_view_(message_center_view),
       message_center_(message_center),
-#if defined(OS_LINUX) && !defined(OS_CHROMEOS)
+#if (defined(OS_LINUX) && !defined(OS_CHROMEOS)) || defined(OS_BSD)
       close_bubble_button_(NULL),
 #endif
       title_arrow_(NULL),
@@ -139,7 +139,7 @@ MessageCenterButtonBar::MessageCenterButtonBar(
       IDS_MESSAGE_CENTER_SETTINGS_BUTTON_LABEL);
   button_container_->AddChildView(settings_button_);
 
-#if defined(OS_LINUX) && !defined(OS_CHROMEOS)
+#if (defined(OS_LINUX) && !defined(OS_CHROMEOS)) || defined(OS_BSD)
   close_bubble_button_ = new views::ImageButton(this);
   close_bubble_button_->SetImage(
       views::Button::STATE_NORMAL,
@@ -201,7 +201,7 @@ void MessageCenterButtonBar::ViewVisibilityChanged() {
                     0,
                     0);
 
-#if defined(OS_LINUX) && !defined(OS_CHROMEOS)
+#if (defined(OS_LINUX) && !defined(OS_CHROMEOS)) || defined(OS_BSD)
   // The close-bubble button.
   column->AddColumn(views::GridLayout::LEADING,
                     views::GridLayout::LEADING,
@@ -221,7 +221,7 @@ void MessageCenterButtonBar::ViewVisibilityChanged() {
     layout->AddView(title_arrow_);
   layout->AddView(notification_label_);
   layout->AddView(button_container_);
-#if defined(OS_LINUX) && !defined(OS_CHROMEOS)
+#if (defined(OS_LINUX) && !defined(OS_CHROMEOS)) || defined(OS_BSD)
   layout->AddView(close_bubble_button_);
 #endif
   constexpr int kFooterBottomMargin = 3;
@@ -292,7 +292,7 @@ void MessageCenterButtonBar::ButtonPressed(views::Button* sender,
     else
       message_center()->EnterQuietModeWithExpire(base::TimeDelta::FromDays(1));
     quiet_mode_button_->SetToggled(message_center()->IsQuietMode());
-#if defined(OS_LINUX) && !defined(OS_CHROMEOS)
+#if (defined(OS_LINUX) && !defined(OS_CHROMEOS)) || defined(OS_BSD)
   } else if (sender == close_bubble_button_) {
     message_center_view()->tray()->HideMessageCenterBubble();
 #endif
diff --git ui/message_center/views/message_center_button_bar.h ui/message_center/views/message_center_button_bar.h
index 6e044e1dd83d..8300e441ae08 100644
--- ui/message_center/views/message_center_button_bar.h
+++ ui/message_center/views/message_center_button_bar.h
@@ -78,7 +78,7 @@ class MessageCenterButtonBar : public views::View,
   // close-on-deactivation is off. This is a tentative solution. Once pkotwicz
   // Fixes the problem of focus-follow-mouse, close-on-deactivation will be
   // back and this field will be removed. See crbug.com/319516.
-#if defined(OS_LINUX) && !defined(OS_CHROMEOS)
+#if (defined(OS_LINUX) && !defined(OS_CHROMEOS)) || defined(OS_BSD)
   views::ImageButton* close_bubble_button_;
 #endif
 
diff --git ui/message_center/views/message_view_factory.cc ui/message_center/views/message_view_factory.cc
index f1c982f4b99c..9a3635c9c7f6 100644
--- ui/message_center/views/message_view_factory.cc
+++ ui/message_center/views/message_view_factory.cc
@@ -47,7 +47,7 @@ MessageView* MessageViewFactory::Create(MessageCenterController* controller,
       notification_view = new NotificationView(controller, notification);
   }
 
-#if defined(OS_LINUX)
+#if defined(OS_LINUX) || defined(OS_BSD)
   // Don't create shadows for notification toasts on Linux or CrOS.
   if (top_level)
     return notification_view;
diff --git ui/message_center/views/toast_contents_view.cc ui/message_center/views/toast_contents_view.cc
index 785ffa6c05e4..b3fde457f30c 100644
--- ui/message_center/views/toast_contents_view.cc
+++ ui/message_center/views/toast_contents_view.cc
@@ -388,7 +388,7 @@ void ToastContentsView::CreateWidget(
     PopupAlignmentDelegate* alignment_delegate) {
   views::Widget::InitParams params(views::Widget::InitParams::TYPE_POPUP);
   params.keep_on_top = true;
-#if defined(OS_LINUX) && !defined(OS_CHROMEOS)
+#if (defined(OS_LINUX) && !defined(OS_CHROMEOS)) || defined(OS_BSD)
   params.opacity = views::Widget::InitParams::OPAQUE_WINDOW;
 #else
   params.opacity = views::Widget::InitParams::TRANSLUCENT_WINDOW;
diff --git ui/native_theme/native_theme.h ui/native_theme/native_theme.h
index b1497780ce7f..e346b7192f5a 100644
--- ui/native_theme/native_theme.h
+++ ui/native_theme/native_theme.h
@@ -47,7 +47,7 @@ class NATIVE_THEME_EXPORT NativeTheme {
   // The part to be painted / sized.
   enum Part {
     kCheckbox,
-#if defined(OS_LINUX) && !defined(OS_CHROMEOS)
+#if (defined(OS_LINUX) && !defined(OS_CHROMEOS)) || defined(OS_BSD)
     kFrameTopArea,
 #endif
     kInnerSpinButton,
diff --git ui/native_theme/native_theme_base.cc ui/native_theme/native_theme_base.cc
index 4a2fb957ed0f..4adf9d39995b 100644
--- ui/native_theme/native_theme_base.cc
+++ ui/native_theme/native_theme_base.cc
@@ -173,7 +173,7 @@ void NativeThemeBase::Paint(cc::PaintCanvas* canvas,
     case kCheckbox:
       PaintCheckbox(canvas, state, rect, extra.button);
       break;
-#if defined(OS_LINUX) && !defined(OS_CHROMEOS)
+#if (defined(OS_LINUX) && !defined(OS_CHROMEOS)) || defined(OS_BSD)
     case kFrameTopArea:
       PaintFrameTopArea(canvas, state, rect, extra.frame_top_area);
       break;
diff --git ui/resources/ui_resources.grd ui/resources/ui_resources.grd
index 94d676d2708c..daff2c619f54 100644
--- ui/resources/ui_resources.grd
+++ ui/resources/ui_resources.grd
@@ -15,7 +15,7 @@
       <!-- KEEP THESE IN ALPHABETICAL ORDER!  DO NOT ADD TO RANDOM PLACES JUST
            BECAUSE YOUR RESOURCES ARE FUNCTIONALLY RELATED OR FALL UNDER THE
            SAME CONDITIONALS. -->
-      <if expr="is_linux and use_aura">
+      <if expr="(is_linux or is_bsd) and use_aura">
         <structure type="chrome_scaled_image" name="IDR_AURA_CURSOR_BIG_ALIAS" file="common/pointers/alias_big.png" />
         <structure type="chrome_scaled_image" name="IDR_AURA_CURSOR_BIG_CELL" file="common/pointers/cell_big.png" />
         <structure type="chrome_scaled_image" name="IDR_AURA_CURSOR_BIG_COL_RESIZE" file="common/pointers/sb_h_double_arrow_big.png" />
diff --git ui/strings/app_locale_settings.grd ui/strings/app_locale_settings.grd
index a6de88ab5232..f8d8ffab99c6 100644
--- ui/strings/app_locale_settings.grd
+++ ui/strings/app_locale_settings.grd
@@ -205,7 +205,7 @@
           75%
         </message>
       </if>
-      <if expr="(is_linux or is_android or is_bsd) and not chromeos">
+      <if expr="(is_linux or is_android or is_bsd or is_bsd) and not chromeos">
         <!-- The font used in Web UI (e.g. History). Note that these are only
              backups. We try to use the system font if possible. -->
         <message name="IDS_WEB_FONT_FAMILY" use_name_for_id="true">
diff --git ui/views/BUILD.gn ui/views/BUILD.gn
index 388bbb526381..96a067114b0a 100644
--- ui/views/BUILD.gn
+++ ui/views/BUILD.gn
@@ -449,7 +449,7 @@ component("views") {
   if (use_x11 && !is_chromeos) {
     deps += [ "//ui/display/util" ]
   }
-  if (is_linux && !is_chromeos) {
+  if ((is_linux && !is_chromeos) || is_bsd) {
     sources -= [ "window/window_button_order_provider.cc" ]
     deps += [ "//ui/shell_dialogs" ]
   } else {
@@ -633,7 +633,7 @@ component("views") {
       } else if (use_ozone) {
         sources += [ "widget/desktop_aura/desktop_window_tree_host_ozone.cc" ]
       }
-      if (is_linux) {
+      if (is_linux || is_bsd) {
         sources += [ "style/platform_style_linux.cc" ]
       }
     }
diff --git ui/views/bubble/bubble_dialog_delegate.cc ui/views/bubble/bubble_dialog_delegate.cc
index ca89e25b924d..8f893f11571e 100644
--- ui/views/bubble/bubble_dialog_delegate.cc
+++ ui/views/bubble/bubble_dialog_delegate.cc
@@ -77,7 +77,8 @@ Widget* BubbleDialogDelegateView::CreateBubble(
   // the parent frame and let DWM handle compositing.  If not, then we don't
   // want to allow the bubble to extend the frame because it will be clipped.
   bubble_delegate->set_adjust_if_offscreen(ui::win::IsAeroGlassEnabled());
-#elif (defined(OS_LINUX) && !defined(OS_CHROMEOS)) || defined(OS_MACOSX)
+#elif (defined(OS_LINUX) && !defined(OS_CHROMEOS)) || defined(OS_MACOSX) || \
+      defined(OS_BSD)
   // Linux clips bubble windows that extend outside their parent window bounds.
   // Mac never adjusts.
   bubble_delegate->set_adjust_if_offscreen(false);
diff --git ui/views/controls/label.cc ui/views/controls/label.cc
index c5e3fc5e4d6f..f58bbeef0b50 100644
--- ui/views/controls/label.cc
+++ ui/views/controls/label.cc
@@ -568,7 +568,7 @@ bool Label::OnMousePressed(const ui::MouseEvent& event) {
     GetFocusManager()->SetFocusedView(this);
   }
 
-#if defined(OS_LINUX) && !defined(OS_CHROMEOS)
+#if (defined(OS_LINUX) && !defined(OS_CHROMEOS)) || defined(OS_BSD)
   if (event.IsOnlyMiddleMouseButton() && GetFocusManager() && !had_focus)
     GetFocusManager()->SetFocusedView(this);
 #endif
@@ -743,7 +743,7 @@ bool Label::PasteSelectionClipboard() {
 }
 
 void Label::UpdateSelectionClipboard() {
-#if defined(OS_LINUX) && !defined(OS_CHROMEOS)
+#if (defined(OS_LINUX) && !defined(OS_CHROMEOS)) || defined(OS_BSD)
   if (!obscured()) {
     ui::ScopedClipboardWriter(ui::CLIPBOARD_TYPE_SELECTION)
         .WriteText(GetSelectedText());
diff --git ui/views/controls/textfield/textfield.cc ui/views/controls/textfield/textfield.cc
index ea4f91a2e265..c619f82ba554 100644
--- ui/views/controls/textfield/textfield.cc
+++ ui/views/controls/textfield/textfield.cc
@@ -58,7 +58,7 @@
 #include "ui/base/win/osk_display_manager.h"
 #endif
 
-#if defined(OS_LINUX) && !defined(OS_CHROMEOS)
+#if (defined(OS_LINUX) && !defined(OS_CHROMEOS)) || defined(OS_BSD)
 #include "base/strings/utf_string_conversions.h"
 #include "ui/base/ime/linux/text_edit_command_auralinux.h"
 #include "ui/base/ime/linux/text_edit_key_bindings_delegate_auralinux.h"
@@ -165,14 +165,14 @@ ui::TextEditCommand GetCommandForKeyEvent(const ui::KeyEvent& event) {
     case ui::VKEY_BACK:
       if (!control)
         return ui::TextEditCommand::DELETE_BACKWARD;
-#if defined(OS_LINUX)
+#if defined(OS_LINUX) || defined(OS_BSD)
       // Only erase by line break on Linux and ChromeOS.
       if (shift)
         return ui::TextEditCommand::DELETE_TO_BEGINNING_OF_LINE;
 #endif
       return ui::TextEditCommand::DELETE_WORD_BACKWARD;
     case ui::VKEY_DELETE:
-#if defined(OS_LINUX)
+#if defined(OS_LINUX) || defined(OS_BSD)
       // Only erase by line break on Linux and ChromeOS.
       if (shift && control)
         return ui::TextEditCommand::DELETE_TO_END_OF_LINE;
@@ -233,7 +233,7 @@ bool IsControlKeyModifier(int flags) {
 // Control-modified key combination, but we cannot extend it to other platforms
 // as Control has different meanings and behaviors.
 // https://crrev.com/2580483002/#msg46
-#if defined(OS_LINUX)
+#if defined(OS_LINUX) || defined(OS_BSD)
   return flags & ui::EF_CONTROL_DOWN;
 #else
   return false;
@@ -619,7 +619,7 @@ bool Textfield::OnMousePressed(const ui::MouseEvent& event) {
     ShowImeIfNeeded();
   }
 
-#if defined(OS_LINUX) && !defined(OS_CHROMEOS)
+#if (defined(OS_LINUX) && !defined(OS_CHROMEOS)) || defined(OS_BSD)
   if (!handled && !had_focus && event.IsOnlyMiddleMouseButton())
     RequestFocus();
 #endif
@@ -658,7 +658,7 @@ bool Textfield::OnKeyPressed(const ui::KeyEvent& event) {
   if (!textfield)
     return handled;
 
-#if defined(OS_LINUX) && !defined(OS_CHROMEOS)
+#if (defined(OS_LINUX) && !defined(OS_CHROMEOS)) || defined(OS_BSD)
   ui::TextEditKeyBindingsDelegateAuraLinux* delegate =
       ui::GetTextEditKeyBindingsDelegate();
   std::vector<ui::TextEditCommandAuraLinux> commands;
@@ -801,7 +801,7 @@ void Textfield::AboutToRequestFocusFromTabTraversal(bool reverse) {
 }
 
 bool Textfield::SkipDefaultKeyEventProcessing(const ui::KeyEvent& event) {
-#if defined(OS_LINUX) && !defined(OS_CHROMEOS)
+#if (defined(OS_LINUX) && !defined(OS_CHROMEOS)) || defined(OS_BSD)
   // Skip any accelerator handling that conflicts with custom keybindings.
   ui::TextEditKeyBindingsDelegateAuraLinux* delegate =
       ui::GetTextEditKeyBindingsDelegate();
@@ -1897,7 +1897,7 @@ bool Textfield::PasteSelectionClipboard() {
 }
 
 void Textfield::UpdateSelectionClipboard() {
-#if defined(OS_LINUX) && !defined(OS_CHROMEOS)
+#if (defined(OS_LINUX) && !defined(OS_CHROMEOS)) || defined(OS_BSD)
   if (text_input_type_ != ui::TEXT_INPUT_TYPE_PASSWORD) {
     ui::ScopedClipboardWriter(ui::CLIPBOARD_TYPE_SELECTION)
         .WriteText(GetSelectedText());
diff --git ui/views/controls/webview/BUILD.gn ui/views/controls/webview/BUILD.gn
index b8daeebab2a6..b1dba05389a3 100644
--- ui/views/controls/webview/BUILD.gn
+++ ui/views/controls/webview/BUILD.gn
@@ -39,7 +39,7 @@ component("webview") {
     "//ui/views",
   ]
 
-  if (is_linux || is_android) {
+  if (is_linux || is_android || is_bsd) {
     sources += [ "unhandled_keyboard_event_handler_default.cc" ]
   }
 }
diff --git ui/views/corewm/tooltip_aura.cc ui/views/corewm/tooltip_aura.cc
index a9433d482629..27d3d3e935bf 100644
--- ui/views/corewm/tooltip_aura.cc
+++ ui/views/corewm/tooltip_aura.cc
@@ -34,7 +34,7 @@ const int kCursorOffsetY = 15;
 
 // TODO(varkha): Update if native widget can be transparent on Linux.
 bool CanUseTranslucentTooltipWidget() {
-#if defined(OS_LINUX) && !defined(OS_CHROMEOS)
+#if (defined(OS_LINUX) && !defined(OS_CHROMEOS)) || defined(OS_BSD)
   return false;
 #else
   return true;
diff --git ui/views/mus/BUILD.gn ui/views/mus/BUILD.gn
index 4822b666584e..0b9dcbc68747 100644
--- ui/views/mus/BUILD.gn
+++ ui/views/mus/BUILD.gn
@@ -78,7 +78,7 @@ component("mus") {
     "//ui/wm",
   ]
 
-  if (is_linux && !is_android) {
+  if ((is_linux && !is_android) || is_bsd) {
     deps += [ "//components/font_service/public/cpp" ]
     data_deps = [
       "//components/font_service",
diff --git ui/views/mus/aura_init.cc ui/views/mus/aura_init.cc
index 7f73dc190f41..7cf7fc3fa9b5 100644
--- ui/views/mus/aura_init.cc
+++ ui/views/mus/aura_init.cc
@@ -24,7 +24,7 @@
 #include "ui/views/style/typography_provider.h"
 #include "ui/views/views_delegate.h"
 
-#if defined(OS_LINUX)
+#if defined(OS_LINUX) || defined(OS_BSD)
 #include "components/font_service/public/cpp/font_loader.h"
 #endif
 
@@ -73,7 +73,7 @@ AuraInit::AuraInit(service_manager::Connector* connector,
   InitializeResources(connector);
 
 // Initialize the skia font code to go ask fontconfig underneath.
-#if defined(OS_LINUX)
+#if defined(OS_LINUX) || defined(OS_BSD)
   font_loader_ = sk_make_sp<font_service::FontLoader>(connector);
   SkFontConfigInterface::SetGlobal(font_loader_.get());
 #endif
@@ -86,7 +86,7 @@ AuraInit::AuraInit(service_manager::Connector* connector,
 }
 
 AuraInit::~AuraInit() {
-#if defined(OS_LINUX)
+#if defined(OS_LINUX) || defined(OS_BSD)
   if (font_loader_.get()) {
     SkFontConfigInterface::SetGlobal(nullptr);
     // FontLoader is ref counted. We need to explicitly shutdown the background
diff --git ui/views/mus/aura_init.h ui/views/mus/aura_init.h
index fc37b5b691f8..191fab6b5a73 100644
--- ui/views/mus/aura_init.h
+++ ui/views/mus/aura_init.h
@@ -68,7 +68,7 @@ class VIEWS_MUS_EXPORT AuraInit {
  private:
   void InitializeResources(service_manager::Connector* connector);
 
-#if defined(OS_LINUX)
+#if defined(OS_LINUX) || defined(OS_BSD)
   sk_sp<font_service::FontLoader> font_loader_;
 #endif
 
diff --git ui/views/selection_controller.cc ui/views/selection_controller.cc
index 6d7d7a937203..fe2f73740f80 100644
--- ui/views/selection_controller.cc
+++ ui/views/selection_controller.cc
@@ -20,7 +20,7 @@ SelectionController::SelectionController(SelectionControllerDelegate* delegate)
       delegate_(delegate),
       handles_selection_clipboard_(false) {
 // On Linux, update the selection clipboard on a text selection.
-#if defined(OS_LINUX) && !defined(OS_CHROMEOS)
+#if (defined(OS_LINUX) && !defined(OS_CHROMEOS)) || defined(OS_BSD)
   set_handles_selection_clipboard(true);
 #endif
 
diff --git ui/views/style/platform_style.cc ui/views/style/platform_style.cc
index bf6d76723c95..aaba0bf12504 100644
--- ui/views/style/platform_style.cc
+++ ui/views/style/platform_style.cc
@@ -19,7 +19,7 @@
 
 #if defined(OS_CHROMEOS)
 #include "ui/views/controls/scrollbar/overlay_scroll_bar.h"
-#elif defined(OS_LINUX)
+#elif defined(OS_LINUX) || defined(OS_BSD)
 #define DESKTOP_LINUX
 #endif
 
diff --git ui/views/views_delegate.cc ui/views/views_delegate.cc
index a9b3022add9b..58ae08077332 100644
--- ui/views/views_delegate.cc
+++ ui/views/views_delegate.cc
@@ -85,7 +85,7 @@ HICON ViewsDelegate::GetDefaultWindowIcon() const {
 bool ViewsDelegate::IsWindowInMetro(gfx::NativeWindow window) const {
   return false;
 }
-#elif defined(OS_LINUX) && !defined(OS_CHROMEOS)
+#elif (defined(OS_LINUX) && !defined(OS_CHROMEOS)) || defined(OS_BSD)
 gfx::ImageSkia* ViewsDelegate::GetDefaultWindowIcon() const {
   return nullptr;
 }
diff --git ui/views/views_delegate.h ui/views/views_delegate.h
index b869e7b3fb39..d3b321915393 100644
--- ui/views/views_delegate.h
+++ ui/views/views_delegate.h
@@ -161,7 +161,7 @@ class VIEWS_EXPORT ViewsDelegate {
   // Returns true if the window passed in is in the Windows 8 metro
   // environment.
   virtual bool IsWindowInMetro(gfx::NativeWindow window) const;
-#elif defined(OS_LINUX) && !defined(OS_CHROMEOS)
+#elif (defined(OS_LINUX) && !defined(OS_CHROMEOS)) || defined(OS_BSD)
   virtual gfx::ImageSkia* GetDefaultWindowIcon() const;
 #endif
 
diff --git ui/views/views_switches.cc ui/views/views_switches.cc
index 79fe2574aec3..6efd26f679eb 100644
--- ui/views/views_switches.cc
+++ ui/views/views_switches.cc
@@ -21,7 +21,8 @@ const char kDisableViewsRectBasedTargeting[] =
 const char kDrawViewBoundsRects[] = "draw-view-bounds-rects";
 
 bool IsRectBasedTargetingEnabled() {
-#if defined(OS_CHROMEOS) || defined(OS_WIN) || defined(OS_LINUX)
+#if defined(OS_CHROMEOS) || defined(OS_WIN) || defined(OS_LINUX) || \
+    defined(OS_BSD)
   return !base::CommandLine::ForCurrentProcess()->HasSwitch(
       kDisableViewsRectBasedTargeting);
 #else
diff --git ui/views/widget/desktop_aura/desktop_native_widget_aura_unittest.cc ui/views/widget/desktop_aura/desktop_native_widget_aura_unittest.cc
index 872cd30c086b..813c886f59f3 100644
--- ui/views/widget/desktop_aura/desktop_native_widget_aura_unittest.cc
+++ ui/views/widget/desktop_aura/desktop_native_widget_aura_unittest.cc
@@ -60,7 +60,7 @@ TEST_F(DesktopNativeWidgetAuraTest, DesktopAuraWindowSizeTest) {
 
   // On Linux we test this with popup windows because the WM may ignore the size
   // suggestion for normal windows.
-#if defined(OS_LINUX)
+#if defined(OS_LINUX) || defined(OS_BSD)
   Widget::InitParams init_params =
       CreateParams(Widget::InitParams::TYPE_POPUP);
 #else
diff --git ui/views/widget/widget_unittest.cc ui/views/widget/widget_unittest.cc
index 3269e5ab50fa..79e55d8d504c 100644
--- ui/views/widget/widget_unittest.cc
+++ ui/views/widget/widget_unittest.cc
@@ -1059,7 +1059,7 @@ TEST_F(WidgetTest, GetWindowPlacement) {
 #endif
 
   WidgetAutoclosePtr widget;
-#if defined(OS_LINUX) && !defined(OS_CHROMEOS)
+#if (defined(OS_LINUX) && !defined(OS_CHROMEOS)) || defined(OS_BSD)
   // On desktop-Linux cheat and use non-desktop widgets. On X11, minimize is
   // asynchronous. Also (harder) showing a window doesn't activate it without
   // user interaction (or extra steps only done for interactive ui tests).
@@ -1083,7 +1083,7 @@ TEST_F(WidgetTest, GetWindowPlacement) {
 
   native_widget->GetWindowPlacement(&restored_bounds, &show_state);
   EXPECT_EQ(expected_bounds, restored_bounds);
-#if defined(OS_LINUX)
+#if defined(OS_LINUX)) || defined(OS_BSD)
   // Non-desktop/Ash widgets start off in "default" until a Restore().
   EXPECT_EQ(ui::SHOW_STATE_DEFAULT, show_state);
   widget->Restore();
@@ -1166,7 +1166,7 @@ TEST_F(WidgetTest, MinimumSizeConstraints) {
   EXPECT_EQ(minimum_size, widget->GetClientAreaBoundsInScreen().size());
 
   widget->SetSize(smaller_size);
-#if defined(OS_LINUX) && !defined(OS_CHROMEOS)
+#if (defined(OS_LINUX) && !defined(OS_CHROMEOS)) || defined(OS_BSD)
   // TODO(tapted): Desktop Linux ignores size constraints for SetSize. Fix it.
   const bool use_small_size = true;
 #else
@@ -1236,7 +1236,7 @@ TEST_F(WidgetTest, GetWindowBoundsInScreen) {
 // Non-Desktop widgets need the shell to maximize/fullscreen window.
 // Disable on Linux because windows restore to the wrong bounds.
 // See http://crbug.com/515369.
-#if defined(OS_CHROMEOS) || defined(OS_LINUX)
+#if defined(OS_CHROMEOS) || defined(OS_LINUX) || defined(OS_BSD)
 #define MAYBE_GetRestoredBounds DISABLED_GetRestoredBounds
 #else
 #define MAYBE_GetRestoredBounds GetRestoredBounds
@@ -2229,7 +2229,7 @@ TEST_F(WidgetTest, ValidDuringOnNativeWidgetDestroyingFromClose) {
   EXPECT_EQ(gfx::Rect(), observer.bounds());
   base::RunLoop().RunUntilIdle();
 // Broken on Linux. See http://crbug.com/515379.
-#if !defined(OS_LINUX) || defined(OS_CHROMEOS)
+#if !defined(OS_LINUX) || defined(OS_CHROMEOS) && !defined(OS_BSD)
   EXPECT_EQ(screen_rect, observer.bounds());
 #endif
 }
diff --git ui/views/window/custom_frame_view.cc ui/views/window/custom_frame_view.cc
index 27a5316af1b6..02f89a1e2022 100644
--- ui/views/window/custom_frame_view.cc
+++ ui/views/window/custom_frame_view.cc
@@ -302,7 +302,7 @@ int CustomFrameView::NonClientTopBorderHeight() const {
 int CustomFrameView::CaptionButtonY() const {
   // Maximized buttons start at window top so that even if their images aren't
   // drawn flush with the screen edge, they still obey Fitts' Law.
-#if defined(OS_LINUX) && !defined(OS_CHROMEOS)
+#if (defined(OS_LINUX) && !defined(OS_CHROMEOS)) || defined(OS_BSD)
   return FrameBorderThickness();
 #else
   return frame_->IsMaximized() ? FrameBorderThickness() : kFrameShadowThickness;
diff --git ui/views/window/dialog_delegate.cc ui/views/window/dialog_delegate.cc
index 32a67ae86241..c5f43cfbea14 100644
--- ui/views/window/dialog_delegate.cc
+++ ui/views/window/dialog_delegate.cc
@@ -60,7 +60,7 @@ Widget::InitParams DialogDelegate::GetDialogWidgetInitParams(
   params.bounds = bounds;
   DialogDelegate* dialog = delegate->AsDialogDelegate();
 
-#if defined(OS_LINUX) && !defined(OS_CHROMEOS)
+#if (defined(OS_LINUX) && !defined(OS_CHROMEOS)) || defined(OS_BSD)
   // The new style doesn't support unparented dialogs on Linux desktop.
   if (dialog)
     dialog->supports_custom_frame_ &= parent != NULL;
diff --git ui/views/window/frame_background.cc ui/views/window/frame_background.cc
index 7bbbb8db9025..8d61c8833365 100644
--- ui/views/window/frame_background.cc
+++ ui/views/window/frame_background.cc
@@ -173,7 +173,7 @@ void FrameBackground::PaintFrameColor(gfx::Canvas* canvas,
 
 void FrameBackground::PaintFrameTopArea(gfx::Canvas* canvas,
                                         const View* view) const {
-#if defined(OS_LINUX) && !defined(OS_CHROMEOS)
+#if (defined(OS_LINUX) && !defined(OS_CHROMEOS)) || defined(OS_BSD)
   auto* native_theme = view->GetNativeTheme();
   ui::NativeTheme::ExtraParams params;
   params.frame_top_area.use_custom_frame = use_custom_frame_;
