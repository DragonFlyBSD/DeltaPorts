diff --git third_party/angle/BUILD.gn third_party/angle/BUILD.gn
index 7c048ba45..261de6080 100644
--- third_party/angle/BUILD.gn
+++ third_party/angle/BUILD.gn
@@ -12,7 +12,8 @@ import("//ui/ozone/ozone.gni")
 
 declare_args() {
   # Use the PCI lib to collect GPU information on Linux.
-  use_libpci = is_linux && (!is_chromecast || is_cast_desktop_build) &&
+  use_libpci = (is_linux || is_bsd) &&
+               (!is_chromecast || is_cast_desktop_build) &&
                (use_x11 || use_ozone)
 }
 
@@ -144,7 +145,7 @@ config("angle_common_config") {
 static_library("angle_common") {
   sources = rebase_path(gles_gypi.libangle_common_sources, ".", "src")
 
-  if (is_linux || is_android) {
+  if (is_linux || is_android || is_bsd) {
     sources += rebase_path(gles_gypi.libangle_common_linux_sources, ".", "src")
   }
 
@@ -226,7 +227,7 @@ static_library("angle_gpu_info_util") {
     defines += [ "GPU_INFO_USE_SETUPAPI" ]
   }
 
-  if (is_linux) {
+  if (is_linux || is_bsd) {
     sources +=
         rebase_path(gles_gypi.libangle_gpu_info_util_linux_sources, ".", "src")
 
@@ -564,6 +565,10 @@ shared_library("libGLESv2") {
     ":libANGLE",
     "//build/config:exe_and_shlib_deps",
   ]
+
+  if (current_os == "dragonfly") {
+    ldflags = ["-L/usr/local/lib"]
+  }
 }
 
 static_library("libGLESv2_static") {
@@ -650,7 +655,7 @@ util_gypi = exec_script("//build/gypi_to_gn.py",
 
 config("angle_util_config") {
   include_dirs = [ "util" ]
-  if (is_linux && use_x11) {
+  if ((is_linux || is_bsd) && use_x11) {
     libs = [ "X11" ]
   }
 }
@@ -677,7 +682,7 @@ foreach(is_shared_library,
       sources += rebase_path(util_gypi.util_win32_sources, ".", "util")
     }
 
-    if (is_linux) {
+    if (is_linux || is_bsd) {
       sources += rebase_path(util_gypi.util_linux_sources, ".", "util")
       libs = [
         "rt",
diff --git third_party/angle/src/tests/BUILD.gn third_party/angle/src/tests/BUILD.gn
index 76a913cb6..59379904b 100644
--- third_party/angle/src/tests/BUILD.gn
+++ third_party/angle/src/tests/BUILD.gn
@@ -41,7 +41,7 @@ test("angle_unittests") {
   ]
 }
 
-if (is_win || is_linux || is_mac || is_android) {
+if (is_win || is_linux || is_mac || is_android || is_bsd) {
   end2end_gypi = exec_script("//build/gypi_to_gn.py",
                              [
                                rebase_path("angle_end2end_tests.gypi"),
@@ -82,7 +82,7 @@ if (is_win || is_linux || is_mac || is_android) {
       "//third_party/angle:libANGLE_config",
     ]
 
-    if (is_linux && !is_component_build) {
+    if ((is_linux || is_bsd) && !is_component_build) {
       # Set rpath to find libEGL.so and libGLESv2.so even in a non-component build.
       configs += [ "//build/config/gcc:rpath_for_built_shared_libraries" ]
     }
@@ -153,7 +153,7 @@ if (is_win || is_linux || is_mac || is_android) {
   }
 }
 
-if (is_win || is_linux) {
+if (is_win || is_linux || is_bsd) {
   perftests_gypi = exec_script("//build/gypi_to_gn.py",
                                [
                                  rebase_path("angle_perftests.gypi"),
@@ -230,7 +230,7 @@ if (build_angle_deqp_tests) {
     # Ask the system headers to expose all the regular function otherwise
     # dEQP doesn't compile and produces warnings about implicitly defined
     # functions.
-    if (is_linux) {
+    if (is_linux || is_bsd) {
       # This has to be GNU_SOURCE as on Linux dEQP uses syscall()
       defines += [ "_GNU_SOURCE" ]
     }
@@ -253,7 +253,7 @@ if (build_angle_deqp_tests) {
     ]
   }
 
-  if (is_linux || is_android) {
+  if (is_linux || is_android || is_bsd) {
     deqp_undefine_configs += [ "//build/config/gcc:no_exceptions" ]
   }
 
@@ -290,7 +290,7 @@ if (build_angle_deqp_tests) {
     if (is_win) {
       sources += rebase_path(deqp_gypi.deqp_libtester_sources_win, ".", "../..")
     }
-    if (is_linux || is_android) {
+    if (is_linux || is_android || is_bsd) {
       sources +=
           rebase_path(deqp_gypi.deqp_libtester_sources_unix, ".", "../..")
     }
@@ -320,7 +320,7 @@ if (build_angle_deqp_tests) {
 
     # Taken from gpu/BUILD.gn
     # TODO(jmadill): this should be in a shared location
-    if (is_linux && !is_chromecast) {
+    if ((is_linux || is_bsd) && !is_chromecast) {
       libs = [ "pci" ]
     }
   }
@@ -396,7 +396,7 @@ if (build_angle_deqp_tests) {
         "../../../deqp/src/data/",
       ]
 
-      if (is_linux && !is_component_build) {
+      if ((is_linux || is_bsd) && !is_component_build) {
         # Set rpath to find *.so files even in a non-component build.
         configs += [ "//build/config/gcc:rpath_for_built_shared_libraries" ]
       }
