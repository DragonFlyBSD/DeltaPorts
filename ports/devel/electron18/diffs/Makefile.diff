--- Makefile.orig	2022-12-17 09:53:30 UTC
+++ Makefile
@@ -52,7 +52,8 @@ LIB_DEPENDS=		libatk-bridge-2.0.so:acces
 			libexpat.so:textproc/expat2 \
 			libxkbcommon.so:x11/libxkbcommon \
 			libxshmfence.so:x11/libxshmfence \
-			libfontconfig.so:x11-fonts/fontconfig
+			libfontconfig.so:x11-fonts/fontconfig \
+			libc++.so.1:devel/libcxx13
 RUN_DEPENDS=		xdg-open:devel/xdg-utils
 TEST_DEPENDS=		git:devel/git \
 			${PYTHON_PKGNAMEPREFIX}python-dbusmock>0:devel/py-python-dbusmock@${PY_FLAVOR} \
@@ -123,6 +124,7 @@ DIST_IMPLIES=		DRIVER
 DRIVER_ALL_TARGET=	chromedriver
 KERBEROS_VARS=		GN_ARGS+=use_kerberos=true
 KERBEROS_VARS_OFF=	GN_ARGS+=use_kerberos=false
+KERBEROS_LIB_DEPENDS+=	libkrb5.so:security/krb5
 LTO_VARS=		GN_ARGS+=use_thin_lto=true \
 			GN_ARGS+=thin_lto_enable_optimizations=true
 LTO_VARS_OFF=		GN_ARGS+=use_thin_lto=false
@@ -187,21 +189,36 @@ GN_BOOTSTRAP_FLAGS=	--no-clean --no-rebu
 .include "Makefile.version"
 .include <bsd.port.pre.mk>
 
-.if ${COMPILER_VERSION} < 130
+#.if ${COMPILER_VERSION} < 130
+#LLVM_DEFAULT=	13
+#BUILD_DEPENDS+=	clang${LLVM_DEFAULT}:devel/llvm${LLVM_DEFAULT}
+#BINARY_ALIAS+=	cpp=${LOCALBASE}/bin/clang-cpp${LLVM_DEFAULT} \
+#		cc=${LOCALBASE}/bin/clang${LLVM_DEFAULT} \
+#		c++=${LOCALBASE}/bin/clang++${LLVM_DEFAULT} \
+#		ar=${LOCALBASE}/bin/llvm-ar${LLVM_DEFAULT} \
+#		nm=${LOCALBASE}/bin/llvm-nm${LLVM_DEFAULT} \
+#		ld=${LOCALBASE}/bin/ld.lld${LLVM_DEFAULT}
+#.else
+#BINARY_ALIAS+=	ar=/usr/bin/llvm-ar \
+#		nm=/usr/bin/llvm-nm
+#.endif
+
+# XXX - This is a hack to force llvm to use libc++ C++ includes instead of base's gcc
 LLVM_DEFAULT=	13
-BUILD_DEPENDS+=	clang${LLVM_DEFAULT}:devel/llvm${LLVM_DEFAULT}
+USE_CLANG_FALLBACK=     ${LLVM_DEFAULT}
+
+LIB_DIRS+=	${PREFIX}/llvm${LLVM_DEFAULT}/libcxx/lib
+
 BINARY_ALIAS+=	cpp=${LOCALBASE}/bin/clang-cpp${LLVM_DEFAULT} \
 		cc=${LOCALBASE}/bin/clang${LLVM_DEFAULT} \
 		c++=${LOCALBASE}/bin/clang++${LLVM_DEFAULT} \
 		ar=${LOCALBASE}/bin/llvm-ar${LLVM_DEFAULT} \
-		nm=${LOCALBASE}/bin/llvm-nm${LLVM_DEFAULT} \
-		ld=${LOCALBASE}/bin/ld.lld${LLVM_DEFAULT}
-.else
-BINARY_ALIAS+=	ar=/usr/bin/llvm-ar \
-		nm=/usr/bin/llvm-nm
-.endif
+		nm=${LOCALBASE}/bin/llvm-nm${LLVM_DEFAULT}
+
+CXXFLAGS+=	-stdlib=libc++ -cxx-isystem ${LOCALBASE}/llvm${LLVM_DEFAULT}/libcxx/include/c++/v1 -I${LOCALBASE}/include
+LDFLAGS=	-L /usr/lib -L${LOCALBASE}/llvm${LLVM_DEFAULT}/libcxx/lib/c++ -L /lib
 
-.if ${ARCH} == "amd64"
+.if ${ARCH} == "x86_64"
 PLIST_SUB+=	AMD64=""
 .else
 PLIST_SUB+=	AMD64="@comment "
@@ -262,6 +279,16 @@ pre-patch:
 	# ${FIND} ${WRKSRC} -type f -name '*.orig' -print -delete
 	# ${FIND} ${WRKSRC} -type f -name '*~' -print -delete
 
+dfly-patch:
+	# Sandbox stuff
+	@${MKDIR} ${WRKSRC}/sandbox/policy/dragonfly
+	@${CP} ${WRKSRC}/sandbox/policy/freebsd/sandbox_freebsd.h ${WRKSRC}/sandbox/policy/dragonfly/sandbox_dragonfly.h
+	@${CP} ${WRKSRC}/sandbox/policy/freebsd/sandbox_freebsd.cc ${WRKSRC}/sandbox/policy/dragonfly/sandbox_dragonfly.cc
+	${REINPLACE_CMD} -e "s|FreeBSD|DragonFly|g" \
+		-e "s|freebsd\/sandbox_freebsd.h|dragonfly\/sandbox_dragonfly.h|g" \
+		${WRKSRC}/sandbox/policy/dragonfly/sandbox_dragonfly.h \
+		${WRKSRC}/sandbox/policy/dragonfly/sandbox_dragonfly.cc \
+
 pre-configure:
 # We used to remove bundled libraries to be sure that chromium uses
 # system libraries and not shipped ones.
@@ -275,7 +302,7 @@ pre-configure:
 .for brand in Chrome Chromium
 	${CP} -r \
 		${WRKSRC}/third_party/ffmpeg/chromium/config/${brand}/linux/ \
-		${WRKSRC}/third_party/ffmpeg/chromium/config/${brand}/freebsd
+		${WRKSRC}/third_party/ffmpeg/chromium/config/${brand}/dragonfly
 .endfor
 
 do-configure:
@@ -286,13 +313,13 @@ do-configure:
 	cd ${WRKSRC} && ${SETENV} ${CONFIGURE_ENV} ./out/${BUILDTYPE}/gn gen out/${BUILDTYPE} \
 		--args='import("//electron/build/args/${GN_FILE}") ${GN_ARGS}'
 # Setup nodejs dependency
-	${MKDIR} ${WRKSRC}/third_party/node/freebsd/node-freebsd/bin
-	${LN} -sf ${LOCALBASE}/bin/node ${WRKSRC}/third_party/node/freebsd/node-freebsd/bin/node
+	${MKDIR} ${WRKSRC}/third_party/node/dragonfly/node-dragonfly/bin
+	${LN} -sf ${LOCALBASE}/bin/node ${WRKSRC}/third_party/node/dragonfly/node-dragonfly/bin/node
 # Setup buildtools/freebsd
-	${MKDIR} ${WRKSRC}/buildtools/freebsd
-	${LN} -sf ${WRKSRC}/buildtools/linux64/clang-format ${WRKSRC}/buildtools/freebsd
-	${LN} -sf ${WRKSRC}/out/${BUILDTYPE}/gn ${WRKSRC}/buildtools/freebsd
-	${LN} -sf /usr/bin/strip ${WRKSRC}/buildtools/freebsd/strip
+	${MKDIR} ${WRKSRC}/buildtools/dragonfly
+	${LN} -sf ${WRKSRC}/buildtools/linux64/clang-format ${WRKSRC}/buildtools/dragonfly
+	${LN} -sf ${WRKSRC}/out/${BUILDTYPE}/gn ${WRKSRC}/buildtools/dragonfly
+	${LN} -sf /usr/bin/strip ${WRKSRC}/buildtools/dragonfly/strip
 
 post-build:
 	cd ${WRKSRC} && ${SETENV} ${MAKE_ENV} \
@@ -302,10 +329,10 @@ post-build-DIST-on:
 	cd ${WRKSRC} && ${SETENV} ${MAKE_ENV} \
 		${MAKE_CMD} ${MAKE_ARGS} ${POST_BUILD_DIST_TARGETS}
 	cd ${WRKSRC}/out/${BUILDTYPE} && \
-		${CP} chromedriver.zip chromedriver-v${ELECTRON_VER}-freebsd-${ARCH:S/amd64/x64/:S/i386/ia32/}.zip && \
-		${CP} dist.zip electron-v${ELECTRON_VER}-freebsd-${ARCH:S/amd64/x64/:S/i386/ia32/}.zip && \
-		${CP} mksnapshot.zip mksnapshot-v${ELECTRON_VER}-freebsd-${ARCH:S/amd64/x64/:S/i386/ia32/}.zip && \
-		${SHA256} -r *-v${ELECTRON_VER}-freebsd-*.zip | ${SED} -e 's/ / */' > SHASUMS256.txt
+		${CP} chromedriver.zip chromedriver-v${ELECTRON_VER}-dragonfly-${ARCH:S/amd64/x64/:S/i386/ia32/}.zip && \
+		${CP} dist.zip electron-v${ELECTRON_VER}-dragonfly-${ARCH:S/amd64/x64/:S/i386/ia32/}.zip && \
+		${CP} mksnapshot.zip mksnapshot-v${ELECTRON_VER}-dragonfly-${ARCH:S/amd64/x64/:S/i386/ia32/}.zip && \
+		${SHA256} -r *-v${ELECTRON_VER}-dragonfly-*.zip | ${SED} -e 's/ / */' > SHASUMS256.txt
 
 do-install:
 	${MKDIR} ${STAGEDIR}${DATADIR}
@@ -340,7 +367,7 @@ do-install:
 post-install-DIST-on:
 	${MKDIR} ${STAGEDIR}${DATADIR}/releases
 	${INSTALL_DATA} ${WRKSRC}/out/${BUILDTYPE}/SHASUMS256.txt ${STAGEDIR}${DATADIR}/releases
-	${INSTALL_DATA} ${WRKSRC}/out/${BUILDTYPE}/*-v${ELECTRON_VER}-freebsd-*.zip ${STAGEDIR}${DATADIR}/releases
+	${INSTALL_DATA} ${WRKSRC}/out/${BUILDTYPE}/*-v${ELECTRON_VER}-dragonfly-*.zip ${STAGEDIR}${DATADIR}/releases
 
 post-install-DRIVER-on:
 	${INSTALL_PROGRAM} ${WRKSRC}/out/${BUILDTYPE}/chromedriver.unstripped \
