diff --git a/include/boost/json/detail/string_impl.hpp b/include/boost/json/detail/string_impl.hpp
index 6851111c..224cef8c 100644
--- a/include/boost/json/detail/string_impl.hpp
+++ b/include/boost/json/detail/string_impl.hpp
@@ -351,6 +351,13 @@ class string_impl
     }
 };
 
+template<class T>
+string_view
+to_string_view(T const& t) noexcept
+{
+    return string_view(t);
+}
+
 } // detail
 BOOST_JSON_NS_END
 
diff --git a/include/boost/json/string.hpp b/include/boost/json/string.hpp
index 1c0a8e1e..45b4af4b 100644
--- a/include/boost/json/string.hpp
+++ b/include/boost/json/string.hpp
@@ -1945,7 +1945,7 @@ class string
     int
     compare(string_view sv) const noexcept
     {
-        return string_view(*this).compare(sv);
+        return subview().compare(sv);
     }
 
     //------------------------------------------------------
@@ -2248,11 +2248,24 @@ class string
     */
     string_view
     subview(
-        std::size_t pos = 0,
-        std::size_t count = npos) const
+        std::size_t pos
+#ifdef BOOST_JSON_DOCS
+        = 0
+#endif
+        ,std::size_t count = npos) const
+    {
+        return subview().substr(pos, count);
+    }
+
+    // this is a faster, leaner, noexcept
+    // version of subview() with no args
+#ifndef BOOST_JSON_DOCS
+    string_view
+    subview() const noexcept
     {
-        return string_view(*this).substr(pos, count);
+        return string_view( data(), size() );
     }
+#endif
 
     //------------------------------------------------------
 
@@ -2281,7 +2294,7 @@ class string
         std::size_t count,
         std::size_t pos = 0) const
     {
-        return string_view(*this).copy(dest, count, pos);
+        return subview().copy(dest, count, pos);
     }
 
     //------------------------------------------------------
@@ -2460,7 +2473,7 @@ class string
         string_view sv,
         std::size_t pos = 0) const noexcept
     {
-        return string_view(*this).find(sv, pos);
+        return subview().find(sv, pos);
     }
 
     /** Find the first occurrence of a character within the string.
@@ -2487,7 +2500,7 @@ class string
         char ch,
         std::size_t pos = 0) const noexcept
     {
-        return string_view(*this).find(ch, pos);
+        return subview().find(ch, pos);
     }
 
     //------------------------------------------------------
@@ -2518,7 +2531,7 @@ class string
         string_view sv,
         std::size_t pos = npos) const noexcept
     {
-        return string_view(*this).rfind(sv, pos);
+        return subview().rfind(sv, pos);
     }
 
     /** Find the last occurrence of a character within the string.
@@ -2546,7 +2559,7 @@ class string
         char ch,
         std::size_t pos = npos) const noexcept
     {
-        return string_view(*this).rfind(ch, pos);
+        return subview().rfind(ch, pos);
     }
 
     //------------------------------------------------------
@@ -2577,7 +2590,7 @@ class string
         string_view sv,
         std::size_t pos = 0) const noexcept
     {
-        return string_view(*this).find_first_of(sv, pos);
+        return subview().find_first_of(sv, pos);
     }
 
     //------------------------------------------------------
@@ -2607,7 +2620,7 @@ class string
         string_view sv,
         std::size_t pos = 0) const noexcept
     {
-        return string_view(*this).find_first_not_of(sv, pos);
+        return subview().find_first_not_of(sv, pos);
     }
 
     /** Find the first occurrence of a character not equal to `ch`.
@@ -2634,7 +2647,7 @@ class string
         char ch,
         std::size_t pos = 0) const noexcept
     {
-        return string_view(*this).find_first_not_of(ch, pos);
+        return subview().find_first_not_of(ch, pos);
     }
 
     //------------------------------------------------------
@@ -2666,7 +2679,7 @@ class string
         string_view sv,
         std::size_t pos = npos) const noexcept
     {
-        return string_view(*this).find_last_of(sv, pos);
+        return subview().find_last_of(sv, pos);
     }
 
     //------------------------------------------------------
@@ -2696,7 +2709,7 @@ class string
         string_view sv,
         std::size_t pos = npos) const noexcept
     {
-        return string_view(*this).find_last_not_of(sv, pos);
+        return subview().find_last_not_of(sv, pos);
     }
 
     /** Find the last occurrence of a character not equal to `ch`.
@@ -2725,7 +2738,7 @@ class string
         char ch,
         std::size_t pos = npos) const noexcept
     {
-        return string_view(*this).find_last_not_of(ch, pos);
+        return subview().find_last_not_of(ch, pos);
     }
 
 private:
@@ -2762,6 +2775,20 @@ class string
 
 //----------------------------------------------------------
 
+namespace detail
+{
+
+template <>
+inline
+string_view
+to_string_view<string>(string const& s) noexcept
+{
+    return s.subview();
+}
+
+} // namespace detail
+
+
 /** Return true if lhs equals rhs.
 
     A lexicographical comparison is used.
@@ -2782,7 +2809,7 @@ typename std::enable_if<
 operator==(T const& lhs, U const& rhs) noexcept
 #endif
 {
-    return string_view(lhs) == string_view(rhs);
+    return detail::to_string_view(lhs) == detail::to_string_view(rhs);
 }
 
 /** Return true if lhs does not equal rhs.
@@ -2805,7 +2832,7 @@ typename std::enable_if<
 operator!=(T const& lhs, U const& rhs) noexcept
 #endif
 {
-    return string_view(lhs) != string_view(rhs);
+    return detail::to_string_view(lhs) != detail::to_string_view(rhs);
 }
 
 /** Return true if lhs is less than rhs.
@@ -2828,7 +2855,7 @@ typename std::enable_if<
 operator<(T const& lhs, U const& rhs) noexcept
 #endif
 {
-    return string_view(lhs) < string_view(rhs);
+    return detail::to_string_view(lhs) < detail::to_string_view(rhs);
 }
 
 /** Return true if lhs is less than or equal to rhs.
@@ -2851,7 +2878,7 @@ typename std::enable_if<
 operator<=(T const& lhs, U const& rhs) noexcept
 #endif
 {
-    return string_view(lhs) <= string_view(rhs);
+    return detail::to_string_view(lhs) <= detail::to_string_view(rhs);
 }
 
 #ifdef BOOST_JSON_DOCS
@@ -2870,7 +2897,7 @@ typename std::enable_if<
 operator>=(T const& lhs, U const& rhs) noexcept
 #endif
 {
-    return string_view(lhs) >= string_view(rhs);
+    return detail::to_string_view(lhs) >= detail::to_string_view(rhs);
 }
 
 /** Return true if lhs is greater than rhs.
@@ -2893,7 +2920,7 @@ typename std::enable_if<
 operator>(T const& lhs, U const& rhs) noexcept
 #endif
 {
-    return string_view(lhs) > string_view(rhs);
+    return detail::to_string_view(lhs) > detail::to_string_view(rhs);
 }
 
 BOOST_JSON_NS_END
