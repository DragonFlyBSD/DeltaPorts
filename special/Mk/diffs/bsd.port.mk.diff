--- bsd.port.mk.orig	2017-10-30 17:11:54 UTC
+++ bsd.port.mk
@@ -43,7 +43,8 @@ FreeBSD_MAINTAINER=	portmgr@FreeBSD.org
 #				  makefile is being used on.  Automatically set to
 #				  "FreeBSD," "NetBSD," or "OpenBSD" as appropriate.
 # OSREL			- The release version (numeric) of the operating system.
-# OSVERSION		- The value of __FreeBSD_version.
+# OSVERSION		- 9999999 - try to ignore FreeBSD version check
+# DFLYVERSION		- The value of __DragonFly_version.
 #
 # This is the beginning of the list of all variables that need to be
 # defined in a port, listed in order that they should be included
@@ -500,6 +501,12 @@ FreeBSD_MAINTAINER=	portmgr@FreeBSD.org
 #				  Default: ${MASTERDIR}/scripts
 # FILESDIR		- A directory containing any miscellaneous additional files.
 #				  Default: ${MASTERDIR}/files
+# DFLY_PATCHDIR=	- A directory containing additional patches required
+#				  to build port on DragonFly
+#				  Default: ${MASTERDIR}/dragonfly
+# DFLY_FILESDIR 	- A directory containing any miscellaneous files
+#				  needed to build port on DragonFly
+#				  Default: ${MASTERDIR}/dragonfly
 # PKGDIR		- A directory containing any package creation files.
 #				  Default: ${MASTERDIR}
 # SRC_BASE		- The root of the src tree.  (Some ports require this to get
@@ -1040,10 +1047,16 @@ LC_ALL=		C
 # These need to be absolute since we don't know how deep in the ports
 # tree we are and thus can't go relative.  They can, of course, be overridden
 # by individual Makefiles or local system make configuration.
-PORTSDIR?=		/usr/ports
+
+WITH_PKGNG?=		yes
+WITHOUT_FBSD10_FIX?=	yes
+DFLY_PATCHDIR?= 	${MASTERDIR}/dragonfly
+DFLY_FILESDIR?= 	${MASTERDIR}/dragonfly
+PORTSDIR?=		/usr/dports
 LOCALBASE?=		/usr/local
 LINUXBASE?=		/compat/linux
-DISTDIR?=		${PORTSDIR}/distfiles
+DISTDIR?=		/usr/distfiles
+WRKDIRPREFIX?=		/usr/obj/dports
 _DISTDIR?=		${DISTDIR}/${DIST_SUBDIR}
 INDEXDIR?=		${PORTSDIR}
 SRC_BASE?=		/usr/src
@@ -1142,36 +1155,40 @@ MAINTAINER?=	ports@FreeBSD.org
 
 # Get the architecture
 .if !defined(ARCH)
-ARCH!=	${UNAME} -p
+ARCH=	x86_64
 .endif
 _EXPORTED_VARS+=	ARCH
 
 # Get the operating system type
 .if !defined(OPSYS)
-OPSYS!=	${UNAME} -s
+OPSYS=	DragonFly
 .endif
 _EXPORTED_VARS+=	OPSYS
 
 .if !defined(_OSRELEASE)
+.   if defined(.MAKE.DF.OSREL)
+_OSRELEASE=	${.MAKE.DF.OSREL}-DPORTS
+.   else
 _OSRELEASE!=	${UNAME} -r
+.   endif
 .endif
 _EXPORTED_VARS+=	_OSRELEASE
 
-# Get the operating system revision
-OSREL?=	${_OSRELEASE:C/-.*//}
-_EXPORTED_VARS+=	OSREL
-
 # Get __FreeBSD_version
 .if !defined(OSVERSION)
-.if exists(/usr/include/sys/param.h)
-OSVERSION!=	${AWK} '/^\#define[[:blank:]]__FreeBSD_version/ {print $$3}' < /usr/include/sys/param.h
-.elif exists(${SRC_BASE}/sys/sys/param.h)
-OSVERSION!=	${AWK} '/^\#define[[:blank:]]__FreeBSD_version/ {print $$3}' < ${SRC_BASE}/sys/sys/param.h
-.else
-.error Unable to determine OS version.  Either define OSVERSION, install /usr/include/sys/param.h or define SRC_BASE.
+OSVERSION=	9999999
 .endif
+
+.if !defined(DFLYVERSION)
+. if defined(.MAKE.DF.OSREL)
+DFLYVERSION=	${.MAKE.DF.VERSION}
+OSREL=		${.MAKE.DF.OSREL}
+. else
+DFLYVERSION!=	${AWK} '/^\#define[[:blank:]]__DragonFly_version/ {print $$3}' < /usr/include/sys/param.h
+OSREL!=		${ECHO} ${DFLYVERSION} | ${AWK} '{a=int($$1/100000); b=int(($$1-(a*100000))/100); print a "." b}'
+. endif
 .endif
-_EXPORTED_VARS+=	OSVERSION
+_EXPORTED_VARS+=	OSVERSION DFLYVERSION OSREL
 
 .if (${OPSYS} == FreeBSD && (${OSVERSION} < 1004000 || (${OSVERSION} >= 1100000 && ${OSVERSION} < 1101001))) || \
     (${OPSYS} == DragonFly && ${DFLYVERSION} < 400400)
@@ -1191,18 +1208,6 @@ show-unsupported-system-error:
 . endif
 .endif
 
-# Convert OSVERSION to major release number
-_OSVERSION_MAJOR=	${OSVERSION:C/([0-9]?[0-9])([0-9][0-9])[0-9]{3}/\1/}
-# Sanity checks for chroot/jail building.
-# Skip if OSVERSION specified on cmdline for testing. Only works for bmake.
-.if !defined(.MAKEOVERRIDES) || !${.MAKEOVERRIDES:MOSVERSION}
-.if ${_OSVERSION_MAJOR} != ${_OSRELEASE:R}
-.error UNAME_r (${_OSRELEASE}) and OSVERSION (${OSVERSION}) do not agree on major version number.
-.elif ${_OSVERSION_MAJOR} != ${OSREL:R}
-.error OSREL (${OSREL}) and OSVERSION (${OSVERSION}) do not agree on major version number.
-.endif
-.endif
-
 # Only define tools here (for transition period with between pkg tools)
 .include "${PORTSDIR}/Mk/bsd.commands.mk"
 
@@ -1348,13 +1353,13 @@ DEV_WARNING+=	"You are using USE_GITHUB
 DISTNAME?=	${PORTNAME}-${DISTVERSIONFULL}
 .endif
 
-INDEXFILE?=		INDEX-${OSVERSION:C/([0-9]*)[0-9]{5}/\1/}
+INDEXFILE?=		INDEX
 
 .if defined(USE_XORG) || defined(XORG_CAT)
 .include "${PORTSDIR}/Mk/bsd.xorg.mk"
 .endif
 
-PACKAGES?=		${PORTSDIR}/packages
+PACKAGES?=		/usr/packages
 TEMPLATES?=		${PORTSDIR}/Templates
 KEYWORDS?=		${PORTSDIR}/Keywords
 
@@ -1670,7 +1675,7 @@ _WRKDIR=	work
 _WRKDIR=	work-${FLAVOR}
 .endif
 
-WRKDIR?=		${WRKDIRPREFIX}${.CURDIR}/${_WRKDIR}
+WRKDIR=			${WRKDIRPREFIX}/${.CURDIR:H:T}/${.CURDIR:T}
 BINARY_LINKDIR=	${WRKDIR}/.bin
 PATH:=			${BINARY_LINKDIR}:${PATH}
 .if !${MAKE_ENV:MPATH=*} && !${CONFIGURE_ENV:MPATH=*}
@@ -1742,7 +1747,14 @@ PLIST_SUB_SED?= ${PLIST_SUB_SED_tmp3:C/(
 
 # kludge to strip trailing whitespace from CFLAGS;
 # sub-configure will not # survive double space
-CFLAGS:=	${CFLAGS:C/ $//}
+# remove -O from /usr/share/mk/sys.mk and replace with -O2
+# null out WORLD_CFLAGS coming from /etc/make.conf
+WORLD_CCOPTLEVEL:=
+WORLD_CFLAGS:=
+CFLAGS:=	${CFLAGS:C/ $//:N-O}
+.if !${CFLAGS:M-O*}
+CFLAGS+=	-O2
+.endif
 
 .if defined(WITHOUT_CPU_CFLAGS)
 .if defined(_CPUCFLAGS)
@@ -1789,19 +1801,6 @@ PATCH_DEPENDS+=		${LOCALBASE}/bin/unzip:
 
 # Check the compatibility layer for amd64/ia64
 
-.if ${ARCH} == "amd64" || ${ARCH} =="ia64"
-.if exists(/usr/lib32)
-HAVE_COMPAT_IA32_LIBS?=  YES
-.endif
-.if !defined(HAVE_COMPAT_IA32_KERN)
-HAVE_COMPAT_IA32_KERN!= if ${SYSCTL} -n compat.ia32.maxvmem >/dev/null 2>&1; then echo YES; fi; echo
-.if empty(HAVE_COMPAT_IA32_KERN)
-.undef HAVE_COMPAT_IA32_KERN
-.endif
-.endif
-.endif
-_EXPORTED_VARS+=	HAVE_COMPAT_IA32_KERN
-
 .if defined(IA32_BINARY_PORT) && ${ARCH} != "i386"
 .if ${ARCH} == "amd64" || ${ARCH} == "ia64"
 .if !defined(HAVE_COMPAT_IA32_KERN)
@@ -1828,7 +1827,17 @@ PKG_DEPENDS+=	${LOCALBASE}/sbin/pkg:${PK
 .endif
 
 .if defined(USE_GCC)
-.include "${PORTSDIR}/Mk/bsd.gcc.mk"
+.include "${PORTSDIR}/Mk/bsd.df.gcc.mk"
+.else
+.  if !defined(USE_GNUSTEP)
+.   if exists (/usr/libexec/gcc80/CC)
+CONFIGURE_ENV+= 	CCVER=gcc80
+MAKE_ENV+=		CCVER=gcc80
+.   else
+CONFIGURE_ENV+= 	CCVER=gcc50
+MAKE_ENV+=		CCVER=gcc50
+.   endif
+.  endif
 .endif
 
 .if defined(LLD_UNSAFE) && ${/usr/bin/ld:L:tA} == /usr/bin/ld.lld
@@ -2039,9 +2048,11 @@ DISTINFO_FILE?=		${MASTERDIR}/distinfo
 MAKE_FLAGS?=	-f
 MAKEFILE?=		Makefile
 MAKE_CMD?=		${BSDMAKE}
+PLIST_SUB:=		${PLIST_SUB:NPROFILE=*} PROFILE="@comment "
 MAKE_ENV+=		PREFIX=${PREFIX} \
 			LOCALBASE=${LOCALBASE} \
 			LIBDIR="${LIBDIR}" \
+			NOPROFILE=1 \
 			CC="${CC}" CFLAGS="${CFLAGS}" \
 			CPP="${CPP}" CPPFLAGS="${CPPFLAGS}" \
 			LDFLAGS="${LDFLAGS}" LIBS="${LIBS}" \
@@ -2078,7 +2089,7 @@ MAKE_JOBS_NUMBER=	1
 _MAKE_JOBS_NUMBER:=	${MAKE_JOBS_NUMBER}
 .else
 .if !defined(_SMP_CPUS)
-_SMP_CPUS!=		${SYSCTL} -n kern.smp.cpus
+_SMP_CPUS!=		${SYSCTL} -n hw.ncpu
 .endif
 _EXPORTED_VARS+=	_SMP_CPUS
 _MAKE_JOBS_NUMBER=	${_SMP_CPUS}
@@ -2630,7 +2641,7 @@ CONFIG_SITE?=		${PORTSDIR}/Templates/con
 .if defined(GNU_CONFIGURE)
 # Maximum command line length
 .if !defined(CONFIGURE_MAX_CMD_LEN)
-CONFIGURE_MAX_CMD_LEN!=	${SYSCTL} -n kern.argmax
+CONFIGURE_MAX_CMD_LEN=	262144
 .endif
 _EXPORTED_VARS+=	CONFIGURE_MAX_CMD_LEN
 GNU_CONFIGURE_PREFIX?=	${PREFIX}
@@ -2672,6 +2683,8 @@ SET_LATE_CONFIGURE_ARGS= \
 SCRIPTS_ENV+=	CURDIR=${MASTERDIR} DISTDIR=${DISTDIR} \
 		  WRKDIR=${WRKDIR} WRKSRC=${WRKSRC} PATCHDIR=${PATCHDIR} \
 		  SCRIPTDIR=${SCRIPTDIR} FILESDIR=${FILESDIR} \
+		  DFLY_PATCHDIR=${DFLY_PATCHDIR} \
+		  DFLY_FILESDIR=${DFLY_FILESDIR} \
 		  PORTSDIR=${PORTSDIR} PREFIX=${PREFIX} LOCALBASE=${LOCALBASE}
 
 .if defined(BATCH)
@@ -2754,7 +2767,7 @@ DESKTOPDIR?=		${PREFIX}/share/applicatio
 
 # Check the machine architectures
 .if defined(ONLY_FOR_ARCHS)
-.for __ARCH in ${ONLY_FOR_ARCHS}
+.for __ARCH in ${ONLY_FOR_ARCHS:S/amd64/x86_64/}
 .if ${ARCH:M${__ARCH}} != ""
 __ARCH_OK?=		1
 .endif
@@ -2764,7 +2777,7 @@ __ARCH_OK?=		1
 .endif
 
 .if defined(NOT_FOR_ARCHS)
-.for __NARCH in ${NOT_FOR_ARCHS}
+.for __NARCH in ${NOT_FOR_ARCHS:S/amd64/x86_64/}
 .if ${ARCH:M${__NARCH}} != ""
 .undef __ARCH_OK
 .endif
@@ -2773,9 +2786,9 @@ __ARCH_OK?=		1
 
 .if !defined(__ARCH_OK)
 .if defined(ONLY_FOR_ARCHS)
-IGNORE=		is only for ${ONLY_FOR_ARCHS},
+IGNORE=		is only for ${ONLY_FOR_ARCHS:S/amd64/x86_64/},
 .else # defined(NOT_FOR_ARCHS)
-IGNORE=		does not run on ${NOT_FOR_ARCHS},
+IGNORE=		does not run on ${NOT_FOR_ARCHS:S/amd64/x86_64/},
 .endif
 IGNORE+=	while you are running ${ARCH}
 
@@ -2922,6 +2935,7 @@ all:
 	  DISTDIR=${DISTDIR} WRKDIR=${WRKDIR} WRKSRC=${WRKSRC} \
 	  PATCHDIR=${PATCHDIR} SCRIPTDIR=${SCRIPTDIR} \
 	  FILESDIR=${FILESDIR} PORTSDIR=${PORTSDIR} PREFIX=${PREFIX} \
+	  DFLY_PATCHDIR=${DFLY_PATCHDIR} DFLY_FILESDIR=${DFLY_FILESDIR} \
 	  BUILD_DEPENDS="${BUILD_DEPENDS}" RUN_DEPENDS="${RUN_DEPENDS}" \
 	  CONFLICTS="${CONFLICTS}" \
 	${ALL_HOOK}
@@ -3181,6 +3195,7 @@ do-patch:
 			dp_OPSYS="${OPSYS}" \
 			dp_PATCH="${PATCH}" \
 			dp_PATCHDIR="${PATCHDIR}" \
+			dp_DFLY_PATCHDIR="${DFLY_PATCHDIR}" \
 			dp_PATCHFILES="${_PATCHFILES2}" \
 			dp_PATCH_ARGS=${PATCH_ARGS:Q} \
 			dp_PATCH_DEBUG_TMP="${PATCH_DEBUG_TMP}" \
@@ -3407,7 +3422,7 @@ _PORTS_DIRECTORIES+=	${PKGLATESTREPOSITO
 _EXTRA_PACKAGE_TARGET_DEP+=	${PKGLATESTFILE}
 
 ${PKGLATESTFILE}: ${PKGFILE} ${PKGLATESTREPOSITORY}
-	${INSTALL} -l rs ${PKGFILE} ${PKGLATESTFILE}
+	${SH} ${SCRIPTSDIR}/relative_link.sh ${PKGFILE} ${PKGLATESTFILE}
 .  endif
 
 .endif
@@ -3762,6 +3777,7 @@ do-clean:
 	@if [ -d ${WRKDIR} ]; then \
 		if [ -w ${WRKDIR} ]; then \
 			${RM} -r ${WRKDIR}; \
+			${FIND} ${WRKDIR:H} -type d -maxdepth 1 -empty -delete; \
 		else \
 			${ECHO_MSG} "===>   ${WRKDIR} not writable, skipping"; \
 		fi; \
@@ -4144,7 +4160,7 @@ FETCH_LIST?=	for i in $$deps; do \
 			else	\
 				continue;	\
 			fi;;	\
-		*) if [ -d ${PKG_DBDIR}/$$(cd $$dir; ${MAKE} -V PKGNAME) ]; then \
+		*) if [ -d ${PKG_DBDIR}/$$(cd $$dir; ${MAKE} -V '$${PKGNAME}') ]; then \
 				continue;	\
 			fi;;	\
 		esac;	\
@@ -4468,10 +4484,15 @@ _SUB_LIST_TEMP=	${SUB_LIST:S/$/!g/:S/^/
 apply-slist:
 .if defined(SUB_FILES)
 .for file in ${SUB_FILES}
-.if !exists(${FILESDIR}/${file}.in)
-	@${ECHO_MSG} "** Missing ${FILESDIR}/${file}.in for ${PKGNAME}."; exit 1
-.else
+.if exists(${FILESDIR}/${file}.in)
 	@${SED} ${_SUB_LIST_TEMP} -e '/^@comment /d' ${FILESDIR}/${file}.in > ${WRKDIR}/${file}
+.elif exists(${DFLY_FILESDIR}/${file}.in)
+	@${SED} ${_SUB_LIST_TEMP} -e '/^@comment /d' ${DFLY_FILESDIR}/${file}.in > ${WRKDIR}/${file}
+.else
+	@${ECHO_MSG} "** Checked ${FILESDIR}:"; \
+	@${ECHO_MSG} "** Checked ${DFLY_FILESDIR}:"; \
+	@${ECHO_MSG} "** Missing ${file}.in for ${PKGNAME}."; \
+	exit 1
 .endif
 .endfor
 .for i in pkg-message pkg-install pkg-deinstall pkg-req
@@ -5254,6 +5275,7 @@ _PATCH_DEP=		extract
 _PATCH_SEQ=		050:ask-license 100:patch-message 150:patch-depends \
 				300:pre-patch 450:pre-patch-script 500:do-patch \
 				700:post-patch 850:post-patch-script \
+				880:dfly-patch \
 				${_OPTIONS_patch} ${_USES_patch}
 _CONFIGURE_DEP=	patch
 _CONFIGURE_SEQ=	150:build-depends 151:lib-depends 160:create-binary-alias \
